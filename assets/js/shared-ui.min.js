/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./node_modules/@wpmudev/shared-ui/dist/js/shared-ui.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@wpmudev/shared-ui/dist/js/shared-ui.js":
/*!**************************************************************!*\
  !*** ./node_modules/@wpmudev/shared-ui/dist/js/shared-ui.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, ClipboardJS, A11yDialog) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;var require;var require;/*!\n * WPMU DEV Shared UI\n * Copyright 2018 Incsub (https://incsub.com)\n * Licensed under GPL v2 (http://www.gnu.org/licenses/gpl-2.0.html)\n */\n/* global NodeList, Element, define */\n\n(function (global) {\n  'use strict';\n\n  var FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n  var TAB_KEY = 9;\n  var ESCAPE_KEY = 27;\n  var focusedBeforeDialog;\n\n  /**\n   * Define the constructor to instantiate a dialog\n   *\n   * @constructor\n   * @param {Element} node\n   * @param {(NodeList | Element | string)} targets\n   */\n  function A11yDialog (node, targets) {\n    // Prebind the functions that will be bound in addEventListener and\n    // removeEventListener to avoid losing references\n    this._show = this.show.bind(this);\n    this._hide = this.hide.bind(this);\n    this._maintainFocus = this._maintainFocus.bind(this);\n    this._bindKeypress = this._bindKeypress.bind(this);\n\n    // Keep a reference of the node on the instance\n    this.node = node;\n\n    // Keep an object of listener types mapped to callback functions\n    this._listeners = {};\n\n    // Initialise everything needed for the dialog to work properly\n    this.create(targets);\n  }\n\n  /**\n   * Set up everything necessary for the dialog to be functioning\n   *\n   * @param {(NodeList | Element | string)} targets\n   * @return {this}\n   */\n  A11yDialog.prototype.create = function (targets) {\n    // Keep a collection of nodes to disable/enable when toggling the dialog\n    this._targets = this._targets || collect(targets) || getSiblings(this.node);\n\n    // Make sure the dialog element is disabled on load, and that the `shown`\n    // property is synced with its value\n    this.node.setAttribute('aria-hidden', true);\n    this.shown = false;\n\n    // Keep a collection of dialog openers, each of which will be bound a click\n    // event listener to open the dialog\n    this._openers = $$('[data-a11y-dialog-show=\"' + this.node.id + '\"]');\n    this._openers.forEach(function (opener) {\n      opener.addEventListener('click', this._show);\n    }.bind(this));\n\n    // Keep a collection of dialog closers, each of which will be bound a click\n    // event listener to close the dialog\n    this._closers = $$('[data-a11y-dialog-hide]', this.node)\n      .concat($$('[data-a11y-dialog-hide=\"' + this.node.id + '\"]'));\n    this._closers.forEach(function (closer) {\n      closer.addEventListener('click', this._hide);\n    }.bind(this));\n\n    // Execute all callbacks registered for the `create` event\n    this._fire('create');\n\n    return this;\n  };\n\n  /**\n   * Show the dialog element, disable all the targets (siblings), trap the\n   * current focus within it, listen for some specific key presses and fire all\n   * registered callbacks for `show` event\n   *\n   * @param {Event} event\n   * @return {this}\n   */\n  A11yDialog.prototype.show = function (event) {\n    // If the dialog is already open, abort\n    if (this.shown) {\n      return this;\n    }\n\n    var overlay = this.node.getElementsByClassName('sui-dialog-overlay');\n    var content = this.node.getElementsByClassName('sui-dialog-content');\n    content[0].className = 'sui-dialog-content sui-bounce-in';\n    overlay[0].className = 'sui-dialog-overlay sui-fade-in';\n\n    this.shown = true;\n    this.node.removeAttribute('aria-hidden');\n\n    // Iterate over the targets to disable them by setting their `aria-hidden`\n    // attribute to `true`; in case they already have this attribute, keep a\n    // reference of their original value to be able to restore it later\n    this._targets.forEach(function (target) {\n      var original = target.getAttribute('aria-hidden');\n\n      if (original) {\n        target.setAttribute('data-a11y-dialog-original', original);\n      }\n\n      target.setAttribute('aria-hidden', 'true');\n    });\n\n    // Keep a reference to the currently focused element to be able to restore\n    // it later, then set the focus to the first focusable child of the dialog\n    // element\n    focusedBeforeDialog = document.activeElement;\n    setFocusToFirstItem(this.node);\n\n    // Bind a focus event listener to the body element to make sure the focus\n    // stays trapped inside the dialog while open, and start listening for some\n    // specific key presses (TAB and ESC)\n    document.body.addEventListener('focus', this._maintainFocus, true);\n    document.addEventListener('keydown', this._bindKeypress);\n\n    // Add overlay class to document body.\n    document.getElementsByTagName( 'html' )[0].classList.add( 'sui-has-overlay' );\n\n    // Execute all callbacks registered for the `show` event\n    this._fire('show', event);\n\n    return this;\n  };\n\n  /**\n   * Hide the dialog element, enable all the targets (siblings), restore the\n   * focus to the previously active element, stop listening for some specific\n   * key presses and fire all registered callbacks for `hide` event\n   *\n   * @param {Event} event\n   * @return {this}\n   */\n  A11yDialog.prototype.hide = function (event) {\n    // If the dialog is already closed, abort\n    if (!this.shown) {\n      return this;\n    }\n\n\n    var overlay = this.node.getElementsByClassName('sui-dialog-overlay');\n\n    var content = this.node.getElementsByClassName('sui-dialog-content');\n\n    content[0].className = 'sui-dialog-content sui-bounce-out';\n\n    overlay[0].className = 'sui-dialog-overlay sui-fade-out';\n\n    this.shown = false;\n    // This has been set so there is enough time for the animation to show\n    var timeout_node = this.node;\n    setTimeout(function () {\n\t\ttimeout_node.setAttribute('aria-hidden', 'true');\n\t}, 300);\n\n    // Iterate over the targets to enable them by remove their `aria-hidden`\n    // attribute or resetting them to their initial value\n    this._targets.forEach(function (target) {\n      var original = target.getAttribute('data-a11y-dialog-original');\n\n\n      if (original) {\n        target.setAttribute('aria-hidden', original);\n        target.removeAttribute('data-a11y-dialog-original');\n      } else {\n        target.removeAttribute('aria-hidden');\n      }\n    });\n\n    // If their was a focused element before the dialog was opened, restore the\n    // focus back to it\n    if (focusedBeforeDialog) {\n      focusedBeforeDialog.focus();\n    }\n\n    // Remove the focus event listener to the body element and stop listening\n    // for specific key presses\n    document.body.removeEventListener('focus', this._maintainFocus, true);\n    document.removeEventListener('keydown', this._bindKeypress);\n\n    // Remove overlay class to document body.\n    document.getElementsByTagName( 'html' )[0].classList.remove( 'sui-has-overlay' );\n\n    // Execute all callbacks registered for the `hide` event\n    this._fire('hide', event);\n\n    return this;\n  };\n\n  /**\n   * Destroy the current instance (after making sure the dialog has been hidden)\n   * and remove all associated listeners from dialog openers and closers\n   *\n   * @return {this}\n   */\n  A11yDialog.prototype.destroy = function () {\n    // Hide the dialog to avoid destroying an open instance\n    this.hide();\n\n    // Remove the click event listener from all dialog openers\n    this._openers.forEach(function (opener) {\n      opener.removeEventListener('click', this._show);\n    }.bind(this));\n\n    // Remove the click event listener from all dialog closers\n    this._closers.forEach(function (closer) {\n      closer.removeEventListener('click', this._hide);\n    }.bind(this));\n\n    // Execute all callbacks registered for the `destroy` event\n    this._fire('destroy');\n\n    // Keep an object of listener types mapped to callback functions\n    this._listeners = {};\n\n    return this;\n  };\n\n  /**\n   * Register a new callback for the given event type\n   *\n   * @param {string} type\n   * @param {Function} handler\n   */\n  A11yDialog.prototype.on = function (type, handler) {\n    if (typeof this._listeners[type] === 'undefined') {\n      this._listeners[type] = [];\n    }\n\n    this._listeners[type].push(handler);\n\n    return this;\n  };\n\n  /**\n   * Unregister an existing callback for the given event type\n   *\n   * @param {string} type\n   * @param {Function} handler\n   */\n  A11yDialog.prototype.off = function (type, handler) {\n    var index = this._listeners[type].indexOf(handler);\n\n    if (index > -1) {\n      this._listeners[type].splice(index, 1);\n    }\n\n    return this;\n  };\n\n  /**\n   * Iterate over all registered handlers for given type and call them all with\n   * the dialog element as first argument, event as second argument (if any).\n   *\n   * @access private\n   * @param {string} type\n   * @param {Event} event\n   */\n  A11yDialog.prototype._fire = function (type, event) {\n    var listeners = this._listeners[type] || [];\n\n    listeners.forEach(function (listener) {\n      listener(this.node, event);\n    }.bind(this));\n  };\n\n  /**\n   * Private event handler used when listening to some specific key presses\n   * (namely ESCAPE and TAB)\n   *\n   * @access private\n   * @param {Event} event\n   */\n  A11yDialog.prototype._bindKeypress = function (event) {\n    // If the dialog is shown and the ESCAPE key is being pressed, prevent any\n    // further effects from the ESCAPE key and hide the dialog\n    if (this.shown && event.which === ESCAPE_KEY) {\n      event.preventDefault();\n      this.hide();\n    }\n\n    // If the dialog is shown and the TAB key is being pressed, make sure the\n    // focus stays trapped within the dialog element\n    if (this.shown && event.which === TAB_KEY) {\n      trapTabKey(this.node, event);\n    }\n  };\n\n  /**\n   * Private event handler used when making sure the focus stays within the\n   * currently open dialog\n   *\n   * @access private\n   * @param {Event} event\n   */\n  A11yDialog.prototype._maintainFocus = function (event) {\n    // If the dialog is shown and the focus is not within the dialog element,\n    // move it back to its first focusable child\n    if (this.shown && !this.node.contains(event.target)) {\n      setFocusToFirstItem(this.node);\n    }\n  };\n\n  /**\n   * Convert a NodeList into an array\n   *\n   * @param {NodeList} collection\n   * @return {Array<Element>}\n   */\n  function toArray (collection) {\n    return Array.prototype.slice.call(collection);\n  }\n\n  /**\n   * Query the DOM for nodes matching the given selector, scoped to context (or\n   * the whole document)\n   *\n   * @param {String} selector\n   * @param {Element} [context = document]\n   * @return {Array<Element>}\n   */\n  function $$ (selector, context) {\n    return toArray((context || document).querySelectorAll(selector));\n  }\n\n  /**\n   * Return an array of Element based on given argument (NodeList, Element or\n   * string representing a selector)\n   *\n   * @param {(NodeList | Element | string)} target\n   * @return {Array<Element>}\n   */\n  function collect (target) {\n    if (NodeList.prototype.isPrototypeOf(target)) {\n      return toArray(target);\n    }\n\n    if (Element.prototype.isPrototypeOf(target)) {\n      return [target];\n    }\n\n    if (typeof target === 'string') {\n      return $$(target);\n    }\n  }\n\n  /**\n   * Set the focus to the first focusable child of the given element\n   *\n   * @param {Element} node\n   */\n  function setFocusToFirstItem (node) {\n    var focusableChildren = getFocusableChildren(node);\n\n    if (focusableChildren.length) {\n      focusableChildren[0].focus();\n    }\n  }\n\n  /**\n   * Get the focusable children of the given element\n   *\n   * @param {Element} node\n   * @return {Array<Element>}\n   */\n  function getFocusableChildren (node) {\n    return $$(FOCUSABLE_ELEMENTS.join(','), node).filter(function (child) {\n      return !!(child.offsetWidth || child.offsetHeight || child.getClientRects().length);\n    });\n  }\n\n  /**\n   * Trap the focus inside the given element\n   *\n   * @param {Element} node\n   * @param {Event} event\n   */\n  function trapTabKey (node, event) {\n    var focusableChildren = getFocusableChildren(node);\n    var focusedItemIndex = focusableChildren.indexOf(document.activeElement);\n\n    // If the SHIFT key is being pressed while tabbing (moving backwards) and\n    // the currently focused item is the first one, move the focus to the last\n    // focusable item from the dialog element\n    if (event.shiftKey && focusedItemIndex === 0) {\n      focusableChildren[focusableChildren.length - 1].focus();\n      event.preventDefault();\n    // If the SHIFT key is not being pressed (moving forwards) and the currently\n    // focused item is the last one, move the focus to the first focusable item\n    // from the dialog element\n    } else if (!event.shiftKey && focusedItemIndex === focusableChildren.length - 1) {\n      focusableChildren[0].focus();\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Retrieve siblings from given element\n   *\n   * @param {Element} node\n   * @return {Array<Element>}\n   */\n  function getSiblings (node) {\n    var nodes = toArray(node.parentNode.childNodes);\n    var siblings = nodes.filter(function (node) {\n      return node.nodeType === 1;\n    });\n\n    siblings.splice(siblings.indexOf(node), 1);\n\n    return siblings;\n  }\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = A11yDialog;\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return A11yDialog;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(typeof global !== 'undefined' ? global : window));\n\n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n;\n( function( $, window, document, undefined ) {\n\n    'use strict';\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variables rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = 'SUIAccordion',\n        defaults = {};\n\n    // The actual plugin constructor\n    function SUIAccordion( element, options ) {\n        this.element = element;\n        this.$element = $( this.element );\n\n\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options );\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    // Avoid Plugin.prototype conflicts\n    $.extend( SUIAccordion.prototype, {\n        init: function() {\n\n            // namespaced event\n            this.$element.on( 'click.sui.accordion', '.sui-accordion-item', function( event ) {\n\n                var getParentItem = $( this ).closest( '.sui-accordion-item' ),\n                    getNextAdditionalContentRow = getParentItem.nextUntil( '.sui-accordion-item' ).filter( '.sui-accordion-item-content' );\n\n                getNextAdditionalContentRow.toggleClass( 'sui-accordion-item--open' );\n\n                if ( getNextAdditionalContentRow.hasClass( 'sui-accordion-item--open' ) ) {\n                    getParentItem.addClass( 'sui-accordion-item--open' );\n                } else {\n                    getParentItem.removeClass( 'sui-accordion-item--open' );\n                }\n\n            });\n        }\n    });\n\n    // A really lightweight plugin wrapper around the constructor,\n    // preventing against multiple instantiations\n    $.fn[ pluginName ] = function( options ) {\n        return this.each( function() {\n\n            // instance of SUIAccordion can be called with $(element).data('SUIAccordion')\n            if ( ! $.data( this, pluginName ) ) {\n                $.data( this, pluginName, new SUIAccordion( this, options ) );\n            }\n        });\n    };\n\n}( jQuery, window, document ) );\n\n( function( $ ) {\n\n    // Enable strict mode.\n    'use strict';\n\n    // Define global SUI object if it doesn't exist.\n    if ( 'object' !== typeof window.SUI ) {\n        window.SUI = {};\n    }\n\n    SUI.suiAccordion = function( el ) {\n        var accordionTable = $( el );\n\n        function init() {\n            accordionTable.SUIAccordion({});\n        }\n\n        init();\n\n        return this;\n    };\n\n    // wait document ready first\n    $( document ).ready( function() {\n\n        // Convert all accordions.\n        $( '.sui-2-2-4 .sui-accordion' ).each( function() {\n\n            // backward compat of instantiate new accordion\n            SUI.suiAccordion( this );\n        });\n    });\n\n}( jQuery ) );\n\n/**\n * clipboard.js v1.7.1\n * https://zenorocha.github.io/clipboard.js\n *\n * Licensed MIT © Zeno Rocha\n */\n(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar DOCUMENT_NODE_TYPE = 9;\n\n/**\n * A polyfill for Element.matches()\n */\nif (typeof Element !== 'undefined' && !Element.prototype.matches) {\n\tvar proto = Element.prototype;\n\n\tproto.matches = proto.matchesSelector ||\n\t\t\t\t\tproto.mozMatchesSelector ||\n\t\t\t\t\tproto.msMatchesSelector ||\n\t\t\t\t\tproto.oMatchesSelector ||\n\t\t\t\t\tproto.webkitMatchesSelector;\n}\n\n/**\n * Finds the closest parent that matches a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @return {Function}\n */\nfunction closest(element, selector) {\n\twhile (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n\t\tif (typeof element.matches === 'function' &&\n\t\t\telement.matches(selector)) {\n\t\t\treturn element;\n\t\t}\n\t\telement = element.parentNode;\n\t}\n}\n\nmodule.exports = closest;\n\n},{}],2:[function(require,module,exports){\nvar closest = require('./closest');\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction delegate(element, selector, type, callback, useCapture) {\n\tvar listenerFn = listener.apply(this, arguments);\n\n\telement.addEventListener(type, listenerFn, useCapture);\n\n\treturn {\n\t\tdestroy: function() {\n\t\t\telement.removeEventListener(type, listenerFn, useCapture);\n\t\t}\n\t}\n}\n\n/**\n * Finds closest match and invokes callback.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Function}\n */\nfunction listener(element, selector, type, callback) {\n\treturn function(e) {\n\t\te.delegateTarget = closest(e.target, selector);\n\n\t\tif (e.delegateTarget) {\n\t\t\tcallback.call(element, e);\n\t\t}\n\t}\n}\n\nmodule.exports = delegate;\n\n},{\"./closest\":1}],3:[function(require,module,exports){\n/**\n * Check if argument is a HTML element.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.node = function(value) {\n\treturn value !== undefined\n\t\t&& value instanceof HTMLElement\n\t\t&& value.nodeType === 1;\n};\n\n/**\n * Check if argument is a list of HTML elements.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.nodeList = function(value) {\n\tvar type = Object.prototype.toString.call(value);\n\n\treturn value !== undefined\n\t\t&& (type === '[object NodeList]' || type === '[object HTMLCollection]')\n\t\t&& ('length' in value)\n\t\t&& (value.length === 0 || exports.node(value[0]));\n};\n\n/**\n * Check if argument is a string.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.string = function(value) {\n\treturn typeof value === 'string'\n\t\t|| value instanceof String;\n};\n\n/**\n * Check if argument is a function.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.fn = function(value) {\n\tvar type = Object.prototype.toString.call(value);\n\n\treturn type === '[object Function]';\n};\n\n},{}],4:[function(require,module,exports){\nvar is = require('./is');\nvar delegate = require('delegate');\n\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listen(target, type, callback) {\n\tif (!target && !type && !callback) {\n\t\tthrow new Error('Missing required arguments');\n\t}\n\n\tif (!is.string(type)) {\n\t\tthrow new TypeError('Second argument must be a String');\n\t}\n\n\tif (!is.fn(callback)) {\n\t\tthrow new TypeError('Third argument must be a Function');\n\t}\n\n\tif (is.node(target)) {\n\t\treturn listenNode(target, type, callback);\n\t}\n\telse if (is.nodeList(target)) {\n\t\treturn listenNodeList(target, type, callback);\n\t}\n\telse if (is.string(target)) {\n\t\treturn listenSelector(target, type, callback);\n\t}\n\telse {\n\t\tthrow new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n\t}\n}\n\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNode(node, type, callback) {\n\tnode.addEventListener(type, callback);\n\n\treturn {\n\t\tdestroy: function() {\n\t\t\tnode.removeEventListener(type, callback);\n\t\t}\n\t}\n}\n\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNodeList(nodeList, type, callback) {\n\tArray.prototype.forEach.call(nodeList, function(node) {\n\t\tnode.addEventListener(type, callback);\n\t});\n\n\treturn {\n\t\tdestroy: function() {\n\t\t\tArray.prototype.forEach.call(nodeList, function(node) {\n\t\t\t\tnode.removeEventListener(type, callback);\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenSelector(selector, type, callback) {\n\treturn delegate(document.body, selector, type, callback);\n}\n\nmodule.exports = listen;\n\n},{\"./is\":3,\"delegate\":2}],5:[function(require,module,exports){\nfunction select(element) {\n\tvar selectedText;\n\n\tif (element.nodeName === 'SELECT') {\n\t\telement.focus();\n\n\t\tselectedText = element.value;\n\t}\n\telse if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n\t\tvar isReadOnly = element.hasAttribute('readonly');\n\n\t\tif (!isReadOnly) {\n\t\t\telement.setAttribute('readonly', '');\n\t\t}\n\n\t\telement.select();\n\t\telement.setSelectionRange(0, element.value.length);\n\n\t\tif (!isReadOnly) {\n\t\t\telement.removeAttribute('readonly');\n\t\t}\n\n\t\tselectedText = element.value;\n\t}\n\telse {\n\t\tif (element.hasAttribute('contenteditable')) {\n\t\t\telement.focus();\n\t\t}\n\n\t\tvar selection = window.getSelection();\n\t\tvar range = document.createRange();\n\n\t\trange.selectNodeContents(element);\n\t\tselection.removeAllRanges();\n\t\tselection.addRange(range);\n\n\t\tselectedText = selection.toString();\n\t}\n\n\treturn selectedText;\n}\n\nmodule.exports = select;\n\n},{}],6:[function(require,module,exports){\nfunction E () {\n\t// Keep this empty so it's easier to inherit from\n\t// (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n\ton: function (name, callback, ctx) {\n\tvar e = this.e || (this.e = {});\n\n\t(e[name] || (e[name] = [])).push({\n\t\tfn: callback,\n\t\tctx: ctx\n\t});\n\n\treturn this;\n\t},\n\n\tonce: function (name, callback, ctx) {\n\tvar self = this;\n\tfunction listener () {\n\t\tself.off(name, listener);\n\t\tcallback.apply(ctx, arguments);\n\t};\n\n\tlistener._ = callback\n\treturn this.on(name, listener, ctx);\n\t},\n\n\temit: function (name) {\n\tvar data = [].slice.call(arguments, 1);\n\tvar evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n\tvar i = 0;\n\tvar len = evtArr.length;\n\n\tfor (i; i < len; i++) {\n\t\tevtArr[i].fn.apply(evtArr[i].ctx, data);\n\t}\n\n\treturn this;\n\t},\n\n\toff: function (name, callback) {\n\tvar e = this.e || (this.e = {});\n\tvar evts = e[name];\n\tvar liveEvents = [];\n\n\tif (evts && callback) {\n\t\tfor (var i = 0, len = evts.length; i < len; i++) {\n\t\tif (evts[i].fn !== callback && evts[i].fn._ !== callback)\n\t\t\tliveEvents.push(evts[i]);\n\t\t}\n\t}\n\n\t// Remove event from queue to prevent memory leak\n\t// Suggested by https://github.com/lazd\n\t// Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\t(liveEvents.length)\n\t\t? e[name] = liveEvents\n\t\t: delete e[name];\n\n\treturn this;\n\t}\n};\n\nmodule.exports = E;\n\n},{}],7:[function(require,module,exports){\n(function (global, factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(['module', 'select'], factory);\n\t} else if (typeof exports !== \"undefined\") {\n\t\tfactory(module, require('select'));\n\t} else {\n\t\tvar mod = {\n\t\t\texports: {}\n\t\t};\n\t\tfactory(mod, global.select);\n\t\tglobal.clipboardAction = mod.exports;\n\t}\n})(this, function (module, _select) {\n\t'use strict';\n\n\tvar _select2 = _interopRequireDefault(_select);\n\n\tfunction _interopRequireDefault(obj) {\n\t\treturn obj && obj.__esModule ? obj : {\n\t\t\tdefault: obj\n\t\t};\n\t}\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n\t\treturn typeof obj;\n\t} : function (obj) {\n\t\treturn obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n\t};\n\n\tfunction _classCallCheck(instance, Constructor) {\n\t\tif (!(instance instanceof Constructor)) {\n\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t}\n\t}\n\n\tvar _createClass = function () {\n\t\tfunction defineProperties(target, props) {\n\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\tvar descriptor = props[i];\n\t\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\t\tdescriptor.configurable = true;\n\t\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn function (Constructor, protoProps, staticProps) {\n\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t\t\tif (staticProps) defineProperties(Constructor, staticProps);\n\t\t\treturn Constructor;\n\t\t};\n\t}();\n\n\tvar ClipboardJSAction = function () {\n\t\t/**\n\t\t * @param {Object} options\n\t\t */\n\t\tfunction ClipboardJSAction(options) {\n\t\t\t_classCallCheck(this, ClipboardJSAction);\n\n\t\t\tthis.resolveOptions(options);\n\t\t\tthis.initSelection();\n\t\t}\n\n\t\t/**\n\t\t * Defines base properties passed from constructor.\n\t\t * @param {Object} options\n\t\t */\n\n\n\t\t_createClass(ClipboardJSAction, [{\n\t\t\tkey: 'resolveOptions',\n\t\t\tvalue: function resolveOptions() {\n\t\t\t\tvar options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t\t\t\tthis.action = options.action;\n\t\t\t\tthis.container = options.container;\n\t\t\t\tthis.emitter = options.emitter;\n\t\t\t\tthis.target = options.target;\n\t\t\t\tthis.text = options.text;\n\t\t\t\tthis.trigger = options.trigger;\n\n\t\t\t\tthis.selectedText = '';\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'initSelection',\n\t\t\tvalue: function initSelection() {\n\t\t\t\tif (this.text) {\n\t\t\t\t\tthis.selectFake();\n\t\t\t\t} else if (this.target) {\n\t\t\t\t\tthis.selectTarget();\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'selectFake',\n\t\t\tvalue: function selectFake() {\n\t\t\t\tvar _this = this;\n\n\t\t\t\tvar isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n\n\t\t\t\tthis.removeFake();\n\n\t\t\t\tthis.fakeHandlerCallback = function () {\n\t\t\t\t\treturn _this.removeFake();\n\t\t\t\t};\n\t\t\t\tthis.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n\n\t\t\t\tthis.fakeElem = document.createElement('textarea');\n\t\t\t\t// Prevent zooming on iOS\n\t\t\t\tthis.fakeElem.style.fontSize = '12pt';\n\t\t\t\t// Reset box model\n\t\t\t\tthis.fakeElem.style.border = '0';\n\t\t\t\tthis.fakeElem.style.padding = '0';\n\t\t\t\tthis.fakeElem.style.margin = '0';\n\t\t\t\t// Move element out of screen horizontally\n\t\t\t\tthis.fakeElem.style.position = 'absolute';\n\t\t\t\tthis.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\t\t\t\t// Move element to the same position vertically\n\t\t\t\tvar yPosition = window.pageYOffset || document.documentElement.scrollTop;\n\t\t\t\tthis.fakeElem.style.top = yPosition + 'px';\n\n\t\t\t\tthis.fakeElem.setAttribute('readonly', '');\n\t\t\t\tthis.fakeElem.value = this.text;\n\n\t\t\t\tthis.container.appendChild(this.fakeElem);\n\n\t\t\t\tthis.selectedText = (0, _select2.default)(this.fakeElem);\n\t\t\t\tthis.copyText();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'removeFake',\n\t\t\tvalue: function removeFake() {\n\t\t\t\tif (this.fakeHandler) {\n\t\t\t\t\tthis.container.removeEventListener('click', this.fakeHandlerCallback);\n\t\t\t\t\tthis.fakeHandler = null;\n\t\t\t\t\tthis.fakeHandlerCallback = null;\n\t\t\t\t}\n\n\t\t\t\tif (this.fakeElem) {\n\t\t\t\t\tthis.container.removeChild(this.fakeElem);\n\t\t\t\t\tthis.fakeElem = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'selectTarget',\n\t\t\tvalue: function selectTarget() {\n\t\t\t\tthis.selectedText = (0, _select2.default)(this.target);\n\t\t\t\tthis.copyText();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'copyText',\n\t\t\tvalue: function copyText() {\n\t\t\t\tvar succeeded = void 0;\n\n\t\t\t\ttry {\n\t\t\t\t\tsucceeded = document.execCommand(this.action);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tsucceeded = false;\n\t\t\t\t}\n\n\t\t\t\tthis.handleResult(succeeded);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'handleResult',\n\t\t\tvalue: function handleResult(succeeded) {\n\t\t\t\tthis.emitter.emit(succeeded ? 'success' : 'error', {\n\t\t\t\t\taction: this.action,\n\t\t\t\t\ttext: this.selectedText,\n\t\t\t\t\ttrigger: this.trigger,\n\t\t\t\t\tclearSelection: this.clearSelection.bind(this)\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'clearSelection',\n\t\t\tvalue: function clearSelection() {\n\t\t\t\tif (this.trigger) {\n\t\t\t\t\tthis.trigger.focus();\n\t\t\t\t}\n\n\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'destroy',\n\t\t\tvalue: function destroy() {\n\t\t\t\tthis.removeFake();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'action',\n\t\t\tset: function set() {\n\t\t\t\tvar action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';\n\n\t\t\t\tthis._action = action;\n\n\t\t\t\tif (this._action !== 'copy' && this._action !== 'cut') {\n\t\t\t\t\tthrow new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function get() {\n\t\t\t\treturn this._action;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'target',\n\t\t\tset: function set(target) {\n\t\t\t\tif (target !== undefined) {\n\t\t\t\t\tif (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {\n\t\t\t\t\t\tif (this.action === 'copy' && target.hasAttribute('disabled')) {\n\t\t\t\t\t\t\tthrow new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n\t\t\t\t\t\t\tthrow new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._target = target;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Invalid \"target\" value, use a valid Element');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function get() {\n\t\t\t\treturn this._target;\n\t\t\t}\n\t\t}]);\n\n\t\treturn ClipboardJSAction;\n\t}();\n\n\tmodule.exports = ClipboardJSAction;\n});\n\n},{\"select\":5}],8:[function(require,module,exports){\n(function (global, factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(['module', './clipboard-action', 'tiny-emitter', 'good-listener'], factory);\n\t} else if (typeof exports !== \"undefined\") {\n\t\tfactory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));\n\t} else {\n\t\tvar mod = {\n\t\t\texports: {}\n\t\t};\n\t\tfactory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);\n\t\tglobal.clipboard = mod.exports;\n\t}\n})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {\n\t'use strict';\n\n\tvar _clipboardAction2 = _interopRequireDefault(_clipboardAction);\n\n\tvar _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\n\tvar _goodListener2 = _interopRequireDefault(_goodListener);\n\n\tfunction _interopRequireDefault(obj) {\n\t\treturn obj && obj.__esModule ? obj : {\n\t\t\tdefault: obj\n\t\t};\n\t}\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n\t\treturn typeof obj;\n\t} : function (obj) {\n\t\treturn obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n\t};\n\n\tfunction _classCallCheck(instance, Constructor) {\n\t\tif (!(instance instanceof Constructor)) {\n\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t}\n\t}\n\n\tvar _createClass = function () {\n\t\tfunction defineProperties(target, props) {\n\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\tvar descriptor = props[i];\n\t\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\t\tdescriptor.configurable = true;\n\t\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn function (Constructor, protoProps, staticProps) {\n\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t\t\tif (staticProps) defineProperties(Constructor, staticProps);\n\t\t\treturn Constructor;\n\t\t};\n\t}();\n\n\tfunction _possibleConstructorReturn(self, call) {\n\t\tif (!self) {\n\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t}\n\n\t\treturn call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n\t}\n\n\tfunction _inherits(subClass, superClass) {\n\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n\t\t}\n\n\t\tsubClass.prototype = Object.create(superClass && superClass.prototype, {\n\t\t\tconstructor: {\n\t\t\t\tvalue: subClass,\n\t\t\t\tenumerable: false,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t}\n\t\t});\n\t\tif (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t}\n\n\tvar ClipboardJS = function (_Emitter) {\n\t\t_inherits(ClipboardJS, _Emitter);\n\n\t\t/**\n\t\t * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n\t\t * @param {Object} options\n\t\t */\n\t\tfunction ClipboardJS(trigger, options) {\n\t\t\t_classCallCheck(this, ClipboardJS);\n\n\t\t\tvar _this = _possibleConstructorReturn(this, (ClipboardJS.__proto__ || Object.getPrototypeOf(ClipboardJS)).call(this));\n\n\t\t\t_this.resolveOptions(options);\n\t\t\t_this.listenClick(trigger);\n\t\t\treturn _this;\n\t\t}\n\n\t\t/**\n\t\t * Defines if attributes would be resolved using internal setter functions\n\t\t * or custom functions that were passed in the constructor.\n\t\t * @param {Object} options\n\t\t */\n\n\n\t\t_createClass(ClipboardJS, [{\n\t\t\tkey: 'resolveOptions',\n\t\t\tvalue: function resolveOptions() {\n\t\t\t\tvar options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t\t\t\tthis.action = typeof options.action === 'function' ? options.action : this.defaultAction;\n\t\t\t\tthis.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\n\t\t\t\tthis.text = typeof options.text === 'function' ? options.text : this.defaultText;\n\t\t\t\tthis.container = _typeof(options.container) === 'object' ? options.container : document.body;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'listenClick',\n\t\t\tvalue: function listenClick(trigger) {\n\t\t\t\tvar _this2 = this;\n\n\t\t\t\tthis.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {\n\t\t\t\t\treturn _this2.onClick(e);\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'onClick',\n\t\t\tvalue: function onClick(e) {\n\t\t\t\tvar trigger = e.delegateTarget || e.currentTarget;\n\n\t\t\t\tif (this.clipboardAction) {\n\t\t\t\t\tthis.clipboardAction = null;\n\t\t\t\t}\n\n\t\t\t\tthis.clipboardAction = new _clipboardAction2.default({\n\t\t\t\t\taction: this.action(trigger),\n\t\t\t\t\ttarget: this.target(trigger),\n\t\t\t\t\ttext: this.text(trigger),\n\t\t\t\t\tcontainer: this.container,\n\t\t\t\t\ttrigger: trigger,\n\t\t\t\t\temitter: this\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'defaultAction',\n\t\t\tvalue: function defaultAction(trigger) {\n\t\t\t\treturn getAttributeValue('action', trigger);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'defaultTarget',\n\t\t\tvalue: function defaultTarget(trigger) {\n\t\t\t\tvar selector = getAttributeValue('target', trigger);\n\n\t\t\t\tif (selector) {\n\t\t\t\t\treturn document.querySelector(selector);\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'defaultText',\n\t\t\tvalue: function defaultText(trigger) {\n\t\t\t\treturn getAttributeValue('text', trigger);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'destroy',\n\t\t\tvalue: function destroy() {\n\t\t\t\tthis.listener.destroy();\n\n\t\t\t\tif (this.clipboardAction) {\n\t\t\t\t\tthis.clipboardAction.destroy();\n\t\t\t\t\tthis.clipboardAction = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'isSupported',\n\t\t\tvalue: function isSupported() {\n\t\t\t\tvar action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];\n\n\t\t\t\tvar actions = typeof action === 'string' ? [action] : action;\n\t\t\t\tvar support = !!document.queryCommandSupported;\n\n\t\t\t\tactions.forEach(function (action) {\n\t\t\t\t\tsupport = support && !!document.queryCommandSupported(action);\n\t\t\t\t});\n\n\t\t\t\treturn support;\n\t\t\t}\n\t\t}]);\n\n\t\treturn ClipboardJS;\n\t}(_tinyEmitter2.default);\n\n\t/**\n\t * Helper function to retrieve attribute value.\n\t * @param {String} suffix\n\t * @param {Element} element\n\t */\n\tfunction getAttributeValue(suffix, element) {\n\t\tvar attribute = 'data-clipboard-' + suffix;\n\n\t\tif (!element.hasAttribute(attribute)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn element.getAttribute(attribute);\n\t}\n\n\tmodule.exports = ClipboardJS;\n});\n\n},{\"./clipboard-action\":7,\"good-listener\":4,\"tiny-emitter\":6}]},{},[8])(8)\n});\n\n( function( $ ) {\n\n\t$( '.sui-2-2-4 .sui-code-snippet:not(.sui-no-copy)' ).each( function( i ) {\n\t\tvar id = 'sui-code-snippet-' + i,\n\t\t\tbutton = '<button class=\"sui-button\" data-clipboard-target=\"#' + id + '\">Copy</button>';\n\n\t\t$( this ).wrap( '<div class=\"sui-code-snippet-wrapper\"></div>' );\n\t\t$( this ).attr( 'id', id ).after( button );\n\t});\n\n\t$( document ).ready( function() {\n\t\tvar btns = $( '[data-clipboard-target]' );\n\t\tvar clipboard = new ClipboardJS( '[data-clipboard-target]' );\n\n\t\tif ( btns.length ) {\n\n\t\t\tclipboard.on( 'success', function( e ) {\n\t\t\t\te.clearSelection();\n\t\t\t\tshowTooltip( e.trigger, 'Copied!' );\n\t\t\t});\n\n\t\t\tbtns.mouseleave( function() {\n\t\t\t\t$( this ).removeClass( 'sui-tooltip' );\n\t\t\t\t$( this ).removeAttr( 'aria-label' );\n\t\t\t\t$( this ).removeAttr( 'data-tooltip' );\n\t\t\t});\n\n\t\t\tfunction showTooltip( e, msg ) {\n\t\t\t\t$( e ).addClass( 'sui-tooltip' );\n\t\t\t\t$( e ).attr( 'aria-label', msg );\n\t\t\t\t$( e ).attr( 'data-tooltip', msg );\n\t\t\t}\n\n\t\t}\n\n\t});\n\n}( jQuery ) );\n\n( function( $ ) {\n\n\t// Enable strict mode.\n\t'use strict';\n\n\t// Define global SUI object if it doesn't exist.\n\tif ( 'object' !== typeof window.SUI ) {\n\t\twindow.SUI = {};\n\t}\n\n\tSUI.linkDropdown = function() {\n\n\t\tfunction closeAllDropdowns( $except ) {\n\t\t\tvar $dropdowns = $( '.sui-2-2-4 .sui-dropdown' );\n\n\t\t\tif ( $except ) {\n\t\t\t\t$dropdowns = $dropdowns.not( $except );\n\t\t\t}\n\n\t\t\t$dropdowns.removeClass( 'open' );\n\t\t}\n\n\t\t$( 'body' ).click( function( e ) {\n\t\t\tvar $this = $( e.target ),\n\t\t\t\t$el = $this.closest( '.sui-dropdown' );\n\n\t\t\tif ( 0 == $el.length ) {\n\t\t\t\tcloseAllDropdowns();\n\t\t\t} else if ( $this.is( 'a' ) ) {\n\t\t\t\te.preventDefault();\n\n\t\t\t\tcloseAllDropdowns( $el );\n\n\t\t\t\t$el.toggleClass( 'open' );\n\t\t\t}\n\n\t\t});\n\n\t};\n\n\tSUI.linkDropdown();\n\n}( jQuery ) );\n\n( function( $ ) {\n\n\t// Enable strict mode.\n\t'use strict';\n\n\t// Define global SUI object if it doesn't exist.\n\tif ( 'object' !== typeof window.SUI ) {\n\t\twindow.SUI = {};\n\t}\n\n\tdocument.addEventListener( 'DOMContentLoaded', function() {\n\t\tvar mainEl = $( '.sui-wrap' );\n\t\tSUI.dialogs = {};\n\n\t\t// Init the dialog elements.\n\t\t$( '.sui-dialog' ).each( function() {\n\t\t\tSUI.dialogs[this.id] = new A11yDialog( this, mainEl );\n\t\t});\n\n\t});\n\n}( jQuery ) );\n\n( function( $ ) {\n\n\t// This will auto hide the top notice if the classes .sui-can-dismiss or .sui-cant-dismiss aren't present.\n\t$( '.sui-2-2-4 .sui-notice-top:not(.sui-can-dismiss, .sui-cant-dismiss)' ).delay( 3000 ).slideUp( 'slow' );\n\n\t$( '.sui-2-2-4 .sui-notice-dismiss' ).click( function( e ) {\n\t\te.preventDefault();\n\n        $( this ).parent().stop().slideUp( 'slow' );\n\n\t\treturn false;\n\t});\n\n}( jQuery ) );\n\n( function( $ ) {\n\n\t// Enable strict mode.\n\t'use strict';\n\n\t// Define global SUI object if it doesn't exist.\n\tif ( 'object' !== typeof window.SUI ) {\n\t\twindow.SUI = {};\n\t}\n\n\tSUI.showHidePassword = function() {\n\n\t\t$( '.sui-2-2-4 .sui-password-group' ).each( function() {\n\t\t\tvar $this = $( this ),\n\t\t\t\t$input = $this.find( 'input[type=\"password\"]' ),\n\t\t\t\t$button = $this.find( '.sui-password-toggle' );\n\n\t\t\t$button.on( 'click', function() {\n\t\t\t\tvar $inputType = '',\n\t\t\t\t\t$repInput = '';\n\n\t\t\t\t$( this ).toggleClass( 'is-visible' );\n\n\t\t\t\tif ( $input.hasClass( 'is-visible' ) ) {\n\t\t\t\t\t$input.removeClass( 'is-visible' ).addClass( 'is-hidden' );\n\t\t\t\t\t$inputType = 'password';\n\t\t\t\t\t$button.find( '> .sui-screen-reader-text' ).text( 'Show Password' );\n\t\t\t\t\t$button.find( '> i' ).removeClass( 'sui-ico-eye-hide' ).addClass( 'sui-ico-eye' );\n\t\t\t\t} else {\n\t\t\t\t\t$input.removeClass( 'is-hidden' ).addClass( 'is-visible' );\n\t\t\t\t\t$inputType = 'text';\n\t\t\t\t\t$button.find( '> .sui-screen-reader-text' ).text( 'Hide Password' );\n\t\t\t\t\t$button.find( '> i' ).removeClass( 'sui-ico-eye' ).addClass( 'sui-ico-eye-hide' );\n\t\t\t\t}\n\n\t\t\t\t$repInput = $( '<input type=' + $inputType + ' />' )\n\t\t\t\t\t.attr( 'id', $input.attr( 'id' ) )\n\t\t\t\t\t.attr( 'name', $input.attr( 'name' ) )\n\t\t\t\t\t.attr( 'class', $input.attr( 'class' ) )\n\t\t\t\t\t.val( $input.val() )\n\t\t\t\t\t.insertBefore( $input );\n\n\t\t\t\t$input.remove();\n\t\t\t\t$input = $repInput;\n\t\t\t\t$input.focus();\n\n\t\t\t});\n\n\t\t});\n\n\t};\n\n\tSUI.showHidePassword();\n\n}( jQuery ) );\n\n( function( $ ) {\n\n    // Enable strict mode.\n    'use strict';\n\n    // Define global SUI object if it doesn't exist.\n    if ( 'object' !== typeof window.SUI ) {\n        window.SUI = {};\n    }\n\n    SUI.loadCircleScore = function( el ) {\n\t\tvar dial          = $( el ).find( 'svg circle:last-child' ),\n\t\t\tscore         = $( el ).data( 'score' ),\n\t\t\tradius        = 42,\n\t\t\tcircumference = 2 * Math.PI * radius,\n\t\t\tdashLength    = ( circumference / 100 ) * score,\n\t\t\tgapLength     = dashLength * 100 - score,\n\t\t\tsvg           =\n\t\t\t\t'<svg viewbox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n\t\t\t\t\t'<circle stroke-width=\"16\" cx=\"50\" cy=\"50\" r=\"42\" />\\n' +\n\t\t\t\t\t'<circle stroke-width=\"16\" cx=\"50\" cy=\"50\" r=\"42\" stroke-dasharray=\"0,' + gapLength + '\" />\\n' +\n\t\t\t\t'</svg>\\n' +\n\t\t\t\t'<span class=\"sui-circle-score-label\">' + score + '</span>\\n';\n\n\t\t// Add svg to score element, add loaded class, & change stroke-dasharray to represent target score/percentage.\n\t\t$( el ).prepend( svg ).addClass( 'loaded' ).find( 'circle:last-child' ).css( 'animation', 'sui' + score + ' 3s forwards' );\n\t};\n\n\t$( '.sui-2-2-4 .sui-circle-score' ).each( function() {\n\t\tSUI.loadCircleScore( this );\n\t});\n\n}( jQuery ) );\n\n( function( $ ) {\n\n    // Enable strict mode.\n    'use strict';\n\n    // Define global SUI object if it doesn't exist.\n    if ( 'object' !== typeof window.SUI ) {\n        window.SUI = {};\n    }\n\n    SUI.suiSelect = function( el ) {\n\t\tvar jq = $( el ),\n\t\t\twrap, handle, list, value, items;\n\n\t\tif ( ! jq.is( 'select' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( jq.closest( '.select-container' ).length || jq.data( 'select2' ) || jq.is( '.sui-select' )  || jq.is( '.none-sui' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add the DOM elements to style the select list.\n\t\tfunction setupElement() {\n\t\t\tjq.wrap( '<div class=\"select-container\">' );\n\t\t\tjq.hide();\n\n\t\t\twrap = jq.parent();\n\t\t\thandle = $( '<span class=\"dropdown-handle\"><i class=\"sui-icon-chevron-down\" aria-hidden=\"true\"></i></span>' ).prependTo( wrap );\n\t\t\tlist = $( '<div class=\"select-list-container\"></div>' ).appendTo( wrap );\n\t\t\tvalue = $( '<div class=\"list-value\">&nbsp;</div>' ).appendTo( list );\n\t\t\titems = $( '<ul class=\"list-results\"></ul>' ).appendTo( list );\n\n\t\t\twrap.addClass( jq.attr( 'class' ) );\n\t\t}\n\n\t\t// When changing selection using JS, you need to trigger a 'sui:change' event\n\t\t// eg: $('select').val('4').trigger('sui:change')\n\t\tfunction handleSelectionChange() {\n\t\t\tjq.on( 'sui:change', function() {\n\n\t\t\t\t// We need to re-populateList to handle dynamic select options added via JS/ajax.\n\t\t\t\tpopulateList();\n\t\t\t\titems.find( 'li' ).not( '.optgroup-label' ).on( 'click', function onItemClick( ev ) {\n\t\t\t\t\tvar opt = $( ev.target );\n\t\t\t\t\tselectItem( opt, false );\n\t\t\t\t\thandleValue();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Add all the options to the new DOM elements.\n\t\tfunction populateList() {\n            var children = jq.children();\n\t\t\titems.empty();\n            children.each( function() {\n                var opt = $( this ),\n                    item,\n\t\t\t\t\toptgroup = $( this ),\n                    optGroupItem,\n                    $label;\n                if ( 'OPTION' == $( this ).prop ( 'tagName' ) ) {\n                    item = $( '<li></li>' ).appendTo( items );\n                    item.text( opt.text() );\n                    item.data( 'value', opt.val() );\n\n                    if ( opt.val() == jq.val() ) {\n                        selectItem( item, true );\n                    }\n                } else {\n                    optGroupItem = $( '<ul></ul>' ).appendTo( items );\n                    $label = $( '<li class=\"optgroup-label\"></li>' ).text( optgroup.prop( 'label' ) );\n\n                    optGroupItem.html( $label );\n                    optGroupItem.addClass( 'optgroup' );\n\n                    optgroup.find( 'option' ).each( function onPopulateLoop() {\n                        var opt = $( this ),\n                            item;\n                        item = $( '<li></li>' ).appendTo( optGroupItem );\n                        item.text( opt.text() );\n                        item.data( 'value', opt.val() );\n\n                        if ( opt.val() == jq.val() ) {\n                            selectItem( item );\n                        }\n                    });\n                }\n\n            });\n\t\t}\n\n\t\t// Checks the option value for a link.\n\t\tfunction handleValue() {\n\t\t\tvar val = jq[0].value;\n\n\t\t\t// If option is link, navigate to it.\n\t\t\tif ( val.match( '^https?:\\/\\/|#' ) ) {\n\t\t\t\twindow.location.href = val;\n\t\t\t}\n\t\t}\n\n\t\t// Toggle the dropdown state between open/closed.\n\t\tfunction stateToggle() {\n\t\t\tif ( wrap.find( 'select' ).is( ':disabled' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( ! wrap.hasClass( 'active' ) ) {\n\t\t\t\tstateOpen();\n\t\t\t} else {\n\t\t\t\tstateClose();\n\t\t\t}\n\t\t}\n\n\t\t// Close the dropdown list.\n\t\tfunction stateClose( item ) {\n\t\t\tif ( ! item ) {\n\t\t\t\titem = wrap;\n\t\t\t}\n\n\t\t\titem.removeClass( 'active' );\n\t\t\titem.closest( 'tr' ).removeClass( 'select-open' );\n\t\t}\n\n\t\t// Open the dropdown list.\n\t\tfunction stateOpen() {\n\t\t\t$( '.select-container.active' ).each( function() {\n\t\t\t\tstateClose( $( this ) );\n\t\t\t});\n\n\t\t\twrap.addClass( 'active' );\n\t\t\twrap.closest( 'tr' ).addClass( 'select-open' );\n\t\t}\n\n\t\t// Visually mark the specified option as \"selected\".\n\t\tfunction selectItem( opt, isInit ) {\n\t\t\tisInit = 'undefined' === typeof isInit ? false : isInit;\n\t\t\tvalue.text( opt.text() );\n\t\t\t$( '.current', items ).removeClass( 'current' );\n\t\t\topt.addClass( 'current' );\n\t\t\tstateClose();\n\n\t\t\t// Also update the select list value.\n\t\t\tjq.val( opt.data( 'value' ) );\n\n\t\t\tif ( ! isInit ) {\n\t\t\t\tjq.trigger( 'change' );\n\t\t\t}\n\n\t\t}\n\n\t\t// Element constructor.\n\t\tfunction init() {\n\t\t\tvar selectID;\n\n\t\t\tsetupElement();\n\t\t\tpopulateList();\n\t\t\thandleSelectionChange();\n\n\t\t\titems.find( 'li' ).not( '.optgroup-label' ).on( 'click', function onItemClick( ev ) {\n\t\t\t\tvar opt = $( ev.target );\n\t\t\t\tselectItem( opt, false );\n\t\t\t\thandleValue();\n\t\t\t});\n\n\t\t\thandle.on( 'click', stateToggle );\n\t\t\tvalue.on( 'click', stateToggle );\n\t\t\tjq.on( 'focus', stateOpen );\n\n\t\t\t$( document ).click( function onOutsideClick( ev ) {\n\t\t\t\tvar jq = $( ev.target ),\n\t\t\t\t\tselectID;\n\n\t\t\t\tif ( jq.closest( '.select-container' ).length ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( jq.is( 'label' ) && jq.attr( 'for' ) ) {\n\t\t\t\t\tselectID = jq.attr( 'for' );\n\n\t\t\t\t\tif ( $( 'select#' + selectID ).length ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstateClose();\n\t\t\t});\n\n\t\t\tselectID = jq.attr( 'id' );\n\n\t\t\tif ( selectID ) {\n\t\t\t\t$( 'label[for=' + selectID + ']' ).on( 'click', stateOpen );\n\t\t\t}\n\n\t\t\tjq.addClass( 'sui-styled' );\n\t\t}\n\n\t\tinit();\n\n\t\treturn this;\n\t};\n\n\t// Convert all select lists to fancy sui Select lists.\n\t$( '.sui-2-2-4 select' ).each( function() {\n\t\tSUI.suiSelect( this );\n\t});\n\n}( jQuery ) );\n\n/*!\n * Select2 4.0.5\n * https://select2.github.io\n *\n * Released under the MIT license\n * https://github.com/select2/select2/blob/master/LICENSE.md\n *\n * Modified logic/function,etc besides formatting should be marked with //SUI-SELECT2\n * For easy debugging process or update upstream of select\n */\n(function (factory) {\n    // SUI-SELECT2 disable AMD and module exports\n    if (false) {} else if (false) {} else {\n        // Browser globals\n        factory(jQuery);\n    }\n} (function (jQuery) {\n    // This is needed so we can catch the AMD loader configuration and use it\n    // The inner file should be wrapped (by `banner.start.js`) in a function that\n    // returns the AMD loader references.\n    var S2 =(function () {\n        // Restore the Select2 AMD loader so it can be used\n        // Needed mostly in the language files, where the loader is not inserted\n        if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {\n            var S2 = jQuery.fn.select2.amd;\n        }\n        var S2;(function () { if (!S2 || !S2.requirejs) {\n            if (!S2) { S2 = {}; } else { require = S2; }\n            /**\n             * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n             * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n             */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n            /*global setTimeout: false */\n\n            var requirejs, require, define;\n            (function (undef) {\n                var main, req, makeMap, handlers,\n                    defined = {},\n                    waiting = {},\n                    config = {},\n                    defining = {},\n                    hasOwn = Object.prototype.hasOwnProperty,\n                    aps = [].slice,\n                    jsSuffixRegExp = /\\.js$/;\n\n                function hasProp(obj, prop) {\n                    return hasOwn.call(obj, prop);\n                }\n\n                /**\n                 * Given a relative module name, like ./something, normalize it to\n                 * a real name that can be mapped to a path.\n                 * @param {String} name the relative name\n                 * @param {String} baseName a real name that the name arg is relative\n                 * to.\n                 * @returns {String} normalized name\n                 */\n                function normalize(name, baseName) {\n                    var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n                        foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n                        baseParts = baseName && baseName.split(\"/\"),\n                        map = config.map,\n                        starMap = (map && map['*']) || {};\n\n                    //Adjust any relative paths.\n                    if (name) {\n                        name = name.split('/');\n                        lastIndex = name.length - 1;\n\n                        // If wanting node ID compatibility, strip .js from end\n                        // of IDs. Have to do this here, and not in nameToUrl\n                        // because node allows either .js or non .js to map\n                        // to same file.\n                        if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                            name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                        }\n\n                        // Starts with a '.' so need the baseName\n                        if (name[0].charAt(0) === '.' && baseParts) {\n                            //Convert baseName to array, and lop off the last part,\n                            //so that . matches that 'directory' and not name of the baseName's\n                            //module. For instance, baseName of 'one/two/three', maps to\n                            //'one/two/three.js', but we want the directory, 'one/two' for\n                            //this normalization.\n                            normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                            name = normalizedBaseParts.concat(name);\n                        }\n\n                        //start trimDots\n                        for (i = 0; i < name.length; i++) {\n                            part = name[i];\n                            if (part === '.') {\n                                name.splice(i, 1);\n                                i -= 1;\n                            } else if (part === '..') {\n                                // If at the start, or previous value is still ..,\n                                // keep them so that when converted to a path it may\n                                // still work when converted to a path, even though\n                                // as an ID it is less than ideal. In larger point\n                                // releases, may be better to just kick out an error.\n                                if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                                    continue;\n                                } else if (i > 0) {\n                                    name.splice(i - 1, 2);\n                                    i -= 2;\n                                }\n                            }\n                        }\n                        //end trimDots\n\n                        name = name.join('/');\n                    }\n\n                    //Apply map config if available.\n                    if ((baseParts || starMap) && map) {\n                        nameParts = name.split('/');\n\n                        for (i = nameParts.length; i > 0; i -= 1) {\n                            nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                            if (baseParts) {\n                                //Find the longest baseName segment match in the config.\n                                //So, do joins on the biggest to smallest lengths of baseParts.\n                                for (j = baseParts.length; j > 0; j -= 1) {\n                                    mapValue = map[baseParts.slice(0, j).join('/')];\n\n                                    //baseName segment has  config, find if it has one for\n                                    //this name.\n                                    if (mapValue) {\n                                        mapValue = mapValue[nameSegment];\n                                        if (mapValue) {\n                                            //Match, update name to the new value.\n                                            foundMap = mapValue;\n                                            foundI = i;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n\n                            if (foundMap) {\n                                break;\n                            }\n\n                            //Check for a star map match, but just hold on to it,\n                            //if there is a shorter segment match later in a matching\n                            //config, then favor over this star map.\n                            if (!foundStarMap && starMap && starMap[nameSegment]) {\n                                foundStarMap = starMap[nameSegment];\n                                starI = i;\n                            }\n                        }\n\n                        if (!foundMap && foundStarMap) {\n                            foundMap = foundStarMap;\n                            foundI = starI;\n                        }\n\n                        if (foundMap) {\n                            nameParts.splice(0, foundI, foundMap);\n                            name = nameParts.join('/');\n                        }\n                    }\n\n                    return name;\n                }\n\n                function makeRequire(relName, forceSync) {\n                    return function () {\n                        //A version of a require function that passes a moduleName\n                        //value for items that may need to\n                        //look up paths relative to the moduleName\n                        var args = aps.call(arguments, 0);\n\n                        //If first arg is not require('string'), and there is only\n                        //one arg, it is the array form without a callback. Insert\n                        //a null so that the following concat is correct.\n                        if (typeof args[0] !== 'string' && args.length === 1) {\n                            args.push(null);\n                        }\n                        return req.apply(undef, args.concat([relName, forceSync]));\n                    };\n                }\n\n                function makeNormalize(relName) {\n                    return function (name) {\n                        return normalize(name, relName);\n                    };\n                }\n\n                function makeLoad(depName) {\n                    return function (value) {\n                        defined[depName] = value;\n                    };\n                }\n\n                function callDep(name) {\n                    if (hasProp(waiting, name)) {\n                        var args = waiting[name];\n                        delete waiting[name];\n                        defining[name] = true;\n                        main.apply(undef, args);\n                    }\n\n                    if (!hasProp(defined, name) && !hasProp(defining, name)) {\n                        throw new Error('No ' + name);\n                    }\n                    return defined[name];\n                }\n\n                //Turns a plugin!resource to [plugin, resource]\n                //with the plugin being undefined if the name\n                //did not have a plugin prefix.\n                function splitPrefix(name) {\n                    var prefix,\n                        index = name ? name.indexOf('!') : -1;\n                    if (index > -1) {\n                        prefix = name.substring(0, index);\n                        name = name.substring(index + 1, name.length);\n                    }\n                    return [prefix, name];\n                }\n\n                //Creates a parts array for a relName where first part is plugin ID,\n                //second part is resource ID. Assumes relName has already been normalized.\n                function makeRelParts(relName) {\n                    return relName ? splitPrefix(relName) : [];\n                }\n\n                /**\n                 * Makes a name map, normalizing the name, and using a plugin\n                 * for normalization if necessary. Grabs a ref to plugin\n                 * too, as an optimization.\n                 */\n                makeMap = function (name, relParts) {\n                    var plugin,\n                        parts = splitPrefix(name),\n                        prefix = parts[0],\n                        relResourceName = relParts[1];\n\n                    name = parts[1];\n\n                    if (prefix) {\n                        prefix = normalize(prefix, relResourceName);\n                        plugin = callDep(prefix);\n                    }\n\n                    //Normalize according\n                    if (prefix) {\n                        if (plugin && plugin.normalize) {\n                            name = plugin.normalize(name, makeNormalize(relResourceName));\n                        } else {\n                            name = normalize(name, relResourceName);\n                        }\n                    } else {\n                        name = normalize(name, relResourceName);\n                        parts = splitPrefix(name);\n                        prefix = parts[0];\n                        name = parts[1];\n                        if (prefix) {\n                            plugin = callDep(prefix);\n                        }\n                    }\n\n                    //Using ridiculous property names for space reasons\n                    return {\n                        f: prefix ? prefix + '!' + name : name, //fullName\n                        n: name,\n                        pr: prefix,\n                        p: plugin\n                    };\n                };\n\n                function makeConfig(name) {\n                    return function () {\n                        return (config && config.config && config.config[name]) || {};\n                    };\n                }\n\n                handlers = {\n                    require: function (name) {\n                        return makeRequire(name);\n                    },\n                    exports: function (name) {\n                        var e = defined[name];\n                        if (typeof e !== 'undefined') {\n                            return e;\n                        } else {\n                            return (defined[name] = {});\n                        }\n                    },\n                    module: function (name) {\n                        return {\n                            id: name,\n                            uri: '',\n                            exports: defined[name],\n                            config: makeConfig(name)\n                        };\n                    }\n                };\n\n                main = function (name, deps, callback, relName) {\n                    var cjsModule, depName, ret, map, i, relParts,\n                        args = [],\n                        callbackType = typeof callback,\n                        usingExports;\n\n                    //Use name if no relName\n                    relName = relName || name;\n                    relParts = makeRelParts(relName);\n\n                    //Call the callback to define the module, if necessary.\n                    if (callbackType === 'undefined' || callbackType === 'function') {\n                        //Pull out the defined dependencies and pass the ordered\n                        //values to the callback.\n                        //Default to [require, exports, module] if no deps\n                        deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n                        for (i = 0; i < deps.length; i += 1) {\n                            map = makeMap(deps[i], relParts);\n                            depName = map.f;\n\n                            //Fast path CommonJS standard dependencies.\n                            if (depName === \"require\") {\n                                args[i] = handlers.require(name);\n                            } else if (depName === \"exports\") {\n                                //CommonJS module spec 1.1\n                                args[i] = handlers.exports(name);\n                                usingExports = true;\n                            } else if (depName === \"module\") {\n                                //CommonJS module spec 1.1\n                                cjsModule = args[i] = handlers.module(name);\n                            } else if (hasProp(defined, depName) ||\n                                       hasProp(waiting, depName) ||\n                                       hasProp(defining, depName)) {\n                                args[i] = callDep(depName);\n                            } else if (map.p) {\n                                map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                                args[i] = defined[depName];\n                            } else {\n                                throw new Error(name + ' missing ' + depName);\n                            }\n                        }\n\n                        ret = callback ? callback.apply(defined[name], args) : undefined;\n\n                        if (name) {\n                            //If setting exports via \"module\" is in play,\n                            //favor that over return value and exports. After that,\n                            //favor a non-undefined return value over exports use.\n                            if (cjsModule && cjsModule.exports !== undef &&\n                                cjsModule.exports !== defined[name]) {\n                                defined[name] = cjsModule.exports;\n                            } else if (ret !== undef || !usingExports) {\n                                //Use the return value from the function.\n                                defined[name] = ret;\n                            }\n                        }\n                    } else if (name) {\n                        //May just be an object definition for the module. Only\n                        //worry about defining if have a module name.\n                        defined[name] = callback;\n                    }\n                };\n\n                requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n                    if (typeof deps === \"string\") {\n                        if (handlers[deps]) {\n                            //callback in this case is really relName\n                            return handlers[deps](callback);\n                        }\n                        //Just return the module wanted. In this scenario, the\n                        //deps arg is the module name, and second arg (if passed)\n                        //is just the relName.\n                        //Normalize module name, if it contains . or ..\n                        return callDep(makeMap(deps, makeRelParts(callback)).f);\n                    } else if (!deps.splice) {\n                        //deps is a config object, not an array.\n                        config = deps;\n                        if (config.deps) {\n                            req(config.deps, config.callback);\n                        }\n                        if (!callback) {\n                            return;\n                        }\n\n                        if (callback.splice) {\n                            //callback is an array, which means it is a dependency list.\n                            //Adjust args if there are dependencies\n                            deps = callback;\n                            callback = relName;\n                            relName = null;\n                        } else {\n                            deps = undef;\n                        }\n                    }\n\n                    //Support require(['a'])\n                    callback = callback || function () {};\n\n                    //If relName is a function, it is an errback handler,\n                    //so remove it.\n                    if (typeof relName === 'function') {\n                        relName = forceSync;\n                        forceSync = alt;\n                    }\n\n                    //Simulate async callback;\n                    if (forceSync) {\n                        main(undef, deps, callback, relName);\n                    } else {\n                        //Using a non-zero value because of concern for what old browsers\n                        //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n                        //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n                        //If want a value immediately, use require('id') instead -- something\n                        //that works in almond on the global level, but not guaranteed and\n                        //unlikely to work in other AMD implementations.\n                        setTimeout(function () {\n                            main(undef, deps, callback, relName);\n                        }, 4);\n                    }\n\n                    return req;\n                };\n\n                /**\n                 * Just drops the config on the floor, but returns req in case\n                 * the config return value is used.\n                 */\n                req.config = function (cfg) {\n                    return req(cfg);\n                };\n\n                /**\n                 * Expose module registry for debugging and tooling\n                 */\n                requirejs._defined = defined;\n\n                define = function (name, deps, callback) {\n                    if (typeof name !== 'string') {\n                        throw new Error('See almond README: incorrect module build, no module name');\n                    }\n\n                    //This module may not have dependencies\n                    if (!deps.splice) {\n                        //deps is not an array, so probably means\n                        //an object literal or factory function for\n                        //the value. Adjust args.\n                        callback = deps;\n                        deps = [];\n                    }\n\n                    if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n                        waiting[name] = [name, deps, callback];\n                    }\n                };\n\n                define.amd = {\n                    jQuery: true\n                };\n            }());\n\n            S2.requirejs = requirejs;S2.require = require;S2.define = define;\n        }\n        }());\n        S2.define(\"almond\", function(){});\n\n        /* global jQuery:false, $:false */\n        S2.define('jquery',[],function () {\n            var _$ = jQuery || $;\n\n            if (_$ == null && console && console.error) {\n                console.error(\n                    'Select2: An instance of jQuery or a jQuery-compatible library was not ' +\n                    'found. Make sure that you are including jQuery before Select2 on your ' +\n                    'web page.'\n                );\n            }\n\n            return _$;\n        });\n\n        S2.define('select2/utils',[\n            'jquery'\n        ], function ($) {\n            var Utils = {};\n\n            Utils.Extend = function (ChildClass, SuperClass) {\n                var __hasProp = {}.hasOwnProperty;\n\n                function BaseConstructor () {\n                    this.constructor = ChildClass;\n                }\n\n                for (var key in SuperClass) {\n                    if (__hasProp.call(SuperClass, key)) {\n                        ChildClass[key] = SuperClass[key];\n                    }\n                }\n\n                BaseConstructor.prototype = SuperClass.prototype;\n                ChildClass.prototype = new BaseConstructor();\n                ChildClass.__super__ = SuperClass.prototype;\n\n                return ChildClass;\n            };\n\n            function getMethods (theClass) {\n                var proto = theClass.prototype;\n\n                var methods = [];\n\n                for (var methodName in proto) {\n                    var m = proto[methodName];\n\n                    if (typeof m !== 'function') {\n                        continue;\n                    }\n\n                    if (methodName === 'constructor') {\n                        continue;\n                    }\n\n                    methods.push(methodName);\n                }\n\n                return methods;\n            }\n\n            Utils.Decorate = function (SuperClass, DecoratorClass) {\n                var decoratedMethods = getMethods(DecoratorClass);\n                var superMethods = getMethods(SuperClass);\n\n                function DecoratedClass () {\n                    var unshift = Array.prototype.unshift;\n\n                    var argCount = DecoratorClass.prototype.constructor.length;\n\n                    var calledConstructor = SuperClass.prototype.constructor;\n\n                    if (argCount > 0) {\n                        unshift.call(arguments, SuperClass.prototype.constructor);\n\n                        calledConstructor = DecoratorClass.prototype.constructor;\n                    }\n\n                    calledConstructor.apply(this, arguments);\n                }\n\n                DecoratorClass.displayName = SuperClass.displayName;\n\n                function ctr () {\n                    this.constructor = DecoratedClass;\n                }\n\n                DecoratedClass.prototype = new ctr();\n\n                for (var m = 0; m < superMethods.length; m++) {\n                    var superMethod = superMethods[m];\n\n                    DecoratedClass.prototype[superMethod] =\n                        SuperClass.prototype[superMethod];\n                }\n\n                var calledMethod = function (methodName) {\n                    // Stub out the original method if it's not decorating an actual method\n                    var originalMethod = function () {};\n\n                    if (methodName in DecoratedClass.prototype) {\n                        originalMethod = DecoratedClass.prototype[methodName];\n                    }\n\n                    var decoratedMethod = DecoratorClass.prototype[methodName];\n\n                    return function () {\n                        var unshift = Array.prototype.unshift;\n\n                        unshift.call(arguments, originalMethod);\n\n                        return decoratedMethod.apply(this, arguments);\n                    };\n                };\n\n                for (var d = 0; d < decoratedMethods.length; d++) {\n                    var decoratedMethod = decoratedMethods[d];\n\n                    DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);\n                }\n\n                return DecoratedClass;\n            };\n\n            var Observable = function () {\n                this.listeners = {};\n            };\n\n            Observable.prototype.on = function (event, callback) {\n                this.listeners = this.listeners || {};\n\n                if (event in this.listeners) {\n                    this.listeners[event].push(callback);\n                } else {\n                    this.listeners[event] = [callback];\n                }\n            };\n\n            Observable.prototype.trigger = function (event) {\n                var slice = Array.prototype.slice;\n                var params = slice.call(arguments, 1);\n\n                this.listeners = this.listeners || {};\n\n                // Params should always come in as an array\n                if (params == null) {\n                    params = [];\n                }\n\n                // If there are no arguments to the event, use a temporary object\n                if (params.length === 0) {\n                    params.push({});\n                }\n\n                // Set the `_type` of the first object to the event\n                params[0]._type = event;\n\n                if (event in this.listeners) {\n                    this.invoke(this.listeners[event], slice.call(arguments, 1));\n                }\n\n                if ('*' in this.listeners) {\n                    this.invoke(this.listeners['*'], arguments);\n                }\n            };\n\n            Observable.prototype.invoke = function (listeners, params) {\n                for (var i = 0, len = listeners.length; i < len; i++) {\n                    listeners[i].apply(this, params);\n                }\n            };\n\n            Utils.Observable = Observable;\n\n            Utils.generateChars = function (length) {\n                var chars = '';\n\n                for (var i = 0; i < length; i++) {\n                    var randomChar = Math.floor(Math.random() * 36);\n                    chars += randomChar.toString(36);\n                }\n\n                return chars;\n            };\n\n            Utils.bind = function (func, context) {\n                return function () {\n                    func.apply(context, arguments);\n                };\n            };\n\n            Utils._convertData = function (data) {\n                for (var originalKey in data) {\n                    var keys = originalKey.split('-');\n\n                    var dataLevel = data;\n\n                    if (keys.length === 1) {\n                        continue;\n                    }\n\n                    for (var k = 0; k < keys.length; k++) {\n                        var key = keys[k];\n\n                        // Lowercase the first letter\n                        // By default, dash-separated becomes camelCase\n                        key = key.substring(0, 1).toLowerCase() + key.substring(1);\n\n                        if (!(key in dataLevel)) {\n                            dataLevel[key] = {};\n                        }\n\n                        if (k == keys.length - 1) {\n                            dataLevel[key] = data[originalKey];\n                        }\n\n                        dataLevel = dataLevel[key];\n                    }\n\n                    delete data[originalKey];\n                }\n\n                return data;\n            };\n\n            Utils.hasScroll = function (index, el) {\n                // Adapted from the function created by @ShadowScripter\n                // and adapted by @BillBarry on the Stack Exchange Code Review website.\n                // The original code can be found at\n                // http://codereview.stackexchange.com/q/13338\n                // and was designed to be used with the Sizzle selector engine.\n\n                var $el = $(el);\n                var overflowX = el.style.overflowX;\n                var overflowY = el.style.overflowY;\n\n                //Check both x and y declarations\n                if (overflowX === overflowY &&\n                    (overflowY === 'hidden' || overflowY === 'visible')) {\n                    return false;\n                }\n\n                if (overflowX === 'scroll' || overflowY === 'scroll') {\n                    return true;\n                }\n\n                return ($el.innerHeight() < el.scrollHeight ||\n                        $el.innerWidth() < el.scrollWidth);\n            };\n\n            Utils.escapeMarkup = function (markup) {\n                var replaceMap = {\n                    '\\\\': '&#92;',\n                    '&': '&amp;',\n                    '<': '&lt;',\n                    '>': '&gt;',\n                    '\"': '&quot;',\n                    '\\'': '&#39;',\n                    '/': '&#47;'\n                };\n\n                // Do not try to escape the markup if it's not a string\n                if (typeof markup !== 'string') {\n                    return markup;\n                }\n\n                return String(markup).replace(/[&<>\"'\\/\\\\]/g, function (match) {\n                    return replaceMap[match];\n                });\n            };\n\n            // Append an array of jQuery nodes to a given element.\n            Utils.appendMany = function ($element, $nodes) {\n                // jQuery 1.7.x does not support $.fn.append() with an array\n                // Fall back to a jQuery object collection using $.fn.add()\n                if ($.fn.jquery.substr(0, 3) === '1.7') {\n                    var $jqNodes = $();\n\n                    $.map($nodes, function (node) {\n                        $jqNodes = $jqNodes.add(node);\n                    });\n\n                    $nodes = $jqNodes;\n                }\n\n                $element.append($nodes);\n            };\n\n            return Utils;\n        });\n\n        S2.define('select2/results',[\n            'jquery',\n            './utils'\n        ], function ($, Utils) {\n            function Results ($element, options, dataAdapter) {\n                this.$element = $element;\n                this.data = dataAdapter;\n                this.options = options;\n\n                Results.__super__.constructor.call(this);\n            }\n\n            Utils.Extend(Results, Utils.Observable);\n\n            Results.prototype.render = function () {\n                var $results = $(\n                    '<ul class=\"select2-results__options\" role=\"tree\"></ul>'\n                );\n\n                if (this.options.get('multiple')) {\n                    $results.attr('aria-multiselectable', 'true');\n                }\n\n                this.$results = $results;\n\n                return $results;\n            };\n\n            Results.prototype.clear = function () {\n                this.$results.empty();\n            };\n\n            Results.prototype.displayMessage = function (params) {\n                var escapeMarkup = this.options.get('escapeMarkup');\n\n                this.clear();\n                this.hideLoading();\n\n                var $message = $(\n                    '<li role=\"treeitem\" aria-live=\"assertive\"' +\n                    ' class=\"select2-results__option\"></li>'\n                );\n\n                var message = this.options.get('translations').get(params.message);\n\n                $message.append(\n                    escapeMarkup(\n                        message(params.args)\n                    )\n                );\n\n                $message[0].className += ' select2-results__message';\n\n                this.$results.append($message);\n            };\n\n            Results.prototype.hideMessages = function () {\n                this.$results.find('.select2-results__message').remove();\n            };\n\n            Results.prototype.append = function (data) {\n                this.hideLoading();\n\n                var $options = [];\n\n                if (data.results == null || data.results.length === 0) {\n                    if (this.$results.children().length === 0) {\n                        this.trigger('results:message', {\n                            message: 'noResults'\n                        });\n                    }\n\n                    return;\n                }\n\n                data.results = this.sort(data.results);\n\n                for (var d = 0; d < data.results.length; d++) {\n                    var item = data.results[d];\n\n                    var $option = this.option(item);\n\n                    $options.push($option);\n                }\n\n                this.$results.append($options);\n            };\n\n            Results.prototype.position = function ($results, $dropdown) {\n                var $resultsContainer = $dropdown.find('.select2-results');\n                $resultsContainer.append($results);\n            };\n\n            Results.prototype.sort = function (data) {\n                var sorter = this.options.get('sorter');\n\n                return sorter(data);\n            };\n\n            Results.prototype.highlightFirstItem = function () {\n                var $options = this.$results\n                                   .find('.select2-results__option[aria-selected]');\n\n                var $selected = $options.filter('[aria-selected=true]');\n\n                // Check if there are any selected options\n                if ($selected.length > 0) {\n                    // If there are selected options, highlight the first\n                    $selected.first().trigger('mouseenter');\n                } else {\n                    // If there are no selected options, highlight the first option\n                    // in the dropdown\n                    $options.first().trigger('mouseenter');\n                }\n\n                this.ensureHighlightVisible();\n            };\n\n            Results.prototype.setClasses = function () {\n                var self = this;\n\n                this.data.current(function (selected) {\n                    var selectedIds = $.map(selected, function (s) {\n                        return s.id.toString();\n                    });\n\n                    var $options = self.$results\n                                       .find('.select2-results__option[aria-selected]');\n\n                    $options.each(function () {\n                        var $option = $(this);\n\n                        var item = $.data(this, 'data');\n\n                        // id needs to be converted to a string when comparing\n                        var id = '' + item.id;\n\n                        if ((item.element != null && item.element.selected) ||\n                            (item.element == null && $.inArray(id, selectedIds) > -1)) {\n                            $option.attr('aria-selected', 'true');\n                        } else {\n                            $option.attr('aria-selected', 'false');\n                        }\n                    });\n\n                });\n            };\n\n            Results.prototype.showLoading = function (params) {\n                this.hideLoading();\n\n                var loadingMore = this.options.get('translations').get('searching');\n\n                var loading = {\n                    disabled: true,\n                    loading: true,\n                    text: loadingMore(params)\n                };\n                var $loading = this.option(loading);\n                $loading.className += ' loading-results';\n\n                this.$results.prepend($loading);\n            };\n\n            Results.prototype.hideLoading = function () {\n                this.$results.find('.loading-results').remove();\n            };\n\n            Results.prototype.option = function (data) {\n                var option = document.createElement('li');\n                option.className = 'select2-results__option';\n\n                var attrs = {\n                    'role': 'treeitem',\n                    'aria-selected': 'false'\n                };\n\n                if (data.disabled) {\n                    delete attrs['aria-selected'];\n                    attrs['aria-disabled'] = 'true';\n                }\n\n                if (data.id == null) {\n                    delete attrs['aria-selected'];\n                }\n\n                if (data._resultId != null) {\n                    option.id = data._resultId;\n                }\n\n                if (data.title) {\n                    option.title = data.title;\n                }\n\n                if (data.children) {\n                    attrs.role = 'group';\n                    attrs['aria-label'] = data.text;\n                    delete attrs['aria-selected'];\n                }\n\n                for (var attr in attrs) {\n                    var val = attrs[attr];\n\n                    option.setAttribute(attr, val);\n                }\n\n                if (data.children) {\n                    var $option = $(option);\n\n                    var label = document.createElement('strong');\n                    label.className = 'select2-results__group';\n\n                    var $label = $(label);\n                    this.template(data, label);\n\n                    var $children = [];\n\n                    for (var c = 0; c < data.children.length; c++) {\n                        var child = data.children[c];\n\n                        var $child = this.option(child);\n\n                        $children.push($child);\n                    }\n\n                    var $childrenContainer = $('<ul></ul>', {\n                        'class': 'select2-results__options select2-results__options--nested'\n                    });\n\n                    $childrenContainer.append($children);\n\n                    $option.append(label);\n                    $option.append($childrenContainer);\n                } else {\n                    this.template(data, option);\n                }\n\n                $.data(option, 'data', data);\n\n                return option;\n            };\n\n            Results.prototype.bind = function (container, $container) {\n                var self = this;\n\n                var id = container.id + '-results';\n\n                this.$results.attr('id', id);\n\n                container.on('results:all', function (params) {\n                    self.clear();\n                    self.append(params.data);\n\n                    if (container.isOpen()) {\n                        self.setClasses();\n                        self.highlightFirstItem();\n                    }\n                });\n\n                container.on('results:append', function (params) {\n                    self.append(params.data);\n\n                    if (container.isOpen()) {\n                        self.setClasses();\n                    }\n                });\n\n                container.on('query', function (params) {\n                    self.hideMessages();\n                    self.showLoading(params);\n                });\n\n                container.on('select', function () {\n                    if (!container.isOpen()) {\n                        return;\n                    }\n\n                    self.setClasses();\n                    self.highlightFirstItem();\n                });\n\n                container.on('unselect', function () {\n                    if (!container.isOpen()) {\n                        return;\n                    }\n\n                    self.setClasses();\n                    self.highlightFirstItem();\n                });\n\n                container.on('open', function () {\n                    // When the dropdown is open, aria-expended=\"true\"\n                    self.$results.attr('aria-expanded', 'true');\n                    self.$results.attr('aria-hidden', 'false');\n\n                    self.setClasses();\n                    self.ensureHighlightVisible();\n                });\n\n                container.on('close', function () {\n                    // When the dropdown is closed, aria-expended=\"false\"\n                    self.$results.attr('aria-expanded', 'false');\n                    self.$results.attr('aria-hidden', 'true');\n                    self.$results.removeAttr('aria-activedescendant');\n                });\n\n                container.on('results:toggle', function () {\n                    var $highlighted = self.getHighlightedResults();\n\n                    if ($highlighted.length === 0) {\n                        return;\n                    }\n\n                    $highlighted.trigger('mouseup');\n                });\n\n                container.on('results:select', function () {\n                    var $highlighted = self.getHighlightedResults();\n\n                    if ($highlighted.length === 0) {\n                        return;\n                    }\n\n                    var data = $highlighted.data('data');\n\n                    if ($highlighted.attr('aria-selected') == 'true') {\n                        self.trigger('close', {});\n                    } else {\n                        self.trigger('select', {\n                            data: data\n                        });\n                    }\n                });\n\n                container.on('results:previous', function () {\n                    var $highlighted = self.getHighlightedResults();\n\n                    var $options = self.$results.find('[aria-selected]');\n\n                    var currentIndex = $options.index($highlighted);\n\n                    // If we are already at te top, don't move further\n                    if (currentIndex === 0) {\n                        return;\n                    }\n\n                    var nextIndex = currentIndex - 1;\n\n                    // If none are highlighted, highlight the first\n                    if ($highlighted.length === 0) {\n                        nextIndex = 0;\n                    }\n\n                    var $next = $options.eq(nextIndex);\n\n                    $next.trigger('mouseenter');\n\n                    var currentOffset = self.$results.offset().top;\n                    var nextTop = $next.offset().top;\n                    var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);\n\n                    if (nextIndex === 0) {\n                        self.$results.scrollTop(0);\n                    } else if (nextTop - currentOffset < 0) {\n                        self.$results.scrollTop(nextOffset);\n                    }\n                });\n\n                container.on('results:next', function () {\n                    var $highlighted = self.getHighlightedResults();\n\n                    var $options = self.$results.find('[aria-selected]');\n\n                    var currentIndex = $options.index($highlighted);\n\n                    var nextIndex = currentIndex + 1;\n\n                    // If we are at the last option, stay there\n                    if (nextIndex >= $options.length) {\n                        return;\n                    }\n\n                    var $next = $options.eq(nextIndex);\n\n                    $next.trigger('mouseenter');\n\n                    var currentOffset = self.$results.offset().top +\n                                        self.$results.outerHeight(false);\n                    var nextBottom = $next.offset().top + $next.outerHeight(false);\n                    var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;\n\n                    if (nextIndex === 0) {\n                        self.$results.scrollTop(0);\n                    } else if (nextBottom > currentOffset) {\n                        self.$results.scrollTop(nextOffset);\n                    }\n                });\n\n                container.on('results:focus', function (params) {\n                    params.element.addClass('select2-results__option--highlighted');\n                });\n\n                container.on('results:message', function (params) {\n                    self.displayMessage(params);\n                });\n\n                if ($.fn.mousewheel) {\n                    this.$results.on('mousewheel', function (e) {\n                        var top = self.$results.scrollTop();\n\n                        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;\n\n                        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;\n                        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();\n\n                        if (isAtTop) {\n                            self.$results.scrollTop(0);\n\n                            e.preventDefault();\n                            e.stopPropagation();\n                        } else if (isAtBottom) {\n                            self.$results.scrollTop(\n                                self.$results.get(0).scrollHeight - self.$results.height()\n                            );\n\n                            e.preventDefault();\n                            e.stopPropagation();\n                        }\n                    });\n                }\n\n                this.$results.on('mouseup', '.select2-results__option[aria-selected]',\n                    function (evt) {\n                        var $this = $(this);\n\n                        var data = $this.data('data');\n\n                        if ($this.attr('aria-selected') === 'true') {\n                            if (self.options.get('multiple')) {\n                                self.trigger('unselect', {\n                                    originalEvent: evt,\n                                    data: data\n                                });\n                            } else {\n                                self.trigger('close', {});\n                            }\n\n                            return;\n                        }\n\n                        self.trigger('select', {\n                            originalEvent: evt,\n                            data: data\n                        });\n                    });\n\n                this.$results.on('mouseenter', '.select2-results__option[aria-selected]',\n                    function (evt) {\n                        var data = $(this).data('data');\n\n                        self.getHighlightedResults()\n                            .removeClass('select2-results__option--highlighted');\n\n                        self.trigger('results:focus', {\n                            data: data,\n                            element: $(this)\n                        });\n                    });\n            };\n\n            Results.prototype.getHighlightedResults = function () {\n                var $highlighted = this.$results\n                                       .find('.select2-results__option--highlighted');\n\n                return $highlighted;\n            };\n\n            Results.prototype.destroy = function () {\n                this.$results.remove();\n            };\n\n            Results.prototype.ensureHighlightVisible = function () {\n                var $highlighted = this.getHighlightedResults();\n\n                if ($highlighted.length === 0) {\n                    return;\n                }\n\n                var $options = this.$results.find('[aria-selected]');\n\n                var currentIndex = $options.index($highlighted);\n\n                var currentOffset = this.$results.offset().top;\n                var nextTop = $highlighted.offset().top;\n                var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);\n\n                var offsetDelta = nextTop - currentOffset;\n                nextOffset -= $highlighted.outerHeight(false) * 2;\n\n                if (currentIndex <= 2) {\n                    this.$results.scrollTop(0);\n                } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {\n                    this.$results.scrollTop(nextOffset);\n                }\n            };\n\n            Results.prototype.template = function (result, container) {\n                var template = this.options.get('templateResult');\n                var escapeMarkup = this.options.get('escapeMarkup');\n\n                var content = template(result, container);\n\n                if (content == null) {\n                    container.style.display = 'none';\n                } else if (typeof content === 'string') {\n                    container.innerHTML = escapeMarkup(content);\n                } else {\n                    $(container).append(content);\n                }\n            };\n\n            return Results;\n        });\n\n        S2.define('select2/keys',[\n\n        ], function () {\n            var KEYS = {\n                BACKSPACE: 8,\n                TAB: 9,\n                ENTER: 13,\n                SHIFT: 16,\n                CTRL: 17,\n                ALT: 18,\n                ESC: 27,\n                SPACE: 32,\n                PAGE_UP: 33,\n                PAGE_DOWN: 34,\n                END: 35,\n                HOME: 36,\n                LEFT: 37,\n                UP: 38,\n                RIGHT: 39,\n                DOWN: 40,\n                DELETE: 46\n            };\n\n            return KEYS;\n        });\n\n        S2.define('select2/selection/base',[\n            'jquery',\n            '../utils',\n            '../keys'\n        ], function ($, Utils, KEYS) {\n            function BaseSelection ($element, options) {\n                this.$element = $element;\n                this.options = options;\n\n                BaseSelection.__super__.constructor.call(this);\n            }\n\n            Utils.Extend(BaseSelection, Utils.Observable);\n\n            BaseSelection.prototype.render = function () {\n                var $selection = $(\n                    '<span class=\"select2-selection\" role=\"combobox\" ' +\n                    ' aria-haspopup=\"true\" aria-expanded=\"false\">' +\n                    '</span>'\n                );\n\n                this._tabindex = 0;\n\n                if (this.$element.data('old-tabindex') != null) {\n                    this._tabindex = this.$element.data('old-tabindex');\n                } else if (this.$element.attr('tabindex') != null) {\n                    this._tabindex = this.$element.attr('tabindex');\n                }\n\n                $selection.attr('title', this.$element.attr('title'));\n                $selection.attr('tabindex', this._tabindex);\n\n                this.$selection = $selection;\n\n                return $selection;\n            };\n\n            BaseSelection.prototype.bind = function (container, $container) {\n                var self = this;\n\n                var id = container.id + '-container';\n                var resultsId = container.id + '-results';\n\n                this.container = container;\n\n                this.$selection.on('focus', function (evt) {\n                    self.trigger('focus', evt);\n                });\n\n                this.$selection.on('blur', function (evt) {\n                    self._handleBlur(evt);\n                });\n\n                this.$selection.on('keydown', function (evt) {\n                    self.trigger('keypress', evt);\n\n                    if (evt.which === KEYS.SPACE) {\n                        evt.preventDefault();\n                    }\n                });\n\n                container.on('results:focus', function (params) {\n                    self.$selection.attr('aria-activedescendant', params.data._resultId);\n                });\n\n                container.on('selection:update', function (params) {\n                    self.update(params.data);\n                });\n\n                container.on('open', function () {\n                    // When the dropdown is open, aria-expanded=\"true\"\n                    self.$selection.attr('aria-expanded', 'true');\n                    self.$selection.attr('aria-owns', resultsId);\n\n                    self._attachCloseHandler(container);\n                });\n\n                container.on('close', function () {\n                    // When the dropdown is closed, aria-expanded=\"false\"\n                    self.$selection.attr('aria-expanded', 'false');\n                    self.$selection.removeAttr('aria-activedescendant');\n                    self.$selection.removeAttr('aria-owns');\n\n                    self.$selection.focus();\n\n                    self._detachCloseHandler(container);\n                });\n\n                container.on('enable', function () {\n                    self.$selection.attr('tabindex', self._tabindex);\n                });\n\n                container.on('disable', function () {\n                    self.$selection.attr('tabindex', '-1');\n                });\n            };\n\n            BaseSelection.prototype._handleBlur = function (evt) {\n                var self = this;\n\n                // This needs to be delayed as the active element is the body when the tab\n                // key is pressed, possibly along with others.\n                window.setTimeout(function () {\n                    // Don't trigger `blur` if the focus is still in the selection\n                    if (\n                        (document.activeElement == self.$selection[0]) ||\n                        ($.contains(self.$selection[0], document.activeElement))\n                    ) {\n                        return;\n                    }\n\n                    self.trigger('blur', evt);\n                }, 1);\n            };\n\n            BaseSelection.prototype._attachCloseHandler = function (container) {\n                var self = this;\n\n                $(document.body).on('mousedown.select2.' + container.id, function (e) {\n                    var $target = $(e.target);\n\n                    var $select = $target.closest('.select2');\n\n                    var $all = $('.select2.select2-container--open');\n\n                    $all.each(function () {\n                        var $this = $(this);\n\n                        if (this == $select[0]) {\n                            return;\n                        }\n\n                        var $element = $this.data('element');\n\n                        // SUI-SELECT2 renamed function to SUIselect2\n                        $element.SUIselect2('close');\n                        // $element.select2('close');\n                    });\n                });\n            };\n\n            BaseSelection.prototype._detachCloseHandler = function (container) {\n                $(document.body).off('mousedown.select2.' + container.id);\n            };\n\n            BaseSelection.prototype.position = function ($selection, $container) {\n                var $selectionContainer = $container.find('.selection');\n                $selectionContainer.append($selection);\n            };\n\n            BaseSelection.prototype.destroy = function () {\n                this._detachCloseHandler(this.container);\n            };\n\n            BaseSelection.prototype.update = function (data) {\n                throw new Error('The `update` method must be defined in child classes.');\n            };\n\n            return BaseSelection;\n        });\n\n        S2.define('select2/selection/single',[\n            'jquery',\n            './base',\n            '../utils',\n            '../keys'\n        ], function ($, BaseSelection, Utils, KEYS) {\n            function SingleSelection () {\n                SingleSelection.__super__.constructor.apply(this, arguments);\n            }\n\n            Utils.Extend(SingleSelection, BaseSelection);\n\n            SingleSelection.prototype.render = function () {\n                var $selection = SingleSelection.__super__.render.call(this);\n\n                $selection.addClass('select2-selection--single');\n\n                $selection.html(\n                    '<span class=\"select2-selection__rendered\"></span>' +\n                    '<span class=\"select2-selection__arrow\" role=\"presentation\">' +\n                    '<b role=\"presentation\"></b>' +\n                    '</span>'\n                );\n\n                return $selection;\n            };\n\n            SingleSelection.prototype.bind = function (container, $container) {\n                var self = this;\n\n                SingleSelection.__super__.bind.apply(this, arguments);\n\n                var id = container.id + '-container';\n\n                this.$selection.find('.select2-selection__rendered').attr('id', id);\n                this.$selection.attr('aria-labelledby', id);\n\n                this.$selection.on('mousedown', function (evt) {\n                    // Only respond to left clicks\n                    if (evt.which !== 1) {\n                        return;\n                    }\n\n                    self.trigger('toggle', {\n                        originalEvent: evt\n                    });\n                });\n\n                this.$selection.on('focus', function (evt) {\n                    // User focuses on the container\n                });\n\n                this.$selection.on('blur', function (evt) {\n                    // User exits the container\n                });\n\n                container.on('focus', function (evt) {\n                    if (!container.isOpen()) {\n                        self.$selection.focus();\n                    }\n                });\n\n                container.on('selection:update', function (params) {\n                    self.update(params.data);\n                });\n            };\n\n            SingleSelection.prototype.clear = function () {\n                this.$selection.find('.select2-selection__rendered').empty();\n            };\n\n            SingleSelection.prototype.display = function (data, container) {\n                var template = this.options.get('templateSelection');\n                var escapeMarkup = this.options.get('escapeMarkup');\n\n                return escapeMarkup(template(data, container));\n            };\n\n            SingleSelection.prototype.selectionContainer = function () {\n                return $('<span></span>');\n            };\n\n            SingleSelection.prototype.update = function (data) {\n                if (data.length === 0) {\n                    this.clear();\n                    return;\n                }\n\n                var selection = data[0];\n\n                var $rendered = this.$selection.find('.select2-selection__rendered');\n                var formatted = this.display(selection, $rendered);\n\n                $rendered.empty().append(formatted);\n                $rendered.prop('title', selection.title || selection.text);\n            };\n\n            return SingleSelection;\n        });\n\n        S2.define('select2/selection/multiple',[\n            'jquery',\n            './base',\n            '../utils'\n        ], function ($, BaseSelection, Utils) {\n            function MultipleSelection ($element, options) {\n                MultipleSelection.__super__.constructor.apply(this, arguments);\n            }\n\n            Utils.Extend(MultipleSelection, BaseSelection);\n\n            MultipleSelection.prototype.render = function () {\n                var $selection = MultipleSelection.__super__.render.call(this);\n\n                $selection.addClass('select2-selection--multiple');\n\n                $selection.html(\n                    '<ul class=\"select2-selection__rendered\"></ul>'\n                );\n\n                return $selection;\n            };\n\n            MultipleSelection.prototype.bind = function (container, $container) {\n                var self = this;\n\n                MultipleSelection.__super__.bind.apply(this, arguments);\n\n                this.$selection.on('click', function (evt) {\n                    self.trigger('toggle', {\n                        originalEvent: evt\n                    });\n                });\n\n                this.$selection.on(\n                    'click',\n                    '.select2-selection__choice__remove',\n                    function (evt) {\n                        // Ignore the event if it is disabled\n                        if (self.options.get('disabled')) {\n                            return;\n                        }\n\n                        var $remove = $(this);\n                        var $selection = $remove.parent();\n\n                        var data = $selection.data('data');\n\n                        self.trigger('unselect', {\n                            originalEvent: evt,\n                            data: data\n                        });\n                    }\n                );\n            };\n\n            MultipleSelection.prototype.clear = function () {\n                this.$selection.find('.select2-selection__rendered').empty();\n            };\n\n            MultipleSelection.prototype.display = function (data, container) {\n                var template = this.options.get('templateSelection');\n                var escapeMarkup = this.options.get('escapeMarkup');\n\n                return escapeMarkup(template(data, container));\n            };\n\n            MultipleSelection.prototype.selectionContainer = function () {\n                var $container = $(\n                    '<li class=\"select2-selection__choice\">' +\n                    '<span class=\"select2-selection__choice__remove\" role=\"presentation\">' +\n                    '&times;' +\n                    '</span>' +\n                    '</li>'\n                );\n\n                return $container;\n            };\n\n            MultipleSelection.prototype.update = function (data) {\n                this.clear();\n\n                if (data.length === 0) {\n                    return;\n                }\n\n                var $selections = [];\n\n                for (var d = 0; d < data.length; d++) {\n                    var selection = data[d];\n\n                    var $selection = this.selectionContainer();\n                    var formatted = this.display(selection, $selection);\n\n                    $selection.append(formatted);\n                    $selection.prop('title', selection.title || selection.text);\n\n                    $selection.data('data', selection);\n\n                    $selections.push($selection);\n                }\n\n                var $rendered = this.$selection.find('.select2-selection__rendered');\n\n                Utils.appendMany($rendered, $selections);\n            };\n\n            return MultipleSelection;\n        });\n\n        S2.define('select2/selection/placeholder',[\n            '../utils'\n        ], function (Utils) {\n            function Placeholder (decorated, $element, options) {\n                this.placeholder = this.normalizePlaceholder(options.get('placeholder'));\n\n                decorated.call(this, $element, options);\n            }\n\n            Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {\n                if (typeof placeholder === 'string') {\n                    placeholder = {\n                        id: '',\n                        text: placeholder\n                    };\n                }\n\n                return placeholder;\n            };\n\n            Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {\n                var $placeholder = this.selectionContainer();\n\n                $placeholder.html(this.display(placeholder));\n                $placeholder.addClass('select2-selection__placeholder')\n                            .removeClass('select2-selection__choice');\n\n                return $placeholder;\n            };\n\n            Placeholder.prototype.update = function (decorated, data) {\n                var singlePlaceholder = (\n                    data.length == 1 && data[0].id != this.placeholder.id\n                );\n                var multipleSelections = data.length > 1;\n\n                if (multipleSelections || singlePlaceholder) {\n                    return decorated.call(this, data);\n                }\n\n                this.clear();\n\n                var $placeholder = this.createPlaceholder(this.placeholder);\n\n                this.$selection.find('.select2-selection__rendered').append($placeholder);\n            };\n\n            return Placeholder;\n        });\n\n        S2.define('select2/selection/allowClear',[\n            'jquery',\n            '../keys'\n        ], function ($, KEYS) {\n            function AllowClear () { }\n\n            AllowClear.prototype.bind = function (decorated, container, $container) {\n                var self = this;\n\n                decorated.call(this, container, $container);\n\n                if (this.placeholder == null) {\n                    if (this.options.get('debug') && window.console && console.error) {\n                        console.error(\n                            'Select2: The `allowClear` option should be used in combination ' +\n                            'with the `placeholder` option.'\n                        );\n                    }\n                }\n\n                this.$selection.on('mousedown', '.select2-selection__clear',\n                    function (evt) {\n                        self._handleClear(evt);\n                    });\n\n                container.on('keypress', function (evt) {\n                    self._handleKeyboardClear(evt, container);\n                });\n            };\n\n            AllowClear.prototype._handleClear = function (_, evt) {\n                // Ignore the event if it is disabled\n                if (this.options.get('disabled')) {\n                    return;\n                }\n\n                var $clear = this.$selection.find('.select2-selection__clear');\n\n                // Ignore the event if nothing has been selected\n                if ($clear.length === 0) {\n                    return;\n                }\n\n                evt.stopPropagation();\n\n                var data = $clear.data('data');\n\n                for (var d = 0; d < data.length; d++) {\n                    var unselectData = {\n                        data: data[d]\n                    };\n\n                    // Trigger the `unselect` event, so people can prevent it from being\n                    // cleared.\n                    this.trigger('unselect', unselectData);\n\n                    // If the event was prevented, don't clear it out.\n                    if (unselectData.prevented) {\n                        return;\n                    }\n                }\n\n                this.$element.val(this.placeholder.id).trigger('change');\n\n                this.trigger('toggle', {});\n            };\n\n            AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {\n                if (container.isOpen()) {\n                    return;\n                }\n\n                if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {\n                    this._handleClear(evt);\n                }\n            };\n\n            AllowClear.prototype.update = function (decorated, data) {\n                decorated.call(this, data);\n\n                if (this.$selection.find('.select2-selection__placeholder').length > 0 ||\n                    data.length === 0) {\n                    return;\n                }\n\n                var $remove = $(\n                    '<span class=\"select2-selection__clear\">' +\n                    '&times;' +\n                    '</span>'\n                );\n                $remove.data('data', data);\n\n                this.$selection.find('.select2-selection__rendered').prepend($remove);\n            };\n\n            return AllowClear;\n        });\n\n        S2.define('select2/selection/search',[\n            'jquery',\n            '../utils',\n            '../keys'\n        ], function ($, Utils, KEYS) {\n            function Search (decorated, $element, options) {\n                decorated.call(this, $element, options);\n            }\n\n            Search.prototype.render = function (decorated) {\n                var $search = $(\n                    '<li class=\"select2-search select2-search--inline\">' +\n                    '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' +\n                    ' autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\"' +\n                    ' spellcheck=\"false\" role=\"textbox\" aria-autocomplete=\"list\" />' +\n                    '</li>'\n                );\n\n                this.$searchContainer = $search;\n                this.$search = $search.find('input');\n\n                var $rendered = decorated.call(this);\n\n                this._transferTabIndex();\n\n                return $rendered;\n            };\n\n            Search.prototype.bind = function (decorated, container, $container) {\n                var self = this;\n\n                decorated.call(this, container, $container);\n\n                container.on('open', function () {\n                    self.$search.trigger('focus');\n                });\n\n                container.on('close', function () {\n                    self.$search.val('');\n                    self.$search.removeAttr('aria-activedescendant');\n                    self.$search.trigger('focus');\n                });\n\n                container.on('enable', function () {\n                    self.$search.prop('disabled', false);\n\n                    self._transferTabIndex();\n                });\n\n                container.on('disable', function () {\n                    self.$search.prop('disabled', true);\n                });\n\n                container.on('focus', function (evt) {\n                    self.$search.trigger('focus');\n                });\n\n                container.on('results:focus', function (params) {\n                    self.$search.attr('aria-activedescendant', params.id);\n                });\n\n                this.$selection.on('focusin', '.select2-search--inline', function (evt) {\n                    self.trigger('focus', evt);\n                });\n\n                this.$selection.on('focusout', '.select2-search--inline', function (evt) {\n                    self._handleBlur(evt);\n                });\n\n                this.$selection.on('keydown', '.select2-search--inline', function (evt) {\n                    evt.stopPropagation();\n\n                    self.trigger('keypress', evt);\n\n                    self._keyUpPrevented = evt.isDefaultPrevented();\n\n                    var key = evt.which;\n\n                    if (key === KEYS.BACKSPACE && self.$search.val() === '') {\n                        var $previousChoice = self.$searchContainer\n                                                  .prev('.select2-selection__choice');\n\n                        if ($previousChoice.length > 0) {\n                            var item = $previousChoice.data('data');\n\n                            self.searchRemoveChoice(item);\n\n                            evt.preventDefault();\n                        }\n                    }\n                });\n\n                // Try to detect the IE version should the `documentMode` property that\n                // is stored on the document. This is only implemented in IE and is\n                // slightly cleaner than doing a user agent check.\n                // This property is not available in Edge, but Edge also doesn't have\n                // this bug.\n                var msie = document.documentMode;\n                var disableInputEvents = msie && msie <= 11;\n\n                // Workaround for browsers which do not support the `input` event\n                // This will prevent double-triggering of events for browsers which support\n                // both the `keyup` and `input` events.\n                this.$selection.on(\n                    'input.searchcheck',\n                    '.select2-search--inline',\n                    function (evt) {\n                        // IE will trigger the `input` event when a placeholder is used on a\n                        // search box. To get around this issue, we are forced to ignore all\n                        // `input` events in IE and keep using `keyup`.\n                        if (disableInputEvents) {\n                            self.$selection.off('input.search input.searchcheck');\n                            return;\n                        }\n\n                        // Unbind the duplicated `keyup` event\n                        self.$selection.off('keyup.search');\n                    }\n                );\n\n                this.$selection.on(\n                    'keyup.search input.search',\n                    '.select2-search--inline',\n                    function (evt) {\n                        // IE will trigger the `input` event when a placeholder is used on a\n                        // search box. To get around this issue, we are forced to ignore all\n                        // `input` events in IE and keep using `keyup`.\n                        if (disableInputEvents && evt.type === 'input') {\n                            self.$selection.off('input.search input.searchcheck');\n                            return;\n                        }\n\n                        var key = evt.which;\n\n                        // We can freely ignore events from modifier keys\n                        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {\n                            return;\n                        }\n\n                        // Tabbing will be handled during the `keydown` phase\n                        if (key == KEYS.TAB) {\n                            return;\n                        }\n\n                        self.handleSearch(evt);\n                    }\n                );\n            };\n\n            /**\n             * This method will transfer the tabindex attribute from the rendered\n             * selection to the search box. This allows for the search box to be used as\n             * the primary focus instead of the selection container.\n             *\n             * @private\n             */\n            Search.prototype._transferTabIndex = function (decorated) {\n                this.$search.attr('tabindex', this.$selection.attr('tabindex'));\n                this.$selection.attr('tabindex', '-1');\n            };\n\n            Search.prototype.createPlaceholder = function (decorated, placeholder) {\n                this.$search.attr('placeholder', placeholder.text);\n            };\n\n            Search.prototype.update = function (decorated, data) {\n                var searchHadFocus = this.$search[0] == document.activeElement;\n\n                this.$search.attr('placeholder', '');\n\n                decorated.call(this, data);\n\n                this.$selection.find('.select2-selection__rendered')\n                    .append(this.$searchContainer);\n\n                this.resizeSearch();\n                if (searchHadFocus) {\n                    this.$search.focus();\n                }\n            };\n\n            Search.prototype.handleSearch = function () {\n                this.resizeSearch();\n\n                if (!this._keyUpPrevented) {\n                    var input = this.$search.val();\n\n                    this.trigger('query', {\n                        term: input\n                    });\n                }\n\n                this._keyUpPrevented = false;\n            };\n\n            Search.prototype.searchRemoveChoice = function (decorated, item) {\n                this.trigger('unselect', {\n                    data: item\n                });\n\n                this.$search.val(item.text);\n                this.handleSearch();\n            };\n\n            Search.prototype.resizeSearch = function () {\n                this.$search.css('width', '25px');\n\n                var width = '';\n\n                if (this.$search.attr('placeholder') !== '') {\n                    width = this.$selection.find('.select2-selection__rendered').innerWidth();\n                } else {\n                    var minimumWidth = this.$search.val().length + 1;\n\n                    width = (minimumWidth * 0.75) + 'em';\n                }\n\n                this.$search.css('width', width);\n            };\n\n            return Search;\n        });\n\n        S2.define('select2/selection/eventRelay',[\n            'jquery'\n        ], function ($) {\n            function EventRelay () { }\n\n            EventRelay.prototype.bind = function (decorated, container, $container) {\n                var self = this;\n                var relayEvents = [\n                    'open', 'opening',\n                    'close', 'closing',\n                    'select', 'selecting',\n                    'unselect', 'unselecting'\n                ];\n\n                var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];\n\n                decorated.call(this, container, $container);\n\n                container.on('*', function (name, params) {\n                    // Ignore events that should not be relayed\n                    if ($.inArray(name, relayEvents) === -1) {\n                        return;\n                    }\n\n                    // The parameters should always be an object\n                    params = params || {};\n\n                    // Generate the jQuery event for the Select2 event\n                    var evt = $.Event('select2:' + name, {\n                        params: params\n                    });\n\n                    self.$element.trigger(evt);\n\n                    // Only handle preventable events if it was one\n                    if ($.inArray(name, preventableEvents) === -1) {\n                        return;\n                    }\n\n                    params.prevented = evt.isDefaultPrevented();\n                });\n            };\n\n            return EventRelay;\n        });\n\n        S2.define('select2/translation',[\n            'jquery',\n            'require'\n        ], function ($, require) {\n            function Translation (dict) {\n                this.dict = dict || {};\n            }\n\n            Translation.prototype.all = function () {\n                return this.dict;\n            };\n\n            Translation.prototype.get = function (key) {\n                return this.dict[key];\n            };\n\n            Translation.prototype.extend = function (translation) {\n                this.dict = $.extend({}, translation.all(), this.dict);\n            };\n\n            // Static functions\n\n            Translation._cache = {};\n\n            Translation.loadPath = function (path) {\n                if (!(path in Translation._cache)) {\n                    var translations = require(path);\n\n                    Translation._cache[path] = translations;\n                }\n\n                return new Translation(Translation._cache[path]);\n            };\n\n            return Translation;\n        });\n\n        S2.define('select2/diacritics',[\n\n        ], function () {\n            var diacritics = {\n                '\\u24B6': 'A',\n                '\\uFF21': 'A',\n                '\\u00C0': 'A',\n                '\\u00C1': 'A',\n                '\\u00C2': 'A',\n                '\\u1EA6': 'A',\n                '\\u1EA4': 'A',\n                '\\u1EAA': 'A',\n                '\\u1EA8': 'A',\n                '\\u00C3': 'A',\n                '\\u0100': 'A',\n                '\\u0102': 'A',\n                '\\u1EB0': 'A',\n                '\\u1EAE': 'A',\n                '\\u1EB4': 'A',\n                '\\u1EB2': 'A',\n                '\\u0226': 'A',\n                '\\u01E0': 'A',\n                '\\u00C4': 'A',\n                '\\u01DE': 'A',\n                '\\u1EA2': 'A',\n                '\\u00C5': 'A',\n                '\\u01FA': 'A',\n                '\\u01CD': 'A',\n                '\\u0200': 'A',\n                '\\u0202': 'A',\n                '\\u1EA0': 'A',\n                '\\u1EAC': 'A',\n                '\\u1EB6': 'A',\n                '\\u1E00': 'A',\n                '\\u0104': 'A',\n                '\\u023A': 'A',\n                '\\u2C6F': 'A',\n                '\\uA732': 'AA',\n                '\\u00C6': 'AE',\n                '\\u01FC': 'AE',\n                '\\u01E2': 'AE',\n                '\\uA734': 'AO',\n                '\\uA736': 'AU',\n                '\\uA738': 'AV',\n                '\\uA73A': 'AV',\n                '\\uA73C': 'AY',\n                '\\u24B7': 'B',\n                '\\uFF22': 'B',\n                '\\u1E02': 'B',\n                '\\u1E04': 'B',\n                '\\u1E06': 'B',\n                '\\u0243': 'B',\n                '\\u0182': 'B',\n                '\\u0181': 'B',\n                '\\u24B8': 'C',\n                '\\uFF23': 'C',\n                '\\u0106': 'C',\n                '\\u0108': 'C',\n                '\\u010A': 'C',\n                '\\u010C': 'C',\n                '\\u00C7': 'C',\n                '\\u1E08': 'C',\n                '\\u0187': 'C',\n                '\\u023B': 'C',\n                '\\uA73E': 'C',\n                '\\u24B9': 'D',\n                '\\uFF24': 'D',\n                '\\u1E0A': 'D',\n                '\\u010E': 'D',\n                '\\u1E0C': 'D',\n                '\\u1E10': 'D',\n                '\\u1E12': 'D',\n                '\\u1E0E': 'D',\n                '\\u0110': 'D',\n                '\\u018B': 'D',\n                '\\u018A': 'D',\n                '\\u0189': 'D',\n                '\\uA779': 'D',\n                '\\u01F1': 'DZ',\n                '\\u01C4': 'DZ',\n                '\\u01F2': 'Dz',\n                '\\u01C5': 'Dz',\n                '\\u24BA': 'E',\n                '\\uFF25': 'E',\n                '\\u00C8': 'E',\n                '\\u00C9': 'E',\n                '\\u00CA': 'E',\n                '\\u1EC0': 'E',\n                '\\u1EBE': 'E',\n                '\\u1EC4': 'E',\n                '\\u1EC2': 'E',\n                '\\u1EBC': 'E',\n                '\\u0112': 'E',\n                '\\u1E14': 'E',\n                '\\u1E16': 'E',\n                '\\u0114': 'E',\n                '\\u0116': 'E',\n                '\\u00CB': 'E',\n                '\\u1EBA': 'E',\n                '\\u011A': 'E',\n                '\\u0204': 'E',\n                '\\u0206': 'E',\n                '\\u1EB8': 'E',\n                '\\u1EC6': 'E',\n                '\\u0228': 'E',\n                '\\u1E1C': 'E',\n                '\\u0118': 'E',\n                '\\u1E18': 'E',\n                '\\u1E1A': 'E',\n                '\\u0190': 'E',\n                '\\u018E': 'E',\n                '\\u24BB': 'F',\n                '\\uFF26': 'F',\n                '\\u1E1E': 'F',\n                '\\u0191': 'F',\n                '\\uA77B': 'F',\n                '\\u24BC': 'G',\n                '\\uFF27': 'G',\n                '\\u01F4': 'G',\n                '\\u011C': 'G',\n                '\\u1E20': 'G',\n                '\\u011E': 'G',\n                '\\u0120': 'G',\n                '\\u01E6': 'G',\n                '\\u0122': 'G',\n                '\\u01E4': 'G',\n                '\\u0193': 'G',\n                '\\uA7A0': 'G',\n                '\\uA77D': 'G',\n                '\\uA77E': 'G',\n                '\\u24BD': 'H',\n                '\\uFF28': 'H',\n                '\\u0124': 'H',\n                '\\u1E22': 'H',\n                '\\u1E26': 'H',\n                '\\u021E': 'H',\n                '\\u1E24': 'H',\n                '\\u1E28': 'H',\n                '\\u1E2A': 'H',\n                '\\u0126': 'H',\n                '\\u2C67': 'H',\n                '\\u2C75': 'H',\n                '\\uA78D': 'H',\n                '\\u24BE': 'I',\n                '\\uFF29': 'I',\n                '\\u00CC': 'I',\n                '\\u00CD': 'I',\n                '\\u00CE': 'I',\n                '\\u0128': 'I',\n                '\\u012A': 'I',\n                '\\u012C': 'I',\n                '\\u0130': 'I',\n                '\\u00CF': 'I',\n                '\\u1E2E': 'I',\n                '\\u1EC8': 'I',\n                '\\u01CF': 'I',\n                '\\u0208': 'I',\n                '\\u020A': 'I',\n                '\\u1ECA': 'I',\n                '\\u012E': 'I',\n                '\\u1E2C': 'I',\n                '\\u0197': 'I',\n                '\\u24BF': 'J',\n                '\\uFF2A': 'J',\n                '\\u0134': 'J',\n                '\\u0248': 'J',\n                '\\u24C0': 'K',\n                '\\uFF2B': 'K',\n                '\\u1E30': 'K',\n                '\\u01E8': 'K',\n                '\\u1E32': 'K',\n                '\\u0136': 'K',\n                '\\u1E34': 'K',\n                '\\u0198': 'K',\n                '\\u2C69': 'K',\n                '\\uA740': 'K',\n                '\\uA742': 'K',\n                '\\uA744': 'K',\n                '\\uA7A2': 'K',\n                '\\u24C1': 'L',\n                '\\uFF2C': 'L',\n                '\\u013F': 'L',\n                '\\u0139': 'L',\n                '\\u013D': 'L',\n                '\\u1E36': 'L',\n                '\\u1E38': 'L',\n                '\\u013B': 'L',\n                '\\u1E3C': 'L',\n                '\\u1E3A': 'L',\n                '\\u0141': 'L',\n                '\\u023D': 'L',\n                '\\u2C62': 'L',\n                '\\u2C60': 'L',\n                '\\uA748': 'L',\n                '\\uA746': 'L',\n                '\\uA780': 'L',\n                '\\u01C7': 'LJ',\n                '\\u01C8': 'Lj',\n                '\\u24C2': 'M',\n                '\\uFF2D': 'M',\n                '\\u1E3E': 'M',\n                '\\u1E40': 'M',\n                '\\u1E42': 'M',\n                '\\u2C6E': 'M',\n                '\\u019C': 'M',\n                '\\u24C3': 'N',\n                '\\uFF2E': 'N',\n                '\\u01F8': 'N',\n                '\\u0143': 'N',\n                '\\u00D1': 'N',\n                '\\u1E44': 'N',\n                '\\u0147': 'N',\n                '\\u1E46': 'N',\n                '\\u0145': 'N',\n                '\\u1E4A': 'N',\n                '\\u1E48': 'N',\n                '\\u0220': 'N',\n                '\\u019D': 'N',\n                '\\uA790': 'N',\n                '\\uA7A4': 'N',\n                '\\u01CA': 'NJ',\n                '\\u01CB': 'Nj',\n                '\\u24C4': 'O',\n                '\\uFF2F': 'O',\n                '\\u00D2': 'O',\n                '\\u00D3': 'O',\n                '\\u00D4': 'O',\n                '\\u1ED2': 'O',\n                '\\u1ED0': 'O',\n                '\\u1ED6': 'O',\n                '\\u1ED4': 'O',\n                '\\u00D5': 'O',\n                '\\u1E4C': 'O',\n                '\\u022C': 'O',\n                '\\u1E4E': 'O',\n                '\\u014C': 'O',\n                '\\u1E50': 'O',\n                '\\u1E52': 'O',\n                '\\u014E': 'O',\n                '\\u022E': 'O',\n                '\\u0230': 'O',\n                '\\u00D6': 'O',\n                '\\u022A': 'O',\n                '\\u1ECE': 'O',\n                '\\u0150': 'O',\n                '\\u01D1': 'O',\n                '\\u020C': 'O',\n                '\\u020E': 'O',\n                '\\u01A0': 'O',\n                '\\u1EDC': 'O',\n                '\\u1EDA': 'O',\n                '\\u1EE0': 'O',\n                '\\u1EDE': 'O',\n                '\\u1EE2': 'O',\n                '\\u1ECC': 'O',\n                '\\u1ED8': 'O',\n                '\\u01EA': 'O',\n                '\\u01EC': 'O',\n                '\\u00D8': 'O',\n                '\\u01FE': 'O',\n                '\\u0186': 'O',\n                '\\u019F': 'O',\n                '\\uA74A': 'O',\n                '\\uA74C': 'O',\n                '\\u01A2': 'OI',\n                '\\uA74E': 'OO',\n                '\\u0222': 'OU',\n                '\\u24C5': 'P',\n                '\\uFF30': 'P',\n                '\\u1E54': 'P',\n                '\\u1E56': 'P',\n                '\\u01A4': 'P',\n                '\\u2C63': 'P',\n                '\\uA750': 'P',\n                '\\uA752': 'P',\n                '\\uA754': 'P',\n                '\\u24C6': 'Q',\n                '\\uFF31': 'Q',\n                '\\uA756': 'Q',\n                '\\uA758': 'Q',\n                '\\u024A': 'Q',\n                '\\u24C7': 'R',\n                '\\uFF32': 'R',\n                '\\u0154': 'R',\n                '\\u1E58': 'R',\n                '\\u0158': 'R',\n                '\\u0210': 'R',\n                '\\u0212': 'R',\n                '\\u1E5A': 'R',\n                '\\u1E5C': 'R',\n                '\\u0156': 'R',\n                '\\u1E5E': 'R',\n                '\\u024C': 'R',\n                '\\u2C64': 'R',\n                '\\uA75A': 'R',\n                '\\uA7A6': 'R',\n                '\\uA782': 'R',\n                '\\u24C8': 'S',\n                '\\uFF33': 'S',\n                '\\u1E9E': 'S',\n                '\\u015A': 'S',\n                '\\u1E64': 'S',\n                '\\u015C': 'S',\n                '\\u1E60': 'S',\n                '\\u0160': 'S',\n                '\\u1E66': 'S',\n                '\\u1E62': 'S',\n                '\\u1E68': 'S',\n                '\\u0218': 'S',\n                '\\u015E': 'S',\n                '\\u2C7E': 'S',\n                '\\uA7A8': 'S',\n                '\\uA784': 'S',\n                '\\u24C9': 'T',\n                '\\uFF34': 'T',\n                '\\u1E6A': 'T',\n                '\\u0164': 'T',\n                '\\u1E6C': 'T',\n                '\\u021A': 'T',\n                '\\u0162': 'T',\n                '\\u1E70': 'T',\n                '\\u1E6E': 'T',\n                '\\u0166': 'T',\n                '\\u01AC': 'T',\n                '\\u01AE': 'T',\n                '\\u023E': 'T',\n                '\\uA786': 'T',\n                '\\uA728': 'TZ',\n                '\\u24CA': 'U',\n                '\\uFF35': 'U',\n                '\\u00D9': 'U',\n                '\\u00DA': 'U',\n                '\\u00DB': 'U',\n                '\\u0168': 'U',\n                '\\u1E78': 'U',\n                '\\u016A': 'U',\n                '\\u1E7A': 'U',\n                '\\u016C': 'U',\n                '\\u00DC': 'U',\n                '\\u01DB': 'U',\n                '\\u01D7': 'U',\n                '\\u01D5': 'U',\n                '\\u01D9': 'U',\n                '\\u1EE6': 'U',\n                '\\u016E': 'U',\n                '\\u0170': 'U',\n                '\\u01D3': 'U',\n                '\\u0214': 'U',\n                '\\u0216': 'U',\n                '\\u01AF': 'U',\n                '\\u1EEA': 'U',\n                '\\u1EE8': 'U',\n                '\\u1EEE': 'U',\n                '\\u1EEC': 'U',\n                '\\u1EF0': 'U',\n                '\\u1EE4': 'U',\n                '\\u1E72': 'U',\n                '\\u0172': 'U',\n                '\\u1E76': 'U',\n                '\\u1E74': 'U',\n                '\\u0244': 'U',\n                '\\u24CB': 'V',\n                '\\uFF36': 'V',\n                '\\u1E7C': 'V',\n                '\\u1E7E': 'V',\n                '\\u01B2': 'V',\n                '\\uA75E': 'V',\n                '\\u0245': 'V',\n                '\\uA760': 'VY',\n                '\\u24CC': 'W',\n                '\\uFF37': 'W',\n                '\\u1E80': 'W',\n                '\\u1E82': 'W',\n                '\\u0174': 'W',\n                '\\u1E86': 'W',\n                '\\u1E84': 'W',\n                '\\u1E88': 'W',\n                '\\u2C72': 'W',\n                '\\u24CD': 'X',\n                '\\uFF38': 'X',\n                '\\u1E8A': 'X',\n                '\\u1E8C': 'X',\n                '\\u24CE': 'Y',\n                '\\uFF39': 'Y',\n                '\\u1EF2': 'Y',\n                '\\u00DD': 'Y',\n                '\\u0176': 'Y',\n                '\\u1EF8': 'Y',\n                '\\u0232': 'Y',\n                '\\u1E8E': 'Y',\n                '\\u0178': 'Y',\n                '\\u1EF6': 'Y',\n                '\\u1EF4': 'Y',\n                '\\u01B3': 'Y',\n                '\\u024E': 'Y',\n                '\\u1EFE': 'Y',\n                '\\u24CF': 'Z',\n                '\\uFF3A': 'Z',\n                '\\u0179': 'Z',\n                '\\u1E90': 'Z',\n                '\\u017B': 'Z',\n                '\\u017D': 'Z',\n                '\\u1E92': 'Z',\n                '\\u1E94': 'Z',\n                '\\u01B5': 'Z',\n                '\\u0224': 'Z',\n                '\\u2C7F': 'Z',\n                '\\u2C6B': 'Z',\n                '\\uA762': 'Z',\n                '\\u24D0': 'a',\n                '\\uFF41': 'a',\n                '\\u1E9A': 'a',\n                '\\u00E0': 'a',\n                '\\u00E1': 'a',\n                '\\u00E2': 'a',\n                '\\u1EA7': 'a',\n                '\\u1EA5': 'a',\n                '\\u1EAB': 'a',\n                '\\u1EA9': 'a',\n                '\\u00E3': 'a',\n                '\\u0101': 'a',\n                '\\u0103': 'a',\n                '\\u1EB1': 'a',\n                '\\u1EAF': 'a',\n                '\\u1EB5': 'a',\n                '\\u1EB3': 'a',\n                '\\u0227': 'a',\n                '\\u01E1': 'a',\n                '\\u00E4': 'a',\n                '\\u01DF': 'a',\n                '\\u1EA3': 'a',\n                '\\u00E5': 'a',\n                '\\u01FB': 'a',\n                '\\u01CE': 'a',\n                '\\u0201': 'a',\n                '\\u0203': 'a',\n                '\\u1EA1': 'a',\n                '\\u1EAD': 'a',\n                '\\u1EB7': 'a',\n                '\\u1E01': 'a',\n                '\\u0105': 'a',\n                '\\u2C65': 'a',\n                '\\u0250': 'a',\n                '\\uA733': 'aa',\n                '\\u00E6': 'ae',\n                '\\u01FD': 'ae',\n                '\\u01E3': 'ae',\n                '\\uA735': 'ao',\n                '\\uA737': 'au',\n                '\\uA739': 'av',\n                '\\uA73B': 'av',\n                '\\uA73D': 'ay',\n                '\\u24D1': 'b',\n                '\\uFF42': 'b',\n                '\\u1E03': 'b',\n                '\\u1E05': 'b',\n                '\\u1E07': 'b',\n                '\\u0180': 'b',\n                '\\u0183': 'b',\n                '\\u0253': 'b',\n                '\\u24D2': 'c',\n                '\\uFF43': 'c',\n                '\\u0107': 'c',\n                '\\u0109': 'c',\n                '\\u010B': 'c',\n                '\\u010D': 'c',\n                '\\u00E7': 'c',\n                '\\u1E09': 'c',\n                '\\u0188': 'c',\n                '\\u023C': 'c',\n                '\\uA73F': 'c',\n                '\\u2184': 'c',\n                '\\u24D3': 'd',\n                '\\uFF44': 'd',\n                '\\u1E0B': 'd',\n                '\\u010F': 'd',\n                '\\u1E0D': 'd',\n                '\\u1E11': 'd',\n                '\\u1E13': 'd',\n                '\\u1E0F': 'd',\n                '\\u0111': 'd',\n                '\\u018C': 'd',\n                '\\u0256': 'd',\n                '\\u0257': 'd',\n                '\\uA77A': 'd',\n                '\\u01F3': 'dz',\n                '\\u01C6': 'dz',\n                '\\u24D4': 'e',\n                '\\uFF45': 'e',\n                '\\u00E8': 'e',\n                '\\u00E9': 'e',\n                '\\u00EA': 'e',\n                '\\u1EC1': 'e',\n                '\\u1EBF': 'e',\n                '\\u1EC5': 'e',\n                '\\u1EC3': 'e',\n                '\\u1EBD': 'e',\n                '\\u0113': 'e',\n                '\\u1E15': 'e',\n                '\\u1E17': 'e',\n                '\\u0115': 'e',\n                '\\u0117': 'e',\n                '\\u00EB': 'e',\n                '\\u1EBB': 'e',\n                '\\u011B': 'e',\n                '\\u0205': 'e',\n                '\\u0207': 'e',\n                '\\u1EB9': 'e',\n                '\\u1EC7': 'e',\n                '\\u0229': 'e',\n                '\\u1E1D': 'e',\n                '\\u0119': 'e',\n                '\\u1E19': 'e',\n                '\\u1E1B': 'e',\n                '\\u0247': 'e',\n                '\\u025B': 'e',\n                '\\u01DD': 'e',\n                '\\u24D5': 'f',\n                '\\uFF46': 'f',\n                '\\u1E1F': 'f',\n                '\\u0192': 'f',\n                '\\uA77C': 'f',\n                '\\u24D6': 'g',\n                '\\uFF47': 'g',\n                '\\u01F5': 'g',\n                '\\u011D': 'g',\n                '\\u1E21': 'g',\n                '\\u011F': 'g',\n                '\\u0121': 'g',\n                '\\u01E7': 'g',\n                '\\u0123': 'g',\n                '\\u01E5': 'g',\n                '\\u0260': 'g',\n                '\\uA7A1': 'g',\n                '\\u1D79': 'g',\n                '\\uA77F': 'g',\n                '\\u24D7': 'h',\n                '\\uFF48': 'h',\n                '\\u0125': 'h',\n                '\\u1E23': 'h',\n                '\\u1E27': 'h',\n                '\\u021F': 'h',\n                '\\u1E25': 'h',\n                '\\u1E29': 'h',\n                '\\u1E2B': 'h',\n                '\\u1E96': 'h',\n                '\\u0127': 'h',\n                '\\u2C68': 'h',\n                '\\u2C76': 'h',\n                '\\u0265': 'h',\n                '\\u0195': 'hv',\n                '\\u24D8': 'i',\n                '\\uFF49': 'i',\n                '\\u00EC': 'i',\n                '\\u00ED': 'i',\n                '\\u00EE': 'i',\n                '\\u0129': 'i',\n                '\\u012B': 'i',\n                '\\u012D': 'i',\n                '\\u00EF': 'i',\n                '\\u1E2F': 'i',\n                '\\u1EC9': 'i',\n                '\\u01D0': 'i',\n                '\\u0209': 'i',\n                '\\u020B': 'i',\n                '\\u1ECB': 'i',\n                '\\u012F': 'i',\n                '\\u1E2D': 'i',\n                '\\u0268': 'i',\n                '\\u0131': 'i',\n                '\\u24D9': 'j',\n                '\\uFF4A': 'j',\n                '\\u0135': 'j',\n                '\\u01F0': 'j',\n                '\\u0249': 'j',\n                '\\u24DA': 'k',\n                '\\uFF4B': 'k',\n                '\\u1E31': 'k',\n                '\\u01E9': 'k',\n                '\\u1E33': 'k',\n                '\\u0137': 'k',\n                '\\u1E35': 'k',\n                '\\u0199': 'k',\n                '\\u2C6A': 'k',\n                '\\uA741': 'k',\n                '\\uA743': 'k',\n                '\\uA745': 'k',\n                '\\uA7A3': 'k',\n                '\\u24DB': 'l',\n                '\\uFF4C': 'l',\n                '\\u0140': 'l',\n                '\\u013A': 'l',\n                '\\u013E': 'l',\n                '\\u1E37': 'l',\n                '\\u1E39': 'l',\n                '\\u013C': 'l',\n                '\\u1E3D': 'l',\n                '\\u1E3B': 'l',\n                '\\u017F': 'l',\n                '\\u0142': 'l',\n                '\\u019A': 'l',\n                '\\u026B': 'l',\n                '\\u2C61': 'l',\n                '\\uA749': 'l',\n                '\\uA781': 'l',\n                '\\uA747': 'l',\n                '\\u01C9': 'lj',\n                '\\u24DC': 'm',\n                '\\uFF4D': 'm',\n                '\\u1E3F': 'm',\n                '\\u1E41': 'm',\n                '\\u1E43': 'm',\n                '\\u0271': 'm',\n                '\\u026F': 'm',\n                '\\u24DD': 'n',\n                '\\uFF4E': 'n',\n                '\\u01F9': 'n',\n                '\\u0144': 'n',\n                '\\u00F1': 'n',\n                '\\u1E45': 'n',\n                '\\u0148': 'n',\n                '\\u1E47': 'n',\n                '\\u0146': 'n',\n                '\\u1E4B': 'n',\n                '\\u1E49': 'n',\n                '\\u019E': 'n',\n                '\\u0272': 'n',\n                '\\u0149': 'n',\n                '\\uA791': 'n',\n                '\\uA7A5': 'n',\n                '\\u01CC': 'nj',\n                '\\u24DE': 'o',\n                '\\uFF4F': 'o',\n                '\\u00F2': 'o',\n                '\\u00F3': 'o',\n                '\\u00F4': 'o',\n                '\\u1ED3': 'o',\n                '\\u1ED1': 'o',\n                '\\u1ED7': 'o',\n                '\\u1ED5': 'o',\n                '\\u00F5': 'o',\n                '\\u1E4D': 'o',\n                '\\u022D': 'o',\n                '\\u1E4F': 'o',\n                '\\u014D': 'o',\n                '\\u1E51': 'o',\n                '\\u1E53': 'o',\n                '\\u014F': 'o',\n                '\\u022F': 'o',\n                '\\u0231': 'o',\n                '\\u00F6': 'o',\n                '\\u022B': 'o',\n                '\\u1ECF': 'o',\n                '\\u0151': 'o',\n                '\\u01D2': 'o',\n                '\\u020D': 'o',\n                '\\u020F': 'o',\n                '\\u01A1': 'o',\n                '\\u1EDD': 'o',\n                '\\u1EDB': 'o',\n                '\\u1EE1': 'o',\n                '\\u1EDF': 'o',\n                '\\u1EE3': 'o',\n                '\\u1ECD': 'o',\n                '\\u1ED9': 'o',\n                '\\u01EB': 'o',\n                '\\u01ED': 'o',\n                '\\u00F8': 'o',\n                '\\u01FF': 'o',\n                '\\u0254': 'o',\n                '\\uA74B': 'o',\n                '\\uA74D': 'o',\n                '\\u0275': 'o',\n                '\\u01A3': 'oi',\n                '\\u0223': 'ou',\n                '\\uA74F': 'oo',\n                '\\u24DF': 'p',\n                '\\uFF50': 'p',\n                '\\u1E55': 'p',\n                '\\u1E57': 'p',\n                '\\u01A5': 'p',\n                '\\u1D7D': 'p',\n                '\\uA751': 'p',\n                '\\uA753': 'p',\n                '\\uA755': 'p',\n                '\\u24E0': 'q',\n                '\\uFF51': 'q',\n                '\\u024B': 'q',\n                '\\uA757': 'q',\n                '\\uA759': 'q',\n                '\\u24E1': 'r',\n                '\\uFF52': 'r',\n                '\\u0155': 'r',\n                '\\u1E59': 'r',\n                '\\u0159': 'r',\n                '\\u0211': 'r',\n                '\\u0213': 'r',\n                '\\u1E5B': 'r',\n                '\\u1E5D': 'r',\n                '\\u0157': 'r',\n                '\\u1E5F': 'r',\n                '\\u024D': 'r',\n                '\\u027D': 'r',\n                '\\uA75B': 'r',\n                '\\uA7A7': 'r',\n                '\\uA783': 'r',\n                '\\u24E2': 's',\n                '\\uFF53': 's',\n                '\\u00DF': 's',\n                '\\u015B': 's',\n                '\\u1E65': 's',\n                '\\u015D': 's',\n                '\\u1E61': 's',\n                '\\u0161': 's',\n                '\\u1E67': 's',\n                '\\u1E63': 's',\n                '\\u1E69': 's',\n                '\\u0219': 's',\n                '\\u015F': 's',\n                '\\u023F': 's',\n                '\\uA7A9': 's',\n                '\\uA785': 's',\n                '\\u1E9B': 's',\n                '\\u24E3': 't',\n                '\\uFF54': 't',\n                '\\u1E6B': 't',\n                '\\u1E97': 't',\n                '\\u0165': 't',\n                '\\u1E6D': 't',\n                '\\u021B': 't',\n                '\\u0163': 't',\n                '\\u1E71': 't',\n                '\\u1E6F': 't',\n                '\\u0167': 't',\n                '\\u01AD': 't',\n                '\\u0288': 't',\n                '\\u2C66': 't',\n                '\\uA787': 't',\n                '\\uA729': 'tz',\n                '\\u24E4': 'u',\n                '\\uFF55': 'u',\n                '\\u00F9': 'u',\n                '\\u00FA': 'u',\n                '\\u00FB': 'u',\n                '\\u0169': 'u',\n                '\\u1E79': 'u',\n                '\\u016B': 'u',\n                '\\u1E7B': 'u',\n                '\\u016D': 'u',\n                '\\u00FC': 'u',\n                '\\u01DC': 'u',\n                '\\u01D8': 'u',\n                '\\u01D6': 'u',\n                '\\u01DA': 'u',\n                '\\u1EE7': 'u',\n                '\\u016F': 'u',\n                '\\u0171': 'u',\n                '\\u01D4': 'u',\n                '\\u0215': 'u',\n                '\\u0217': 'u',\n                '\\u01B0': 'u',\n                '\\u1EEB': 'u',\n                '\\u1EE9': 'u',\n                '\\u1EEF': 'u',\n                '\\u1EED': 'u',\n                '\\u1EF1': 'u',\n                '\\u1EE5': 'u',\n                '\\u1E73': 'u',\n                '\\u0173': 'u',\n                '\\u1E77': 'u',\n                '\\u1E75': 'u',\n                '\\u0289': 'u',\n                '\\u24E5': 'v',\n                '\\uFF56': 'v',\n                '\\u1E7D': 'v',\n                '\\u1E7F': 'v',\n                '\\u028B': 'v',\n                '\\uA75F': 'v',\n                '\\u028C': 'v',\n                '\\uA761': 'vy',\n                '\\u24E6': 'w',\n                '\\uFF57': 'w',\n                '\\u1E81': 'w',\n                '\\u1E83': 'w',\n                '\\u0175': 'w',\n                '\\u1E87': 'w',\n                '\\u1E85': 'w',\n                '\\u1E98': 'w',\n                '\\u1E89': 'w',\n                '\\u2C73': 'w',\n                '\\u24E7': 'x',\n                '\\uFF58': 'x',\n                '\\u1E8B': 'x',\n                '\\u1E8D': 'x',\n                '\\u24E8': 'y',\n                '\\uFF59': 'y',\n                '\\u1EF3': 'y',\n                '\\u00FD': 'y',\n                '\\u0177': 'y',\n                '\\u1EF9': 'y',\n                '\\u0233': 'y',\n                '\\u1E8F': 'y',\n                '\\u00FF': 'y',\n                '\\u1EF7': 'y',\n                '\\u1E99': 'y',\n                '\\u1EF5': 'y',\n                '\\u01B4': 'y',\n                '\\u024F': 'y',\n                '\\u1EFF': 'y',\n                '\\u24E9': 'z',\n                '\\uFF5A': 'z',\n                '\\u017A': 'z',\n                '\\u1E91': 'z',\n                '\\u017C': 'z',\n                '\\u017E': 'z',\n                '\\u1E93': 'z',\n                '\\u1E95': 'z',\n                '\\u01B6': 'z',\n                '\\u0225': 'z',\n                '\\u0240': 'z',\n                '\\u2C6C': 'z',\n                '\\uA763': 'z',\n                '\\u0386': '\\u0391',\n                '\\u0388': '\\u0395',\n                '\\u0389': '\\u0397',\n                '\\u038A': '\\u0399',\n                '\\u03AA': '\\u0399',\n                '\\u038C': '\\u039F',\n                '\\u038E': '\\u03A5',\n                '\\u03AB': '\\u03A5',\n                '\\u038F': '\\u03A9',\n                '\\u03AC': '\\u03B1',\n                '\\u03AD': '\\u03B5',\n                '\\u03AE': '\\u03B7',\n                '\\u03AF': '\\u03B9',\n                '\\u03CA': '\\u03B9',\n                '\\u0390': '\\u03B9',\n                '\\u03CC': '\\u03BF',\n                '\\u03CD': '\\u03C5',\n                '\\u03CB': '\\u03C5',\n                '\\u03B0': '\\u03C5',\n                '\\u03C9': '\\u03C9',\n                '\\u03C2': '\\u03C3'\n            };\n\n            return diacritics;\n        });\n\n        S2.define('select2/data/base',[\n            '../utils'\n        ], function (Utils) {\n            function BaseAdapter ($element, options) {\n                BaseAdapter.__super__.constructor.call(this);\n            }\n\n            Utils.Extend(BaseAdapter, Utils.Observable);\n\n            BaseAdapter.prototype.current = function (callback) {\n                throw new Error('The `current` method must be defined in child classes.');\n            };\n\n            BaseAdapter.prototype.query = function (params, callback) {\n                throw new Error('The `query` method must be defined in child classes.');\n            };\n\n            BaseAdapter.prototype.bind = function (container, $container) {\n                // Can be implemented in subclasses\n            };\n\n            BaseAdapter.prototype.destroy = function () {\n                // Can be implemented in subclasses\n            };\n\n            BaseAdapter.prototype.generateResultId = function (container, data) {\n                var id = container.id + '-result-';\n\n                id += Utils.generateChars(4);\n\n                if (data.id != null) {\n                    id += '-' + data.id.toString();\n                } else {\n                    id += '-' + Utils.generateChars(4);\n                }\n                return id;\n            };\n\n            return BaseAdapter;\n        });\n\n        S2.define('select2/data/select',[\n            './base',\n            '../utils',\n            'jquery'\n        ], function (BaseAdapter, Utils, $) {\n            function SelectAdapter ($element, options) {\n                this.$element = $element;\n                this.options = options;\n\n                SelectAdapter.__super__.constructor.call(this);\n            }\n\n            Utils.Extend(SelectAdapter, BaseAdapter);\n\n            SelectAdapter.prototype.current = function (callback) {\n                var data = [];\n                var self = this;\n\n                this.$element.find(':selected').each(function () {\n                    var $option = $(this);\n\n                    var option = self.item($option);\n\n                    data.push(option);\n                });\n\n                callback(data);\n            };\n\n            SelectAdapter.prototype.select = function (data) {\n                var self = this;\n\n                data.selected = true;\n\n                // If data.element is a DOM node, use it instead\n                if ($(data.element).is('option')) {\n                    data.element.selected = true;\n\n                    this.$element.trigger('change');\n\n                    return;\n                }\n\n                if (this.$element.prop('multiple')) {\n                    this.current(function (currentData) {\n                        var val = [];\n\n                        data = [data];\n                        data.push.apply(data, currentData);\n\n                        for (var d = 0; d < data.length; d++) {\n                            var id = data[d].id;\n\n                            if ($.inArray(id, val) === -1) {\n                                val.push(id);\n                            }\n                        }\n\n                        self.$element.val(val);\n                        self.$element.trigger('change');\n                    });\n                } else {\n                    var val = data.id;\n\n                    this.$element.val(val);\n                    this.$element.trigger('change');\n                }\n            };\n\n            SelectAdapter.prototype.unselect = function (data) {\n                var self = this;\n\n                if (!this.$element.prop('multiple')) {\n                    return;\n                }\n\n                data.selected = false;\n\n                if ($(data.element).is('option')) {\n                    data.element.selected = false;\n\n                    this.$element.trigger('change');\n\n                    return;\n                }\n\n                this.current(function (currentData) {\n                    var val = [];\n\n                    for (var d = 0; d < currentData.length; d++) {\n                        var id = currentData[d].id;\n\n                        if (id !== data.id && $.inArray(id, val) === -1) {\n                            val.push(id);\n                        }\n                    }\n\n                    self.$element.val(val);\n\n                    self.$element.trigger('change');\n                });\n            };\n\n            SelectAdapter.prototype.bind = function (container, $container) {\n                var self = this;\n\n                this.container = container;\n\n                container.on('select', function (params) {\n                    self.select(params.data);\n                });\n\n                container.on('unselect', function (params) {\n                    self.unselect(params.data);\n                });\n            };\n\n            SelectAdapter.prototype.destroy = function () {\n                // Remove anything added to child elements\n                this.$element.find('*').each(function () {\n                    // Remove any custom data set by Select2\n                    $.removeData(this, 'data');\n                });\n            };\n\n            SelectAdapter.prototype.query = function (params, callback) {\n                var data = [];\n                var self = this;\n\n                var $options = this.$element.children();\n\n                $options.each(function () {\n                    var $option = $(this);\n\n                    if (!$option.is('option') && !$option.is('optgroup')) {\n                        return;\n                    }\n\n                    var option = self.item($option);\n\n                    var matches = self.matches(params, option);\n\n                    if (matches !== null) {\n                        data.push(matches);\n                    }\n                });\n\n                callback({\n                    results: data\n                });\n            };\n\n            SelectAdapter.prototype.addOptions = function ($options) {\n                Utils.appendMany(this.$element, $options);\n            };\n\n            SelectAdapter.prototype.option = function (data) {\n                var option;\n\n                if (data.children) {\n                    option = document.createElement('optgroup');\n                    option.label = data.text;\n                } else {\n                    option = document.createElement('option');\n\n                    if (option.textContent !== undefined) {\n                        option.textContent = data.text;\n                    } else {\n                        option.innerText = data.text;\n                    }\n                }\n\n                if (data.id !== undefined) {\n                    option.value = data.id;\n                }\n\n                if (data.disabled) {\n                    option.disabled = true;\n                }\n\n                if (data.selected) {\n                    option.selected = true;\n                }\n\n                if (data.title) {\n                    option.title = data.title;\n                }\n\n                var $option = $(option);\n\n                var normalizedData = this._normalizeItem(data);\n                normalizedData.element = option;\n\n                // Override the option's data with the combined data\n                $.data(option, 'data', normalizedData);\n\n                return $option;\n            };\n\n            SelectAdapter.prototype.item = function ($option) {\n                var data = {};\n\n                data = $.data($option[0], 'data');\n\n                if (data != null) {\n                    return data;\n                }\n\n                if ($option.is('option')) {\n                    data = {\n                        id: $option.val(),\n                        text: $option.text(),\n                        disabled: $option.prop('disabled'),\n                        selected: $option.prop('selected'),\n                        title: $option.prop('title')\n                    };\n                } else if ($option.is('optgroup')) {\n                    data = {\n                        text: $option.prop('label'),\n                        children: [],\n                        title: $option.prop('title')\n                    };\n\n                    var $children = $option.children('option');\n                    var children = [];\n\n                    for (var c = 0; c < $children.length; c++) {\n                        var $child = $($children[c]);\n\n                        var child = this.item($child);\n\n                        children.push(child);\n                    }\n\n                    data.children = children;\n                }\n\n                data = this._normalizeItem(data);\n                data.element = $option[0];\n\n                $.data($option[0], 'data', data);\n\n                return data;\n            };\n\n            SelectAdapter.prototype._normalizeItem = function (item) {\n                if (!$.isPlainObject(item)) {\n                    item = {\n                        id: item,\n                        text: item\n                    };\n                }\n\n                item = $.extend({}, {\n                    text: ''\n                }, item);\n\n                var defaults = {\n                    selected: false,\n                    disabled: false\n                };\n\n                if (item.id != null) {\n                    item.id = item.id.toString();\n                }\n\n                if (item.text != null) {\n                    item.text = item.text.toString();\n                }\n\n                if (item._resultId == null && item.id && this.container != null) {\n                    item._resultId = this.generateResultId(this.container, item);\n                }\n\n                return $.extend({}, defaults, item);\n            };\n\n            SelectAdapter.prototype.matches = function (params, data) {\n                var matcher = this.options.get('matcher');\n\n                return matcher(params, data);\n            };\n\n            return SelectAdapter;\n        });\n\n        S2.define('select2/data/array',[\n            './select',\n            '../utils',\n            'jquery'\n        ], function (SelectAdapter, Utils, $) {\n            function ArrayAdapter ($element, options) {\n                var data = options.get('data') || [];\n\n                ArrayAdapter.__super__.constructor.call(this, $element, options);\n\n                this.addOptions(this.convertToOptions(data));\n            }\n\n            Utils.Extend(ArrayAdapter, SelectAdapter);\n\n            ArrayAdapter.prototype.select = function (data) {\n                var $option = this.$element.find('option').filter(function (i, elm) {\n                    return elm.value == data.id.toString();\n                });\n\n                if ($option.length === 0) {\n                    $option = this.option(data);\n\n                    this.addOptions($option);\n                }\n\n                ArrayAdapter.__super__.select.call(this, data);\n            };\n\n            ArrayAdapter.prototype.convertToOptions = function (data) {\n                var self = this;\n\n                var $existing = this.$element.find('option');\n                var existingIds = $existing.map(function () {\n                    return self.item($(this)).id;\n                }).get();\n\n                var $options = [];\n\n                // Filter out all items except for the one passed in the argument\n                function onlyItem (item) {\n                    return function () {\n                        return $(this).val() == item.id;\n                    };\n                }\n\n                for (var d = 0; d < data.length; d++) {\n                    var item = this._normalizeItem(data[d]);\n\n                    // Skip items which were pre-loaded, only merge the data\n                    if ($.inArray(item.id, existingIds) >= 0) {\n                        var $existingOption = $existing.filter(onlyItem(item));\n\n                        var existingData = this.item($existingOption);\n                        var newData = $.extend(true, {}, item, existingData);\n\n                        var $newOption = this.option(newData);\n\n                        $existingOption.replaceWith($newOption);\n\n                        continue;\n                    }\n\n                    var $option = this.option(item);\n\n                    if (item.children) {\n                        var $children = this.convertToOptions(item.children);\n\n                        Utils.appendMany($option, $children);\n                    }\n\n                    $options.push($option);\n                }\n\n                return $options;\n            };\n\n            return ArrayAdapter;\n        });\n\n        S2.define('select2/data/ajax',[\n            './array',\n            '../utils',\n            'jquery'\n        ], function (ArrayAdapter, Utils, $) {\n            function AjaxAdapter ($element, options) {\n                this.ajaxOptions = this._applyDefaults(options.get('ajax'));\n\n                if (this.ajaxOptions.processResults != null) {\n                    this.processResults = this.ajaxOptions.processResults;\n                }\n\n                AjaxAdapter.__super__.constructor.call(this, $element, options);\n            }\n\n            Utils.Extend(AjaxAdapter, ArrayAdapter);\n\n            AjaxAdapter.prototype._applyDefaults = function (options) {\n                var defaults = {\n                    data: function (params) {\n                        return $.extend({}, params, {\n                            q: params.term\n                        });\n                    },\n                    transport: function (params, success, failure) {\n                        var $request = $.ajax(params);\n\n                        $request.then(success);\n                        $request.fail(failure);\n\n                        return $request;\n                    }\n                };\n\n                return $.extend({}, defaults, options, true);\n            };\n\n            AjaxAdapter.prototype.processResults = function (results) {\n                return results;\n            };\n\n            AjaxAdapter.prototype.query = function (params, callback) {\n                var matches = [];\n                var self = this;\n\n                if (this._request != null) {\n                    // JSONP requests cannot always be aborted\n                    if ($.isFunction(this._request.abort)) {\n                        this._request.abort();\n                    }\n\n                    this._request = null;\n                }\n\n                var options = $.extend({\n                    type: 'GET'\n                }, this.ajaxOptions);\n\n                if (typeof options.url === 'function') {\n                    options.url = options.url.call(this.$element, params);\n                }\n\n                if (typeof options.data === 'function') {\n                    options.data = options.data.call(this.$element, params);\n                }\n\n                function request () {\n                    var $request = options.transport(options, function (data) {\n                        var results = self.processResults(data, params);\n\n                        if (self.options.get('debug') && window.console && console.error) {\n                            // Check to make sure that the response included a `results` key.\n                            if (!results || !results.results || !$.isArray(results.results)) {\n                                console.error(\n                                    'Select2: The AJAX results did not return an array in the ' +\n                                    '`results` key of the response.'\n                                );\n                            }\n                        }\n\n                        callback(results);\n                    }, function () {\n                        // Attempt to detect if a request was aborted\n                        // Only works if the transport exposes a status property\n                        if ($request.status && $request.status === '0') {\n                            return;\n                        }\n\n                        self.trigger('results:message', {\n                            message: 'errorLoading'\n                        });\n                    });\n\n                    self._request = $request;\n                }\n\n                if (this.ajaxOptions.delay && params.term != null) {\n                    if (this._queryTimeout) {\n                        window.clearTimeout(this._queryTimeout);\n                    }\n\n                    this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);\n                } else {\n                    request();\n                }\n            };\n\n            return AjaxAdapter;\n        });\n\n        S2.define('select2/data/tags',[\n            'jquery'\n        ], function ($) {\n            function Tags (decorated, $element, options) {\n                var tags = options.get('tags');\n\n                var createTag = options.get('createTag');\n\n                if (createTag !== undefined) {\n                    this.createTag = createTag;\n                }\n\n                var insertTag = options.get('insertTag');\n\n                if (insertTag !== undefined) {\n                    this.insertTag = insertTag;\n                }\n\n                decorated.call(this, $element, options);\n\n                if ($.isArray(tags)) {\n                    for (var t = 0; t < tags.length; t++) {\n                        var tag = tags[t];\n                        var item = this._normalizeItem(tag);\n\n                        var $option = this.option(item);\n\n                        this.$element.append($option);\n                    }\n                }\n            }\n\n            Tags.prototype.query = function (decorated, params, callback) {\n                var self = this;\n\n                this._removeOldTags();\n\n                if (params.term == null || params.page != null) {\n                    decorated.call(this, params, callback);\n                    return;\n                }\n\n                function wrapper (obj, child) {\n                    var data = obj.results;\n\n                    for (var i = 0; i < data.length; i++) {\n                        var option = data[i];\n\n                        var checkChildren = (\n                            option.children != null &&\n                            !wrapper({\n                                results: option.children\n                            }, true)\n                        );\n\n                        var optionText = (option.text || '').toUpperCase();\n                        var paramsTerm = (params.term || '').toUpperCase();\n\n                        var checkText = optionText === paramsTerm;\n\n                        if (checkText || checkChildren) {\n                            if (child) {\n                                return false;\n                            }\n\n                            obj.data = data;\n                            callback(obj);\n\n                            return;\n                        }\n                    }\n\n                    if (child) {\n                        return true;\n                    }\n\n                    var tag = self.createTag(params);\n\n                    if (tag != null) {\n                        var $option = self.option(tag);\n                        $option.attr('data-select2-tag', true);\n\n                        self.addOptions([$option]);\n\n                        self.insertTag(data, tag);\n                    }\n\n                    obj.results = data;\n\n                    callback(obj);\n                }\n\n                decorated.call(this, params, wrapper);\n            };\n\n            Tags.prototype.createTag = function (decorated, params) {\n                var term = $.trim(params.term);\n\n                if (term === '') {\n                    return null;\n                }\n\n                return {\n                    id: term,\n                    text: term\n                };\n            };\n\n            Tags.prototype.insertTag = function (_, data, tag) {\n                data.unshift(tag);\n            };\n\n            Tags.prototype._removeOldTags = function (_) {\n                var tag = this._lastTag;\n\n                var $options = this.$element.find('option[data-select2-tag]');\n\n                $options.each(function () {\n                    if (this.selected) {\n                        return;\n                    }\n\n                    $(this).remove();\n                });\n            };\n\n            return Tags;\n        });\n\n        S2.define('select2/data/tokenizer',[\n            'jquery'\n        ], function ($) {\n            function Tokenizer (decorated, $element, options) {\n                var tokenizer = options.get('tokenizer');\n\n                if (tokenizer !== undefined) {\n                    this.tokenizer = tokenizer;\n                }\n\n                decorated.call(this, $element, options);\n            }\n\n            Tokenizer.prototype.bind = function (decorated, container, $container) {\n                decorated.call(this, container, $container);\n\n                this.$search =  container.dropdown.$search || container.selection.$search ||\n                                $container.find('.select2-search__field');\n            };\n\n            Tokenizer.prototype.query = function (decorated, params, callback) {\n                var self = this;\n\n                function createAndSelect (data) {\n                    // Normalize the data object so we can use it for checks\n                    var item = self._normalizeItem(data);\n\n                    // Check if the data object already exists as a tag\n                    // Select it if it doesn't\n                    var $existingOptions = self.$element.find('option').filter(function () {\n                        return $(this).val() === item.id;\n                    });\n\n                    // If an existing option wasn't found for it, create the option\n                    if (!$existingOptions.length) {\n                        var $option = self.option(item);\n                        $option.attr('data-select2-tag', true);\n\n                        self._removeOldTags();\n                        self.addOptions([$option]);\n                    }\n\n                    // Select the item, now that we know there is an option for it\n                    select(item);\n                }\n\n                function select (data) {\n                    self.trigger('select', {\n                        data: data\n                    });\n                }\n\n                params.term = params.term || '';\n\n                var tokenData = this.tokenizer(params, this.options, createAndSelect);\n\n                if (tokenData.term !== params.term) {\n                    // Replace the search term if we have the search box\n                    if (this.$search.length) {\n                        this.$search.val(tokenData.term);\n                        this.$search.focus();\n                    }\n\n                    params.term = tokenData.term;\n                }\n\n                decorated.call(this, params, callback);\n            };\n\n            Tokenizer.prototype.tokenizer = function (_, params, options, callback) {\n                var separators = options.get('tokenSeparators') || [];\n                var term = params.term;\n                var i = 0;\n\n                var createTag = this.createTag || function (params) {\n                    return {\n                        id: params.term,\n                        text: params.term\n                    };\n                };\n\n                while (i < term.length) {\n                    var termChar = term[i];\n\n                    if ($.inArray(termChar, separators) === -1) {\n                        i++;\n\n                        continue;\n                    }\n\n                    var part = term.substr(0, i);\n                    var partParams = $.extend({}, params, {\n                        term: part\n                    });\n\n                    var data = createTag(partParams);\n\n                    if (data == null) {\n                        i++;\n                        continue;\n                    }\n\n                    callback(data);\n\n                    // Reset the term to not include the tokenized portion\n                    term = term.substr(i + 1) || '';\n                    i = 0;\n                }\n\n                return {\n                    term: term\n                };\n            };\n\n            return Tokenizer;\n        });\n\n        S2.define('select2/data/minimumInputLength',[\n\n        ], function () {\n            function MinimumInputLength (decorated, $e, options) {\n                this.minimumInputLength = options.get('minimumInputLength');\n\n                decorated.call(this, $e, options);\n            }\n\n            MinimumInputLength.prototype.query = function (decorated, params, callback) {\n                params.term = params.term || '';\n\n                if (params.term.length < this.minimumInputLength) {\n                    this.trigger('results:message', {\n                        message: 'inputTooShort',\n                        args: {\n                            minimum: this.minimumInputLength,\n                            input: params.term,\n                            params: params\n                        }\n                    });\n\n                    return;\n                }\n\n                decorated.call(this, params, callback);\n            };\n\n            return MinimumInputLength;\n        });\n\n        S2.define('select2/data/maximumInputLength',[\n\n        ], function () {\n            function MaximumInputLength (decorated, $e, options) {\n                this.maximumInputLength = options.get('maximumInputLength');\n\n                decorated.call(this, $e, options);\n            }\n\n            MaximumInputLength.prototype.query = function (decorated, params, callback) {\n                params.term = params.term || '';\n\n                if (this.maximumInputLength > 0 &&\n                    params.term.length > this.maximumInputLength) {\n                    this.trigger('results:message', {\n                        message: 'inputTooLong',\n                        args: {\n                            maximum: this.maximumInputLength,\n                            input: params.term,\n                            params: params\n                        }\n                    });\n\n                    return;\n                }\n\n                decorated.call(this, params, callback);\n            };\n\n            return MaximumInputLength;\n        });\n\n        S2.define('select2/data/maximumSelectionLength',[\n\n        ], function (){\n            function MaximumSelectionLength (decorated, $e, options) {\n                this.maximumSelectionLength = options.get('maximumSelectionLength');\n\n                decorated.call(this, $e, options);\n            }\n\n            MaximumSelectionLength.prototype.query =\n                function (decorated, params, callback) {\n                    var self = this;\n\n                    this.current(function (currentData) {\n                        var count = currentData != null ? currentData.length : 0;\n                        if (self.maximumSelectionLength > 0 &&\n                            count >= self.maximumSelectionLength) {\n                            self.trigger('results:message', {\n                                message: 'maximumSelected',\n                                args: {\n                                    maximum: self.maximumSelectionLength\n                                }\n                            });\n                            return;\n                        }\n                        decorated.call(self, params, callback);\n                    });\n                };\n\n            return MaximumSelectionLength;\n        });\n\n        S2.define('select2/dropdown',[\n            'jquery',\n            './utils'\n        ], function ($, Utils) {\n            function Dropdown ($element, options) {\n                this.$element = $element;\n                this.options = options;\n\n                Dropdown.__super__.constructor.call(this);\n            }\n\n            Utils.Extend(Dropdown, Utils.Observable);\n\n            Dropdown.prototype.render = function () {\n                var $dropdown = $(\n                    '<span class=\"select2-dropdown\">' +\n                    '<span class=\"select2-results\"></span>' +\n                    '</span>'\n                );\n\n                $dropdown.attr('dir', this.options.get('dir'));\n\n                this.$dropdown = $dropdown;\n\n                return $dropdown;\n            };\n\n            Dropdown.prototype.bind = function () {\n                // Should be implemented in subclasses\n            };\n\n            Dropdown.prototype.position = function ($dropdown, $container) {\n                // Should be implmented in subclasses\n            };\n\n            Dropdown.prototype.destroy = function () {\n                // Remove the dropdown from the DOM\n                this.$dropdown.remove();\n            };\n\n            return Dropdown;\n        });\n\n        S2.define('select2/dropdown/search',[\n            'jquery',\n            '../utils'\n        ], function ($, Utils) {\n            function Search () { }\n\n            Search.prototype.render = function (decorated) {\n                var $rendered = decorated.call(this);\n\n                var $search = $(\n                    '<span class=\"select2-search select2-search--dropdown\">' +\n                    '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' +\n                    ' autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\"' +\n                    ' spellcheck=\"false\" role=\"textbox\" />' +\n                    '</span>'\n                );\n\n                this.$searchContainer = $search;\n                this.$search = $search.find('input');\n\n                $rendered.prepend($search);\n\n                return $rendered;\n            };\n\n            Search.prototype.bind = function (decorated, container, $container) {\n                var self = this;\n\n                decorated.call(this, container, $container);\n\n                this.$search.on('keydown', function (evt) {\n                    self.trigger('keypress', evt);\n\n                    self._keyUpPrevented = evt.isDefaultPrevented();\n                });\n\n                // Workaround for browsers which do not support the `input` event\n                // This will prevent double-triggering of events for browsers which support\n                // both the `keyup` and `input` events.\n                this.$search.on('input', function (evt) {\n                    // Unbind the duplicated `keyup` event\n                    $(this).off('keyup');\n                });\n\n                this.$search.on('keyup input', function (evt) {\n                    self.handleSearch(evt);\n                });\n\n                container.on('open', function () {\n                    self.$search.attr('tabindex', 0);\n\n                    self.$search.focus();\n\n                    window.setTimeout(function () {\n                        self.$search.focus();\n                    }, 0);\n                });\n\n                container.on('close', function () {\n                    self.$search.attr('tabindex', -1);\n\n                    self.$search.val('');\n                });\n\n                container.on('focus', function () {\n                    if (!container.isOpen()) {\n                        self.$search.focus();\n                    }\n                });\n\n                container.on('results:all', function (params) {\n                    if (params.query.term == null || params.query.term === '') {\n                        var showSearch = self.showSearch(params);\n\n                        if (showSearch) {\n                            self.$searchContainer.removeClass('select2-search--hide');\n                        } else {\n                            self.$searchContainer.addClass('select2-search--hide');\n                        }\n                    }\n                });\n            };\n\n            Search.prototype.handleSearch = function (evt) {\n                if (!this._keyUpPrevented) {\n                    var input = this.$search.val();\n\n                    this.trigger('query', {\n                        term: input\n                    });\n                }\n\n                this._keyUpPrevented = false;\n            };\n\n            Search.prototype.showSearch = function (_, params) {\n                return true;\n            };\n\n            return Search;\n        });\n\n        S2.define('select2/dropdown/hidePlaceholder',[\n\n        ], function () {\n            function HidePlaceholder (decorated, $element, options, dataAdapter) {\n                this.placeholder = this.normalizePlaceholder(options.get('placeholder'));\n\n                decorated.call(this, $element, options, dataAdapter);\n            }\n\n            HidePlaceholder.prototype.append = function (decorated, data) {\n                data.results = this.removePlaceholder(data.results);\n\n                decorated.call(this, data);\n            };\n\n            HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {\n                if (typeof placeholder === 'string') {\n                    placeholder = {\n                        id: '',\n                        text: placeholder\n                    };\n                }\n\n                return placeholder;\n            };\n\n            HidePlaceholder.prototype.removePlaceholder = function (_, data) {\n                var modifiedData = data.slice(0);\n\n                for (var d = data.length - 1; d >= 0; d--) {\n                    var item = data[d];\n\n                    if (this.placeholder.id === item.id) {\n                        modifiedData.splice(d, 1);\n                    }\n                }\n\n                return modifiedData;\n            };\n\n            return HidePlaceholder;\n        });\n\n        S2.define('select2/dropdown/infiniteScroll',[\n            'jquery'\n        ], function ($) {\n            function InfiniteScroll (decorated, $element, options, dataAdapter) {\n                this.lastParams = {};\n\n                decorated.call(this, $element, options, dataAdapter);\n\n                this.$loadingMore = this.createLoadingMore();\n                this.loading = false;\n            }\n\n            InfiniteScroll.prototype.append = function (decorated, data) {\n                this.$loadingMore.remove();\n                this.loading = false;\n\n                decorated.call(this, data);\n\n                if (this.showLoadingMore(data)) {\n                    this.$results.append(this.$loadingMore);\n                }\n            };\n\n            InfiniteScroll.prototype.bind = function (decorated, container, $container) {\n                var self = this;\n\n                decorated.call(this, container, $container);\n\n                container.on('query', function (params) {\n                    self.lastParams = params;\n                    self.loading = true;\n                });\n\n                container.on('query:append', function (params) {\n                    self.lastParams = params;\n                    self.loading = true;\n                });\n\n                this.$results.on('scroll', function () {\n                    var isLoadMoreVisible = $.contains(\n                        document.documentElement,\n                        self.$loadingMore[0]\n                    );\n\n                    if (self.loading || !isLoadMoreVisible) {\n                        return;\n                    }\n\n                    var currentOffset = self.$results.offset().top +\n                                        self.$results.outerHeight(false);\n                    var loadingMoreOffset = self.$loadingMore.offset().top +\n                                            self.$loadingMore.outerHeight(false);\n\n                    if (currentOffset + 50 >= loadingMoreOffset) {\n                        self.loadMore();\n                    }\n                });\n            };\n\n            InfiniteScroll.prototype.loadMore = function () {\n                this.loading = true;\n\n                var params = $.extend({}, {page: 1}, this.lastParams);\n\n                params.page++;\n\n                this.trigger('query:append', params);\n            };\n\n            InfiniteScroll.prototype.showLoadingMore = function (_, data) {\n                return data.pagination && data.pagination.more;\n            };\n\n            InfiniteScroll.prototype.createLoadingMore = function () {\n                var $option = $(\n                    '<li ' +\n                    'class=\"select2-results__option select2-results__option--load-more\"' +\n                    'role=\"treeitem\" aria-disabled=\"true\"></li>'\n                );\n\n                var message = this.options.get('translations').get('loadingMore');\n\n                $option.html(message(this.lastParams));\n\n                return $option;\n            };\n\n            return InfiniteScroll;\n        });\n\n        S2.define('select2/dropdown/attachBody',[\n            'jquery',\n            '../utils'\n        ], function ($, Utils) {\n            function AttachBody (decorated, $element, options) {\n                this.$dropdownParent = options.get('dropdownParent') || $(document.body);\n\n                decorated.call(this, $element, options);\n            }\n\n            AttachBody.prototype.bind = function (decorated, container, $container) {\n                var self = this;\n\n                var setupResultsEvents = false;\n\n                decorated.call(this, container, $container);\n\n                container.on('open', function () {\n                    self._showDropdown();\n                    self._attachPositioningHandler(container);\n\n                    if (!setupResultsEvents) {\n                        setupResultsEvents = true;\n\n                        container.on('results:all', function () {\n                            self._positionDropdown();\n                            self._resizeDropdown();\n                        });\n\n                        container.on('results:append', function () {\n                            self._positionDropdown();\n                            self._resizeDropdown();\n                        });\n                    }\n                });\n\n                container.on('close', function () {\n                    self._hideDropdown();\n                    self._detachPositioningHandler(container);\n                });\n\n                this.$dropdownContainer.on('mousedown', function (evt) {\n                    evt.stopPropagation();\n                });\n            };\n\n            AttachBody.prototype.destroy = function (decorated) {\n                decorated.call(this);\n\n                this.$dropdownContainer.remove();\n            };\n\n            AttachBody.prototype.position = function (decorated, $dropdown, $container) {\n                // Clone all of the container classes\n                $dropdown.attr('class', $container.attr('class'));\n\n                $dropdown.removeClass('select2');\n                $dropdown.addClass('select2-container--open');\n\n                $dropdown.css({\n                    position: 'absolute',\n                    top: -999999\n                });\n\n                this.$container = $container;\n            };\n\n            AttachBody.prototype.render = function (decorated) {\n                var $container = $('<span></span>');\n\n                var $dropdown = decorated.call(this);\n                $container.append($dropdown);\n\n                this.$dropdownContainer = $container;\n\n                return $container;\n            };\n\n            AttachBody.prototype._hideDropdown = function (decorated) {\n                this.$dropdownContainer.detach();\n            };\n\n            AttachBody.prototype._attachPositioningHandler =\n                function (decorated, container) {\n                    var self = this;\n\n                    var scrollEvent = 'scroll.select2.' + container.id;\n                    var resizeEvent = 'resize.select2.' + container.id;\n                    var orientationEvent = 'orientationchange.select2.' + container.id;\n\n                    var $watchers = this.$container.parents().filter(Utils.hasScroll);\n                    $watchers.each(function () {\n                        $(this).data('select2-scroll-position', {\n                            x: $(this).scrollLeft(),\n                            y: $(this).scrollTop()\n                        });\n                    });\n\n                    $watchers.on(scrollEvent, function (ev) {\n                        var position = $(this).data('select2-scroll-position');\n                        $(this).scrollTop(position.y);\n                    });\n\n                    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,\n                        function (e) {\n                            self._positionDropdown();\n                            self._resizeDropdown();\n                        });\n                };\n\n            AttachBody.prototype._detachPositioningHandler =\n                function (decorated, container) {\n                    var scrollEvent = 'scroll.select2.' + container.id;\n                    var resizeEvent = 'resize.select2.' + container.id;\n                    var orientationEvent = 'orientationchange.select2.' + container.id;\n\n                    var $watchers = this.$container.parents().filter(Utils.hasScroll);\n                    $watchers.off(scrollEvent);\n\n                    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);\n                };\n\n            AttachBody.prototype._positionDropdown = function () {\n                var $window = $(window);\n\n                var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');\n                var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');\n\n                var newDirection = null;\n\n                var offset = this.$container.offset();\n\n                offset.bottom = offset.top + this.$container.outerHeight(false);\n\n                var container = {\n                    height: this.$container.outerHeight(false)\n                };\n\n                container.top = offset.top;\n                container.bottom = offset.top + container.height;\n\n                var dropdown = {\n                    height: this.$dropdown.outerHeight(false)\n                };\n\n                var viewport = {\n                    top: $window.scrollTop(),\n                    bottom: $window.scrollTop() + $window.height()\n                };\n\n                var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);\n                var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);\n\n                var css = {\n                    left: offset.left,\n                    top: container.bottom\n                };\n\n                // Determine what the parent element is to use for calciulating the offset\n                var $offsetParent = this.$dropdownParent;\n\n                // For statically positoned elements, we need to get the element\n                // that is determining the offset\n                if ($offsetParent.css('position') === 'static') {\n                    $offsetParent = $offsetParent.offsetParent();\n                }\n\n                var parentOffset = $offsetParent.offset();\n\n                css.top -= parentOffset.top;\n                css.left -= parentOffset.left;\n\n                if (!isCurrentlyAbove && !isCurrentlyBelow) {\n                    newDirection = 'below';\n                }\n\n                if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {\n                    newDirection = 'above';\n                } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {\n                    newDirection = 'below';\n                }\n\n                if (newDirection == 'above' ||\n                    (isCurrentlyAbove && newDirection !== 'below')) {\n                    css.top = container.top - parentOffset.top - dropdown.height;\n                }\n\n                if (newDirection != null) {\n                    this.$dropdown\n                        .removeClass('select2-dropdown--below select2-dropdown--above')\n                        .addClass('select2-dropdown--' + newDirection);\n                    this.$container\n                        .removeClass('select2-container--below select2-container--above')\n                        .addClass('select2-container--' + newDirection);\n                }\n\n                this.$dropdownContainer.css(css);\n            };\n\n            AttachBody.prototype._resizeDropdown = function () {\n                var css = {\n                    width: this.$container.outerWidth(false) + 'px'\n                };\n\n                if (this.options.get('dropdownAutoWidth')) {\n                    css.minWidth = css.width;\n                    css.position = 'relative';\n                    css.width = 'auto';\n                }\n\n                this.$dropdown.css(css);\n            };\n\n            AttachBody.prototype._showDropdown = function (decorated) {\n                this.$dropdownContainer.appendTo(this.$dropdownParent);\n\n                this._positionDropdown();\n                this._resizeDropdown();\n            };\n\n            return AttachBody;\n        });\n\n        S2.define('select2/dropdown/minimumResultsForSearch',[\n\n        ], function () {\n            function countResults (data) {\n                var count = 0;\n\n                for (var d = 0; d < data.length; d++) {\n                    var item = data[d];\n\n                    if (item.children) {\n                        count += countResults(item.children);\n                    } else {\n                        count++;\n                    }\n                }\n\n                return count;\n            }\n\n            function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {\n                this.minimumResultsForSearch = options.get('minimumResultsForSearch');\n\n                if (this.minimumResultsForSearch < 0) {\n                    this.minimumResultsForSearch = Infinity;\n                }\n\n                decorated.call(this, $element, options, dataAdapter);\n            }\n\n            MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {\n                if (countResults(params.data.results) < this.minimumResultsForSearch) {\n                    return false;\n                }\n\n                return decorated.call(this, params);\n            };\n\n            return MinimumResultsForSearch;\n        });\n\n        S2.define('select2/dropdown/selectOnClose',[\n\n        ], function () {\n            function SelectOnClose () { }\n\n            SelectOnClose.prototype.bind = function (decorated, container, $container) {\n                var self = this;\n\n                decorated.call(this, container, $container);\n\n                container.on('close', function (params) {\n                    self._handleSelectOnClose(params);\n                });\n            };\n\n            SelectOnClose.prototype._handleSelectOnClose = function (_, params) {\n                if (params && params.originalSelect2Event != null) {\n                    var event = params.originalSelect2Event;\n\n                    // Don't select an item if the close event was triggered from a select or\n                    // unselect event\n                    if (event._type === 'select' || event._type === 'unselect') {\n                        return;\n                    }\n                }\n\n                var $highlightedResults = this.getHighlightedResults();\n\n                // Only select highlighted results\n                if ($highlightedResults.length < 1) {\n                    return;\n                }\n\n                var data = $highlightedResults.data('data');\n\n                // Don't re-select already selected resulte\n                if (\n                    (data.element != null && data.element.selected) ||\n                    (data.element == null && data.selected)\n                ) {\n                    return;\n                }\n\n                this.trigger('select', {\n                    data: data\n                });\n            };\n\n            return SelectOnClose;\n        });\n\n        S2.define('select2/dropdown/closeOnSelect',[\n\n        ], function () {\n            function CloseOnSelect () { }\n\n            CloseOnSelect.prototype.bind = function (decorated, container, $container) {\n                var self = this;\n\n                decorated.call(this, container, $container);\n\n                container.on('select', function (evt) {\n                    self._selectTriggered(evt);\n                });\n\n                container.on('unselect', function (evt) {\n                    self._selectTriggered(evt);\n                });\n            };\n\n            CloseOnSelect.prototype._selectTriggered = function (_, evt) {\n                var originalEvent = evt.originalEvent;\n\n                // Don't close if the control key is being held\n                if (originalEvent && originalEvent.ctrlKey) {\n                    return;\n                }\n\n                this.trigger('close', {\n                    originalEvent: originalEvent,\n                    originalSelect2Event: evt\n                });\n            };\n\n            return CloseOnSelect;\n        });\n\n        S2.define('select2/i18n/en',[],function () {\n            // English\n            return {\n                errorLoading: function () {\n                    return 'The results could not be loaded.';\n                },\n                inputTooLong: function (args) {\n                    var overChars = args.input.length - args.maximum;\n\n                    var message = 'Please delete ' + overChars + ' character';\n\n                    if (overChars != 1) {\n                        message += 's';\n                    }\n\n                    return message;\n                },\n                inputTooShort: function (args) {\n                    var remainingChars = args.minimum - args.input.length;\n\n                    var message = 'Please enter ' + remainingChars + ' or more characters';\n\n                    return message;\n                },\n                loadingMore: function () {\n                    return 'Loading more results…';\n                },\n                maximumSelected: function (args) {\n                    var message = 'You can only select ' + args.maximum + ' item';\n\n                    if (args.maximum != 1) {\n                        message += 's';\n                    }\n\n                    return message;\n                },\n                noResults: function () {\n                    return 'No results found';\n                },\n                searching: function () {\n                    return 'Searching…';\n                }\n            };\n        });\n\n        S2.define('select2/defaults',[\n            'jquery',\n            'require',\n\n            './results',\n\n            './selection/single',\n            './selection/multiple',\n            './selection/placeholder',\n            './selection/allowClear',\n            './selection/search',\n            './selection/eventRelay',\n\n            './utils',\n            './translation',\n            './diacritics',\n\n            './data/select',\n            './data/array',\n            './data/ajax',\n            './data/tags',\n            './data/tokenizer',\n            './data/minimumInputLength',\n            './data/maximumInputLength',\n            './data/maximumSelectionLength',\n\n            './dropdown',\n            './dropdown/search',\n            './dropdown/hidePlaceholder',\n            './dropdown/infiniteScroll',\n            './dropdown/attachBody',\n            './dropdown/minimumResultsForSearch',\n            './dropdown/selectOnClose',\n            './dropdown/closeOnSelect',\n\n            './i18n/en'\n        ], function ($, require,\n\n            ResultsList,\n\n            SingleSelection, MultipleSelection, Placeholder, AllowClear,\n            SelectionSearch, EventRelay,\n\n            Utils, Translation, DIACRITICS,\n\n            SelectData, ArrayData, AjaxData, Tags, Tokenizer,\n            MinimumInputLength, MaximumInputLength, MaximumSelectionLength,\n\n            Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,\n            AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,\n\n            EnglishTranslation) {\n            function Defaults () {\n                this.reset();\n            }\n\n            Defaults.prototype.apply = function (options) {\n                options = $.extend(true, {}, this.defaults, options);\n\n                if (options.dataAdapter == null) {\n                    if (options.ajax != null) {\n                        options.dataAdapter = AjaxData;\n                    } else if (options.data != null) {\n                        options.dataAdapter = ArrayData;\n                    } else {\n                        options.dataAdapter = SelectData;\n                    }\n\n                    if (options.minimumInputLength > 0) {\n                        options.dataAdapter = Utils.Decorate(\n                            options.dataAdapter,\n                            MinimumInputLength\n                        );\n                    }\n\n                    if (options.maximumInputLength > 0) {\n                        options.dataAdapter = Utils.Decorate(\n                            options.dataAdapter,\n                            MaximumInputLength\n                        );\n                    }\n\n                    if (options.maximumSelectionLength > 0) {\n                        options.dataAdapter = Utils.Decorate(\n                            options.dataAdapter,\n                            MaximumSelectionLength\n                        );\n                    }\n\n                    if (options.tags) {\n                        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);\n                    }\n\n                    if (options.tokenSeparators != null || options.tokenizer != null) {\n                        options.dataAdapter = Utils.Decorate(\n                            options.dataAdapter,\n                            Tokenizer\n                        );\n                    }\n\n                    if (options.query != null) {\n                        var Query = require(options.amdBase + 'compat/query');\n\n                        options.dataAdapter = Utils.Decorate(\n                            options.dataAdapter,\n                            Query\n                        );\n                    }\n\n                    if (options.initSelection != null) {\n                        var InitSelection = require(options.amdBase + 'compat/initSelection');\n\n                        options.dataAdapter = Utils.Decorate(\n                            options.dataAdapter,\n                            InitSelection\n                        );\n                    }\n                }\n\n                if (options.resultsAdapter == null) {\n                    options.resultsAdapter = ResultsList;\n\n                    if (options.ajax != null) {\n                        options.resultsAdapter = Utils.Decorate(\n                            options.resultsAdapter,\n                            InfiniteScroll\n                        );\n                    }\n\n                    if (options.placeholder != null) {\n                        options.resultsAdapter = Utils.Decorate(\n                            options.resultsAdapter,\n                            HidePlaceholder\n                        );\n                    }\n\n                    if (options.selectOnClose) {\n                        options.resultsAdapter = Utils.Decorate(\n                            options.resultsAdapter,\n                            SelectOnClose\n                        );\n                    }\n                }\n\n                if (options.dropdownAdapter == null) {\n                    if (options.multiple) {\n                        options.dropdownAdapter = Dropdown;\n                    } else {\n                        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);\n\n                        options.dropdownAdapter = SearchableDropdown;\n                    }\n\n                    if (options.minimumResultsForSearch !== 0) {\n                        options.dropdownAdapter = Utils.Decorate(\n                            options.dropdownAdapter,\n                            MinimumResultsForSearch\n                        );\n                    }\n\n                    if (options.closeOnSelect) {\n                        options.dropdownAdapter = Utils.Decorate(\n                            options.dropdownAdapter,\n                            CloseOnSelect\n                        );\n                    }\n\n                    if (\n                        options.dropdownCssClass != null ||\n                        options.dropdownCss != null ||\n                        options.adaptDropdownCssClass != null\n                    ) {\n                        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');\n\n                        options.dropdownAdapter = Utils.Decorate(\n                            options.dropdownAdapter,\n                            DropdownCSS\n                        );\n                    }\n\n                    options.dropdownAdapter = Utils.Decorate(\n                        options.dropdownAdapter,\n                        AttachBody\n                    );\n                }\n\n                if (options.selectionAdapter == null) {\n                    if (options.multiple) {\n                        options.selectionAdapter = MultipleSelection;\n                    } else {\n                        options.selectionAdapter = SingleSelection;\n                    }\n\n                    // Add the placeholder mixin if a placeholder was specified\n                    if (options.placeholder != null) {\n                        options.selectionAdapter = Utils.Decorate(\n                            options.selectionAdapter,\n                            Placeholder\n                        );\n                    }\n\n                    if (options.allowClear) {\n                        options.selectionAdapter = Utils.Decorate(\n                            options.selectionAdapter,\n                            AllowClear\n                        );\n                    }\n\n                    if (options.multiple) {\n                        options.selectionAdapter = Utils.Decorate(\n                            options.selectionAdapter,\n                            SelectionSearch\n                        );\n                    }\n\n                    if (\n                        options.containerCssClass != null ||\n                        options.containerCss != null ||\n                        options.adaptContainerCssClass != null\n                    ) {\n                        var ContainerCSS = require(options.amdBase + 'compat/containerCss');\n\n                        options.selectionAdapter = Utils.Decorate(\n                            options.selectionAdapter,\n                            ContainerCSS\n                        );\n                    }\n\n                    options.selectionAdapter = Utils.Decorate(\n                        options.selectionAdapter,\n                        EventRelay\n                    );\n                }\n\n                if (typeof options.language === 'string') {\n                    // Check if the language is specified with a region\n                    if (options.language.indexOf('-') > 0) {\n                        // Extract the region information if it is included\n                        var languageParts = options.language.split('-');\n                        var baseLanguage = languageParts[0];\n\n                        options.language = [options.language, baseLanguage];\n                    } else {\n                        options.language = [options.language];\n                    }\n                }\n\n                if ($.isArray(options.language)) {\n                    var languages = new Translation();\n                    options.language.push('en');\n\n                    var languageNames = options.language;\n\n                    for (var l = 0; l < languageNames.length; l++) {\n                        var name = languageNames[l];\n                        var language = {};\n\n                        try {\n                            // Try to load it with the original name\n                            language = Translation.loadPath(name);\n                        } catch (e) {\n                            try {\n                                // If we couldn't load it, check if it wasn't the full path\n                                name = this.defaults.amdLanguageBase + name;\n                                language = Translation.loadPath(name);\n                            } catch (ex) {\n                                // The translation could not be loaded at all. Sometimes this is\n                                // because of a configuration problem, other times this can be\n                                // because of how Select2 helps load all possible translation files.\n                                if (options.debug && window.console && console.warn) {\n                                    console.warn(\n                                        'Select2: The language file for \"' + name + '\" could not be ' +\n                                        'automatically loaded. A fallback will be used instead.'\n                                    );\n                                }\n\n                                continue;\n                            }\n                        }\n\n                        languages.extend(language);\n                    }\n\n                    options.translations = languages;\n                } else {\n                    var baseTranslation = Translation.loadPath(\n                        this.defaults.amdLanguageBase + 'en'\n                    );\n                    var customTranslation = new Translation(options.language);\n\n                    customTranslation.extend(baseTranslation);\n\n                    options.translations = customTranslation;\n                }\n\n                return options;\n            };\n\n            Defaults.prototype.reset = function () {\n                function stripDiacritics (text) {\n                    // Used 'uni range + named function' from http://jsperf.com/diacritics/18\n                    function match(a) {\n                        return DIACRITICS[a] || a;\n                    }\n\n                    return text.replace(/[^\\u0000-\\u007E]/g, match);\n                }\n\n                function matcher (params, data) {\n                    // Always return the object if there is nothing to compare\n                    if ($.trim(params.term) === '') {\n                        return data;\n                    }\n\n                    // Do a recursive check for options with children\n                    if (data.children && data.children.length > 0) {\n                        // Clone the data object if there are children\n                        // This is required as we modify the object to remove any non-matches\n                        var match = $.extend(true, {}, data);\n\n                        // Check each child of the option\n                        for (var c = data.children.length - 1; c >= 0; c--) {\n                            var child = data.children[c];\n\n                            var matches = matcher(params, child);\n\n                            // If there wasn't a match, remove the object in the array\n                            if (matches == null) {\n                                match.children.splice(c, 1);\n                            }\n                        }\n\n                        // If any children matched, return the new object\n                        if (match.children.length > 0) {\n                            return match;\n                        }\n\n                        // If there were no matching children, check just the plain object\n                        return matcher(params, match);\n                    }\n\n                    var original = stripDiacritics(data.text).toUpperCase();\n                    var term = stripDiacritics(params.term).toUpperCase();\n\n                    // Check if the text contains the term\n                    if (original.indexOf(term) > -1) {\n                        return data;\n                    }\n\n                    // If it doesn't contain the term, don't return anything\n                    return null;\n                }\n\n                this.defaults = {\n                    amdBase: './',\n                    amdLanguageBase: './i18n/',\n                    closeOnSelect: true,\n                    debug: false,\n                    dropdownAutoWidth: false,\n                    escapeMarkup: Utils.escapeMarkup,\n                    language: EnglishTranslation,\n                    matcher: matcher,\n                    minimumInputLength: 0,\n                    maximumInputLength: 0,\n                    maximumSelectionLength: 0,\n                    minimumResultsForSearch: 0,\n                    selectOnClose: false,\n                    sorter: function (data) {\n                        return data;\n                    },\n                    templateResult: function (result) {\n                        return result.text;\n                    },\n                    templateSelection: function (selection) {\n                        return selection.text;\n                    },\n                    theme: 'default',\n                    width: 'resolve'\n                };\n            };\n\n            Defaults.prototype.set = function (key, value) {\n                var camelKey = $.camelCase(key);\n\n                var data = {};\n                data[camelKey] = value;\n\n                var convertedData = Utils._convertData(data);\n\n                $.extend(this.defaults, convertedData);\n            };\n\n            var defaults = new Defaults();\n\n            return defaults;\n        });\n\n        S2.define('select2/options',[\n            'require',\n            'jquery',\n            './defaults',\n            './utils'\n        ], function (require, $, Defaults, Utils) {\n            function Options (options, $element) {\n                this.options = options;\n\n                if ($element != null) {\n                    this.fromElement($element);\n                }\n\n                this.options = Defaults.apply(this.options);\n\n                if ($element && $element.is('input')) {\n                    var InputCompat = require(this.get('amdBase') + 'compat/inputData');\n\n                    this.options.dataAdapter = Utils.Decorate(\n                        this.options.dataAdapter,\n                        InputCompat\n                    );\n                }\n            }\n\n            Options.prototype.fromElement = function ($e) {\n                var excludedData = ['select2'];\n\n                if (this.options.multiple == null) {\n                    this.options.multiple = $e.prop('multiple');\n                }\n\n                if (this.options.disabled == null) {\n                    this.options.disabled = $e.prop('disabled');\n                }\n\n                if (this.options.language == null) {\n                    if ($e.prop('lang')) {\n                        this.options.language = $e.prop('lang').toLowerCase();\n                    } else if ($e.closest('[lang]').prop('lang')) {\n                        this.options.language = $e.closest('[lang]').prop('lang');\n                    }\n                }\n\n                if (this.options.dir == null) {\n                    if ($e.prop('dir')) {\n                        this.options.dir = $e.prop('dir');\n                    } else if ($e.closest('[dir]').prop('dir')) {\n                        this.options.dir = $e.closest('[dir]').prop('dir');\n                    } else {\n                        this.options.dir = 'ltr';\n                    }\n                }\n\n                $e.prop('disabled', this.options.disabled);\n                $e.prop('multiple', this.options.multiple);\n\n                if ($e.data('select2Tags')) {\n                    if (this.options.debug && window.console && console.warn) {\n                        console.warn(\n                            'Select2: The `data-select2-tags` attribute has been changed to ' +\n                            'use the `data-data` and `data-tags=\"true\"` attributes and will be ' +\n                            'removed in future versions of Select2.'\n                        );\n                    }\n\n                    $e.data('data', $e.data('select2Tags'));\n                    $e.data('tags', true);\n                }\n\n                if ($e.data('ajaxUrl')) {\n                    if (this.options.debug && window.console && console.warn) {\n                        console.warn(\n                            'Select2: The `data-ajax-url` attribute has been changed to ' +\n                            '`data-ajax--url` and support for the old attribute will be removed' +\n                            ' in future versions of Select2.'\n                        );\n                    }\n\n                    $e.attr('ajax--url', $e.data('ajaxUrl'));\n                    $e.data('ajax--url', $e.data('ajaxUrl'));\n                }\n\n                var dataset = {};\n\n                // Prefer the element's `dataset` attribute if it exists\n                // jQuery 1.x does not correctly handle data attributes with multiple dashes\n                if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {\n                    dataset = $.extend(true, {}, $e[0].dataset, $e.data());\n                } else {\n                    dataset = $e.data();\n                }\n\n                var data = $.extend(true, {}, dataset);\n\n                data = Utils._convertData(data);\n\n                for (var key in data) {\n                    if ($.inArray(key, excludedData) > -1) {\n                        continue;\n                    }\n\n                    if ($.isPlainObject(this.options[key])) {\n                        $.extend(this.options[key], data[key]);\n                    } else {\n                        this.options[key] = data[key];\n                    }\n                }\n\n                return this;\n            };\n\n            Options.prototype.get = function (key) {\n                return this.options[key];\n            };\n\n            Options.prototype.set = function (key, val) {\n                this.options[key] = val;\n            };\n\n            return Options;\n        });\n\n        S2.define('select2/core',[\n            'jquery',\n            './options',\n            './utils',\n            './keys'\n        ], function ($, Options, Utils, KEYS) {\n            var Select2 = function ($element, options) {\n                if ($element.data('select2') != null) {\n                    $element.data('select2').destroy();\n                }\n\n                this.$element = $element;\n\n                this.id = this._generateId($element);\n\n                options = options || {};\n\n                this.options = new Options(options, $element);\n\n                Select2.__super__.constructor.call(this);\n\n                // Set up the tabindex\n\n                var tabindex = $element.attr('tabindex') || 0;\n                $element.data('old-tabindex', tabindex);\n                $element.attr('tabindex', '-1');\n\n                // Set up containers and adapters\n\n                var DataAdapter = this.options.get('dataAdapter');\n                this.dataAdapter = new DataAdapter($element, this.options);\n\n                var $container = this.render();\n\n                this._placeContainer($container);\n\n                var SelectionAdapter = this.options.get('selectionAdapter');\n                this.selection = new SelectionAdapter($element, this.options);\n                this.$selection = this.selection.render();\n\n                this.selection.position(this.$selection, $container);\n\n                var DropdownAdapter = this.options.get('dropdownAdapter');\n                this.dropdown = new DropdownAdapter($element, this.options);\n                this.$dropdown = this.dropdown.render();\n\n                this.dropdown.position(this.$dropdown, $container);\n\n                var ResultsAdapter = this.options.get('resultsAdapter');\n                this.results = new ResultsAdapter($element, this.options, this.dataAdapter);\n                this.$results = this.results.render();\n\n                this.results.position(this.$results, this.$dropdown);\n\n                // Bind events\n\n                var self = this;\n\n                // Bind the container to all of the adapters\n                this._bindAdapters();\n\n                // Register any DOM event handlers\n                this._registerDomEvents();\n\n                // Register any internal event handlers\n                this._registerDataEvents();\n                this._registerSelectionEvents();\n                this._registerDropdownEvents();\n                this._registerResultsEvents();\n                this._registerEvents();\n\n                // Set the initial state\n                this.dataAdapter.current(function (initialData) {\n                    self.trigger('selection:update', {\n                        data: initialData\n                    });\n                });\n\n                // Hide the original select\n                $element.addClass('select2-hidden-accessible');\n                $element.attr('aria-hidden', 'true');\n\n                // Synchronize any monitored attributes\n                this._syncAttributes();\n\n                $element.data('select2', this);\n            };\n\n            Utils.Extend(Select2, Utils.Observable);\n\n            Select2.prototype._generateId = function ($element) {\n                var id = '';\n\n                if ($element.attr('id') != null) {\n                    id = $element.attr('id');\n                } else if ($element.attr('name') != null) {\n                    id = $element.attr('name') + '-' + Utils.generateChars(2);\n                } else {\n                    id = Utils.generateChars(4);\n                }\n\n                id = id.replace(/(:|\\.|\\[|\\]|,)/g, '');\n                id = 'select2-' + id;\n\n                return id;\n            };\n\n            Select2.prototype._placeContainer = function ($container) {\n                $container.insertAfter(this.$element);\n\n                var width = this._resolveWidth(this.$element, this.options.get('width'));\n\n                if (width != null) {\n                    $container.css('width', width);\n                }\n            };\n\n            Select2.prototype._resolveWidth = function ($element, method) {\n                var WIDTH = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n\n                if (method == 'resolve') {\n                    var styleWidth = this._resolveWidth($element, 'style');\n\n                    if (styleWidth != null) {\n                        return styleWidth;\n                    }\n\n                    return this._resolveWidth($element, 'element');\n                }\n\n                if (method == 'element') {\n                    var elementWidth = $element.outerWidth(false);\n\n                    if (elementWidth <= 0) {\n                        return 'auto';\n                    }\n\n                    return elementWidth + 'px';\n                }\n\n                if (method == 'style') {\n                    var style = $element.attr('style');\n\n                    if (typeof(style) !== 'string') {\n                        return null;\n                    }\n\n                    var attrs = style.split(';');\n\n                    for (var i = 0, l = attrs.length; i < l; i = i + 1) {\n                        var attr = attrs[i].replace(/\\s/g, '');\n                        var matches = attr.match(WIDTH);\n\n                        if (matches !== null && matches.length >= 1) {\n                            return matches[1];\n                        }\n                    }\n\n                    return null;\n                }\n\n                return method;\n            };\n\n            Select2.prototype._bindAdapters = function () {\n                this.dataAdapter.bind(this, this.$container);\n                this.selection.bind(this, this.$container);\n\n                this.dropdown.bind(this, this.$container);\n                this.results.bind(this, this.$container);\n            };\n\n            Select2.prototype._registerDomEvents = function () {\n                var self = this;\n\n                this.$element.on('change.select2', function () {\n                    self.dataAdapter.current(function (data) {\n                        self.trigger('selection:update', {\n                            data: data\n                        });\n                    });\n                });\n\n                this.$element.on('focus.select2', function (evt) {\n                    self.trigger('focus', evt);\n                });\n\n                this._syncA = Utils.bind(this._syncAttributes, this);\n                this._syncS = Utils.bind(this._syncSubtree, this);\n\n                if (this.$element[0].attachEvent) {\n                    this.$element[0].attachEvent('onpropertychange', this._syncA);\n                }\n\n                var observer = window.MutationObserver ||\n                               window.WebKitMutationObserver ||\n                               window.MozMutationObserver\n                ;\n\n                if (observer != null) {\n                    this._observer = new observer(function (mutations) {\n                        $.each(mutations, self._syncA);\n                        $.each(mutations, self._syncS);\n                    });\n                    this._observer.observe(this.$element[0], {\n                        attributes: true,\n                        childList: true,\n                        subtree: false\n                    });\n                } else if (this.$element[0].addEventListener) {\n                    this.$element[0].addEventListener(\n                        'DOMAttrModified',\n                        self._syncA,\n                        false\n                    );\n                    this.$element[0].addEventListener(\n                        'DOMNodeInserted',\n                        self._syncS,\n                        false\n                    );\n                    this.$element[0].addEventListener(\n                        'DOMNodeRemoved',\n                        self._syncS,\n                        false\n                    );\n                }\n            };\n\n            Select2.prototype._registerDataEvents = function () {\n                var self = this;\n\n                this.dataAdapter.on('*', function (name, params) {\n                    self.trigger(name, params);\n                });\n            };\n\n            Select2.prototype._registerSelectionEvents = function () {\n                var self = this;\n                var nonRelayEvents = ['toggle', 'focus'];\n\n                this.selection.on('toggle', function () {\n                    self.toggleDropdown();\n                });\n\n                this.selection.on('focus', function (params) {\n                    self.focus(params);\n                });\n\n                this.selection.on('*', function (name, params) {\n                    if ($.inArray(name, nonRelayEvents) !== -1) {\n                        return;\n                    }\n\n                    self.trigger(name, params);\n                });\n            };\n\n            Select2.prototype._registerDropdownEvents = function () {\n                var self = this;\n\n                this.dropdown.on('*', function (name, params) {\n                    self.trigger(name, params);\n                });\n            };\n\n            Select2.prototype._registerResultsEvents = function () {\n                var self = this;\n\n                this.results.on('*', function (name, params) {\n                    self.trigger(name, params);\n                });\n            };\n\n            Select2.prototype._registerEvents = function () {\n                var self = this;\n\n                this.on('open', function () {\n                    self.$container.addClass('select2-container--open');\n                });\n\n                this.on('close', function () {\n                    self.$container.removeClass('select2-container--open');\n                });\n\n                this.on('enable', function () {\n                    self.$container.removeClass('select2-container--disabled');\n                });\n\n                this.on('disable', function () {\n                    self.$container.addClass('select2-container--disabled');\n                });\n\n                this.on('blur', function () {\n                    self.$container.removeClass('select2-container--focus');\n                });\n\n                this.on('query', function (params) {\n                    if (!self.isOpen()) {\n                        self.trigger('open', {});\n                    }\n\n                    this.dataAdapter.query(params, function (data) {\n                        self.trigger('results:all', {\n                            data: data,\n                            query: params\n                        });\n                    });\n                });\n\n                this.on('query:append', function (params) {\n                    this.dataAdapter.query(params, function (data) {\n                        self.trigger('results:append', {\n                            data: data,\n                            query: params\n                        });\n                    });\n                });\n\n                this.on('keypress', function (evt) {\n                    var key = evt.which;\n\n                    if (self.isOpen()) {\n                        if (key === KEYS.ESC || key === KEYS.TAB ||\n                            (key === KEYS.UP && evt.altKey)) {\n                            self.close();\n\n                            evt.preventDefault();\n                        } else if (key === KEYS.ENTER) {\n                            self.trigger('results:select', {});\n\n                            evt.preventDefault();\n                        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {\n                            self.trigger('results:toggle', {});\n\n                            evt.preventDefault();\n                        } else if (key === KEYS.UP) {\n                            self.trigger('results:previous', {});\n\n                            evt.preventDefault();\n                        } else if (key === KEYS.DOWN) {\n                            self.trigger('results:next', {});\n\n                            evt.preventDefault();\n                        }\n                    } else {\n                        if (key === KEYS.ENTER || key === KEYS.SPACE ||\n                            (key === KEYS.DOWN && evt.altKey)) {\n                            self.open();\n\n                            evt.preventDefault();\n                        }\n                    }\n                });\n            };\n\n            Select2.prototype._syncAttributes = function () {\n                this.options.set('disabled', this.$element.prop('disabled'));\n\n                if (this.options.get('disabled')) {\n                    if (this.isOpen()) {\n                        this.close();\n                    }\n\n                    this.trigger('disable', {});\n                } else {\n                    this.trigger('enable', {});\n                }\n            };\n\n            Select2.prototype._syncSubtree = function (evt, mutations) {\n                var changed = false;\n                var self = this;\n\n                // Ignore any mutation events raised for elements that aren't options or\n                // optgroups. This handles the case when the select element is destroyed\n                if (\n                    evt && evt.target && (\n                    evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'\n                        )\n                ) {\n                    return;\n                }\n\n                if (!mutations) {\n                    // If mutation events aren't supported, then we can only assume that the\n                    // change affected the selections\n                    changed = true;\n                } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {\n                    for (var n = 0; n < mutations.addedNodes.length; n++) {\n                        var node = mutations.addedNodes[n];\n\n                        if (node.selected) {\n                            changed = true;\n                        }\n                    }\n                } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {\n                    changed = true;\n                }\n\n                // Only re-pull the data if we think there is a change\n                if (changed) {\n                    this.dataAdapter.current(function (currentData) {\n                        self.trigger('selection:update', {\n                            data: currentData\n                        });\n                    });\n                }\n            };\n\n            /**\n             * Override the trigger method to automatically trigger pre-events when\n             * there are events that can be prevented.\n             */\n            Select2.prototype.trigger = function (name, args) {\n                var actualTrigger = Select2.__super__.trigger;\n                var preTriggerMap = {\n                    'open': 'opening',\n                    'close': 'closing',\n                    'select': 'selecting',\n                    'unselect': 'unselecting'\n                };\n\n                if (args === undefined) {\n                    args = {};\n                }\n\n                if (name in preTriggerMap) {\n                    var preTriggerName = preTriggerMap[name];\n                    var preTriggerArgs = {\n                        prevented: false,\n                        name: name,\n                        args: args\n                    };\n\n                    actualTrigger.call(this, preTriggerName, preTriggerArgs);\n\n                    if (preTriggerArgs.prevented) {\n                        args.prevented = true;\n\n                        return;\n                    }\n                }\n\n                actualTrigger.call(this, name, args);\n            };\n\n            Select2.prototype.toggleDropdown = function () {\n                if (this.options.get('disabled')) {\n                    return;\n                }\n\n                if (this.isOpen()) {\n                    this.close();\n                } else {\n                    this.open();\n                }\n            };\n\n            Select2.prototype.open = function () {\n                if (this.isOpen()) {\n                    return;\n                }\n\n                this.trigger('query', {});\n            };\n\n            Select2.prototype.close = function () {\n                if (!this.isOpen()) {\n                    return;\n                }\n\n                this.trigger('close', {});\n            };\n\n            Select2.prototype.isOpen = function () {\n                return this.$container.hasClass('select2-container--open');\n            };\n\n            Select2.prototype.hasFocus = function () {\n                return this.$container.hasClass('select2-container--focus');\n            };\n\n            Select2.prototype.focus = function (data) {\n                // No need to re-trigger focus events if we are already focused\n                if (this.hasFocus()) {\n                    return;\n                }\n\n                this.$container.addClass('select2-container--focus');\n                this.trigger('focus', {});\n            };\n\n            Select2.prototype.enable = function (args) {\n                if (this.options.get('debug') && window.console && console.warn) {\n                    console.warn(\n                        'Select2: The `select2(\"enable\")` method has been deprecated and will' +\n                        ' be removed in later Select2 versions. Use $element.prop(\"disabled\")' +\n                        ' instead.'\n                    );\n                }\n\n                if (args == null || args.length === 0) {\n                    args = [true];\n                }\n\n                var disabled = !args[0];\n\n                this.$element.prop('disabled', disabled);\n            };\n\n            Select2.prototype.data = function () {\n                if (this.options.get('debug') &&\n                    arguments.length > 0 && window.console && console.warn) {\n                    console.warn(\n                        'Select2: Data can no longer be set using `select2(\"data\")`. You ' +\n                        'should consider setting the value instead using `$element.val()`.'\n                    );\n                }\n\n                var data = [];\n\n                this.dataAdapter.current(function (currentData) {\n                    data = currentData;\n                });\n\n                return data;\n            };\n\n            Select2.prototype.val = function (args) {\n                if (this.options.get('debug') && window.console && console.warn) {\n                    console.warn(\n                        'Select2: The `select2(\"val\")` method has been deprecated and will be' +\n                        ' removed in later Select2 versions. Use $element.val() instead.'\n                    );\n                }\n\n                if (args == null || args.length === 0) {\n                    return this.$element.val();\n                }\n\n                var newVal = args[0];\n\n                if ($.isArray(newVal)) {\n                    newVal = $.map(newVal, function (obj) {\n                        return obj.toString();\n                    });\n                }\n\n                this.$element.val(newVal).trigger('change');\n            };\n\n            Select2.prototype.destroy = function () {\n                this.$container.remove();\n\n                if (this.$element[0].detachEvent) {\n                    this.$element[0].detachEvent('onpropertychange', this._syncA);\n                }\n\n                if (this._observer != null) {\n                    this._observer.disconnect();\n                    this._observer = null;\n                } else if (this.$element[0].removeEventListener) {\n                    this.$element[0]\n                        .removeEventListener('DOMAttrModified', this._syncA, false);\n                    this.$element[0]\n                        .removeEventListener('DOMNodeInserted', this._syncS, false);\n                    this.$element[0]\n                        .removeEventListener('DOMNodeRemoved', this._syncS, false);\n                }\n\n                this._syncA = null;\n                this._syncS = null;\n\n                this.$element.off('.select2');\n                this.$element.attr('tabindex', this.$element.data('old-tabindex'));\n\n                this.$element.removeClass('select2-hidden-accessible');\n                this.$element.attr('aria-hidden', 'false');\n                this.$element.removeData('select2');\n\n                this.dataAdapter.destroy();\n                this.selection.destroy();\n                this.dropdown.destroy();\n                this.results.destroy();\n\n                this.dataAdapter = null;\n                this.selection = null;\n                this.dropdown = null;\n                this.results = null;\n            };\n\n            Select2.prototype.render = function () {\n                var $container = $(\n                    '<span class=\"select2 select2-container\">' +\n                    '<span class=\"selection\"></span>' +\n                    '<span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span>' +\n                    '</span>'\n                );\n\n                $container.attr('dir', this.options.get('dir'));\n\n                this.$container = $container;\n\n                this.$container.addClass('select2-container--' + this.options.get('theme'));\n\n                $container.data('element', this.$element);\n\n                return $container;\n            };\n\n            return Select2;\n        });\n\n        S2.define('select2/compat/utils',[\n            'jquery'\n        ], function ($) {\n            function syncCssClasses ($dest, $src, adapter) {\n                var classes, replacements = [], adapted;\n\n                classes = $.trim($dest.attr('class'));\n\n                if (classes) {\n                    classes = '' + classes; // for IE which returns object\n\n                    $(classes.split(/\\s+/)).each(function () {\n                        // Save all Select2 classes\n                        if (this.indexOf('select2-') === 0) {\n                            replacements.push(this);\n                        }\n                    });\n                }\n\n                classes = $.trim($src.attr('class'));\n\n                if (classes) {\n                    classes = '' + classes; // for IE which returns object\n\n                    $(classes.split(/\\s+/)).each(function () {\n                        // Only adapt non-Select2 classes\n                        if (this.indexOf('select2-') !== 0) {\n                            adapted = adapter(this);\n\n                            if (adapted != null) {\n                                replacements.push(adapted);\n                            }\n                        }\n                    });\n                }\n\n                $dest.attr('class', replacements.join(' '));\n            }\n\n            return {\n                syncCssClasses: syncCssClasses\n            };\n        });\n\n        S2.define('select2/compat/containerCss',[\n            'jquery',\n            './utils'\n        ], function ($, CompatUtils) {\n            // No-op CSS adapter that discards all classes by default\n            function _containerAdapter (clazz) {\n                return null;\n            }\n\n            function ContainerCSS () { }\n\n            ContainerCSS.prototype.render = function (decorated) {\n                var $container = decorated.call(this);\n\n                var containerCssClass = this.options.get('containerCssClass') || '';\n\n                if ($.isFunction(containerCssClass)) {\n                    containerCssClass = containerCssClass(this.$element);\n                }\n\n                var containerCssAdapter = this.options.get('adaptContainerCssClass');\n                containerCssAdapter = containerCssAdapter || _containerAdapter;\n\n                if (containerCssClass.indexOf(':all:') !== -1) {\n                    containerCssClass = containerCssClass.replace(':all:', '');\n\n                    var _cssAdapter = containerCssAdapter;\n\n                    containerCssAdapter = function (clazz) {\n                        var adapted = _cssAdapter(clazz);\n\n                        if (adapted != null) {\n                            // Append the old one along with the adapted one\n                            return adapted + ' ' + clazz;\n                        }\n\n                        return clazz;\n                    };\n                }\n\n                var containerCss = this.options.get('containerCss') || {};\n\n                if ($.isFunction(containerCss)) {\n                    containerCss = containerCss(this.$element);\n                }\n\n                CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);\n\n                $container.css(containerCss);\n                $container.addClass(containerCssClass);\n\n                return $container;\n            };\n\n            return ContainerCSS;\n        });\n\n        S2.define('select2/compat/dropdownCss',[\n            'jquery',\n            './utils'\n        ], function ($, CompatUtils) {\n            // No-op CSS adapter that discards all classes by default\n            function _dropdownAdapter (clazz) {\n                return null;\n            }\n\n            function DropdownCSS () { }\n\n            DropdownCSS.prototype.render = function (decorated) {\n                var $dropdown = decorated.call(this);\n\n                var dropdownCssClass = this.options.get('dropdownCssClass') || '';\n\n                if ($.isFunction(dropdownCssClass)) {\n                    dropdownCssClass = dropdownCssClass(this.$element);\n                }\n\n                var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');\n                dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;\n\n                if (dropdownCssClass.indexOf(':all:') !== -1) {\n                    dropdownCssClass = dropdownCssClass.replace(':all:', '');\n\n                    var _cssAdapter = dropdownCssAdapter;\n\n                    dropdownCssAdapter = function (clazz) {\n                        var adapted = _cssAdapter(clazz);\n\n                        if (adapted != null) {\n                            // Append the old one along with the adapted one\n                            return adapted + ' ' + clazz;\n                        }\n\n                        return clazz;\n                    };\n                }\n\n                var dropdownCss = this.options.get('dropdownCss') || {};\n\n                if ($.isFunction(dropdownCss)) {\n                    dropdownCss = dropdownCss(this.$element);\n                }\n\n                CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);\n\n                $dropdown.css(dropdownCss);\n                $dropdown.addClass(dropdownCssClass);\n\n                return $dropdown;\n            };\n\n            return DropdownCSS;\n        });\n\n        S2.define('select2/compat/initSelection',[\n            'jquery'\n        ], function ($) {\n            function InitSelection (decorated, $element, options) {\n                if (options.get('debug') && window.console && console.warn) {\n                    console.warn(\n                        'Select2: The `initSelection` option has been deprecated in favor' +\n                        ' of a custom data adapter that overrides the `current` method. ' +\n                        'This method is now called multiple times instead of a single ' +\n                        'time when the instance is initialized. Support will be removed ' +\n                        'for the `initSelection` option in future versions of Select2'\n                    );\n                }\n\n                this.initSelection = options.get('initSelection');\n                this._isInitialized = false;\n\n                decorated.call(this, $element, options);\n            }\n\n            InitSelection.prototype.current = function (decorated, callback) {\n                var self = this;\n\n                if (this._isInitialized) {\n                    decorated.call(this, callback);\n\n                    return;\n                }\n\n                this.initSelection.call(null, this.$element, function (data) {\n                    self._isInitialized = true;\n\n                    if (!$.isArray(data)) {\n                        data = [data];\n                    }\n\n                    callback(data);\n                });\n            };\n\n            return InitSelection;\n        });\n\n        S2.define('select2/compat/inputData',[\n            'jquery'\n        ], function ($) {\n            function InputData (decorated, $element, options) {\n                this._currentData = [];\n                this._valueSeparator = options.get('valueSeparator') || ',';\n\n                if ($element.prop('type') === 'hidden') {\n                    if (options.get('debug') && console && console.warn) {\n                        console.warn(\n                            'Select2: Using a hidden input with Select2 is no longer ' +\n                            'supported and may stop working in the future. It is recommended ' +\n                            'to use a `<select>` element instead.'\n                        );\n                    }\n                }\n\n                decorated.call(this, $element, options);\n            }\n\n            InputData.prototype.current = function (_, callback) {\n                function getSelected (data, selectedIds) {\n                    var selected = [];\n\n                    if (data.selected || $.inArray(data.id, selectedIds) !== -1) {\n                        data.selected = true;\n                        selected.push(data);\n                    } else {\n                        data.selected = false;\n                    }\n\n                    if (data.children) {\n                        selected.push.apply(selected, getSelected(data.children, selectedIds));\n                    }\n\n                    return selected;\n                }\n\n                var selected = [];\n\n                for (var d = 0; d < this._currentData.length; d++) {\n                    var data = this._currentData[d];\n\n                    selected.push.apply(\n                        selected,\n                        getSelected(\n                            data,\n                            this.$element.val().split(\n                                this._valueSeparator\n                            )\n                        )\n                    );\n                }\n\n                callback(selected);\n            };\n\n            InputData.prototype.select = function (_, data) {\n                if (!this.options.get('multiple')) {\n                    this.current(function (allData) {\n                        $.map(allData, function (data) {\n                            data.selected = false;\n                        });\n                    });\n\n                    this.$element.val(data.id);\n                    this.$element.trigger('change');\n                } else {\n                    var value = this.$element.val();\n                    value += this._valueSeparator + data.id;\n\n                    this.$element.val(value);\n                    this.$element.trigger('change');\n                }\n            };\n\n            InputData.prototype.unselect = function (_, data) {\n                var self = this;\n\n                data.selected = false;\n\n                this.current(function (allData) {\n                    var values = [];\n\n                    for (var d = 0; d < allData.length; d++) {\n                        var item = allData[d];\n\n                        if (data.id == item.id) {\n                            continue;\n                        }\n\n                        values.push(item.id);\n                    }\n\n                    self.$element.val(values.join(self._valueSeparator));\n                    self.$element.trigger('change');\n                });\n            };\n\n            InputData.prototype.query = function (_, params, callback) {\n                var results = [];\n\n                for (var d = 0; d < this._currentData.length; d++) {\n                    var data = this._currentData[d];\n\n                    var matches = this.matches(params, data);\n\n                    if (matches !== null) {\n                        results.push(matches);\n                    }\n                }\n\n                callback({\n                    results: results\n                });\n            };\n\n            InputData.prototype.addOptions = function (_, $options) {\n                var options = $.map($options, function ($option) {\n                    return $.data($option[0], 'data');\n                });\n\n                this._currentData.push.apply(this._currentData, options);\n            };\n\n            return InputData;\n        });\n\n        S2.define('select2/compat/matcher',[\n            'jquery'\n        ], function ($) {\n            function oldMatcher (matcher) {\n                function wrappedMatcher (params, data) {\n                    var match = $.extend(true, {}, data);\n\n                    if (params.term == null || $.trim(params.term) === '') {\n                        return match;\n                    }\n\n                    if (data.children) {\n                        for (var c = data.children.length - 1; c >= 0; c--) {\n                            var child = data.children[c];\n\n                            // Check if the child object matches\n                            // The old matcher returned a boolean true or false\n                            var doesMatch = matcher(params.term, child.text, child);\n\n                            // If the child didn't match, pop it off\n                            if (!doesMatch) {\n                                match.children.splice(c, 1);\n                            }\n                        }\n\n                        if (match.children.length > 0) {\n                            return match;\n                        }\n                    }\n\n                    if (matcher(params.term, data.text, data)) {\n                        return match;\n                    }\n\n                    return null;\n                }\n\n                return wrappedMatcher;\n            }\n\n            return oldMatcher;\n        });\n\n        S2.define('select2/compat/query',[\n\n        ], function () {\n            function Query (decorated, $element, options) {\n                if (options.get('debug') && window.console && console.warn) {\n                    console.warn(\n                        'Select2: The `query` option has been deprecated in favor of a ' +\n                        'custom data adapter that overrides the `query` method. Support ' +\n                        'will be removed for the `query` option in future versions of ' +\n                        'Select2.'\n                    );\n                }\n\n                decorated.call(this, $element, options);\n            }\n\n            Query.prototype.query = function (_, params, callback) {\n                params.callback = callback;\n\n                var query = this.options.get('query');\n\n                query.call(null, params);\n            };\n\n            return Query;\n        });\n\n        S2.define('select2/dropdown/attachContainer',[\n\n        ], function () {\n            function AttachContainer (decorated, $element, options) {\n                decorated.call(this, $element, options);\n            }\n\n            AttachContainer.prototype.position =\n                function (decorated, $dropdown, $container) {\n                    var $dropdownContainer = $container.find('.dropdown-wrapper');\n                    $dropdownContainer.append($dropdown);\n\n                    $dropdown.addClass('select2-dropdown--below');\n                    $container.addClass('select2-container--below');\n                };\n\n            return AttachContainer;\n        });\n\n        S2.define('select2/dropdown/stopPropagation',[\n\n        ], function () {\n            function StopPropagation () { }\n\n            StopPropagation.prototype.bind = function (decorated, container, $container) {\n                decorated.call(this, container, $container);\n\n                var stoppedEvents = [\n                    'blur',\n                    'change',\n                    'click',\n                    'dblclick',\n                    'focus',\n                    'focusin',\n                    'focusout',\n                    'input',\n                    'keydown',\n                    'keyup',\n                    'keypress',\n                    'mousedown',\n                    'mouseenter',\n                    'mouseleave',\n                    'mousemove',\n                    'mouseover',\n                    'mouseup',\n                    'search',\n                    'touchend',\n                    'touchstart'\n                ];\n\n                this.$dropdown.on(stoppedEvents.join(' '), function (evt) {\n                    evt.stopPropagation();\n                });\n            };\n\n            return StopPropagation;\n        });\n\n        S2.define('select2/selection/stopPropagation',[\n\n        ], function () {\n            function StopPropagation () { }\n\n            StopPropagation.prototype.bind = function (decorated, container, $container) {\n                decorated.call(this, container, $container);\n\n                var stoppedEvents = [\n                    'blur',\n                    'change',\n                    'click',\n                    'dblclick',\n                    'focus',\n                    'focusin',\n                    'focusout',\n                    'input',\n                    'keydown',\n                    'keyup',\n                    'keypress',\n                    'mousedown',\n                    'mouseenter',\n                    'mouseleave',\n                    'mousemove',\n                    'mouseover',\n                    'mouseup',\n                    'search',\n                    'touchend',\n                    'touchstart'\n                ];\n\n                this.$selection.on(stoppedEvents.join(' '), function (evt) {\n                    evt.stopPropagation();\n                });\n            };\n\n            return StopPropagation;\n        });\n\n        /*!\n * jQuery Mousewheel 3.1.13\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n */\n\n        (function (factory) {\n            if ( typeof S2.define === 'function' && S2.define.amd ) {\n                // AMD. Register as an anonymous module.\n                S2.define('jquery-mousewheel',['jquery'], factory);\n            } else if (true) {\n                // Node/CommonJS style for Browserify\n                module.exports = factory;\n            } else {}\n        }(function ($) {\n\n            var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],\n                toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?\n                         ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],\n                slice  = Array.prototype.slice,\n                nullLowestDeltaTimeout, lowestDelta;\n\n            if ( $.event.fixHooks ) {\n                for ( var i = toFix.length; i; ) {\n                    $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;\n                }\n            }\n\n            var special = $.event.special.mousewheel = {\n                version: '3.1.12',\n\n                setup: function() {\n                    if ( this.addEventListener ) {\n                        for ( var i = toBind.length; i; ) {\n                            this.addEventListener( toBind[--i], handler, false );\n                        }\n                    } else {\n                        this.onmousewheel = handler;\n                    }\n                    // Store the line height and page height for this particular element\n                    $.data(this, 'mousewheel-line-height', special.getLineHeight(this));\n                    $.data(this, 'mousewheel-page-height', special.getPageHeight(this));\n                },\n\n                teardown: function() {\n                    if ( this.removeEventListener ) {\n                        for ( var i = toBind.length; i; ) {\n                            this.removeEventListener( toBind[--i], handler, false );\n                        }\n                    } else {\n                        this.onmousewheel = null;\n                    }\n                    // Clean up the data we added to the element\n                    $.removeData(this, 'mousewheel-line-height');\n                    $.removeData(this, 'mousewheel-page-height');\n                },\n\n                getLineHeight: function(elem) {\n                    var $elem = $(elem),\n                        $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();\n                    if (!$parent.length) {\n                        $parent = $('body');\n                    }\n                    return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;\n                },\n\n                getPageHeight: function(elem) {\n                    return $(elem).height();\n                },\n\n                settings: {\n                    adjustOldDeltas: true, // see shouldAdjustOldDeltas() below\n                    normalizeOffset: true  // calls getBoundingClientRect for each event\n                }\n            };\n\n            $.fn.extend({\n                mousewheel: function(fn) {\n                    return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');\n                },\n\n                unmousewheel: function(fn) {\n                    return this.unbind('mousewheel', fn);\n                }\n            });\n\n\n            function handler(event) {\n                var orgEvent   = event || window.event,\n                    args       = slice.call(arguments, 1),\n                    delta      = 0,\n                    deltaX     = 0,\n                    deltaY     = 0,\n                    absDelta   = 0,\n                    offsetX    = 0,\n                    offsetY    = 0;\n                event = $.event.fix(orgEvent);\n                event.type = 'mousewheel';\n\n                // Old school scrollwheel delta\n                if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }\n                if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }\n                if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }\n                if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }\n\n                // Firefox < 17 horizontal scrolling related to DOMMouseScroll event\n                if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {\n                    deltaX = deltaY * -1;\n                    deltaY = 0;\n                }\n\n                // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy\n                delta = deltaY === 0 ? deltaX : deltaY;\n\n                // New school wheel delta (wheel event)\n                if ( 'deltaY' in orgEvent ) {\n                    deltaY = orgEvent.deltaY * -1;\n                    delta  = deltaY;\n                }\n                if ( 'deltaX' in orgEvent ) {\n                    deltaX = orgEvent.deltaX;\n                    if ( deltaY === 0 ) { delta  = deltaX * -1; }\n                }\n\n                // No change actually happened, no reason to go any further\n                if ( deltaY === 0 && deltaX === 0 ) { return; }\n\n                // Need to convert lines and pages to pixels if we aren't already in pixels\n                // There are three delta modes:\n                //   * deltaMode 0 is by pixels, nothing to do\n                //   * deltaMode 1 is by lines\n                //   * deltaMode 2 is by pages\n                if ( orgEvent.deltaMode === 1 ) {\n                    var lineHeight = $.data(this, 'mousewheel-line-height');\n                    delta  *= lineHeight;\n                    deltaY *= lineHeight;\n                    deltaX *= lineHeight;\n                } else if ( orgEvent.deltaMode === 2 ) {\n                    var pageHeight = $.data(this, 'mousewheel-page-height');\n                    delta  *= pageHeight;\n                    deltaY *= pageHeight;\n                    deltaX *= pageHeight;\n                }\n\n                // Store lowest absolute delta to normalize the delta values\n                absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );\n\n                if ( !lowestDelta || absDelta < lowestDelta ) {\n                    lowestDelta = absDelta;\n\n                    // Adjust older deltas if necessary\n                    if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n                        lowestDelta /= 40;\n                    }\n                }\n\n                // Adjust older deltas if necessary\n                if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n                    // Divide all the things by 40!\n                    delta  /= 40;\n                    deltaX /= 40;\n                    deltaY /= 40;\n                }\n\n                // Get a whole, normalized value for the deltas\n                delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);\n                deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);\n                deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);\n\n                // Normalise offsetX and offsetY properties\n                if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {\n                    var boundingRect = this.getBoundingClientRect();\n                    offsetX = event.clientX - boundingRect.left;\n                    offsetY = event.clientY - boundingRect.top;\n                }\n\n                // Add information to the event object\n                event.deltaX = deltaX;\n                event.deltaY = deltaY;\n                event.deltaFactor = lowestDelta;\n                event.offsetX = offsetX;\n                event.offsetY = offsetY;\n                // Go ahead and set deltaMode to 0 since we converted to pixels\n                // Although this is a little odd since we overwrite the deltaX/Y\n                // properties with normalized deltas.\n                event.deltaMode = 0;\n\n                // Add event and delta to the front of the arguments\n                args.unshift(event, delta, deltaX, deltaY);\n\n                // Clearout lowestDelta after sometime to better\n                // handle multiple device types that give different\n                // a different lowestDelta\n                // Ex: trackpad = 3 and mouse wheel = 120\n                if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }\n                nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);\n\n                return ($.event.dispatch || $.event.handle).apply(this, args);\n            }\n\n            function nullLowestDelta() {\n                lowestDelta = null;\n            }\n\n            function shouldAdjustOldDeltas(orgEvent, absDelta) {\n                // If this is an older event and the delta is divisable by 120,\n                // then we are assuming that the browser is treating this as an\n                // older mouse wheel event and that we should divide the deltas\n                // by 40 to try and get a more usable deltaFactor.\n                // Side note, this actually impacts the reported scroll distance\n                // in older browsers and can cause scrolling to be slower than native.\n                // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.\n                return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;\n            }\n\n        }));\n\n        S2.define('jquery.select2',[\n            'jquery',\n            'jquery-mousewheel',\n\n            './select2/core',\n            './select2/defaults'\n        ], function ($, _, Select2, Defaults) {\n            if ($.fn.select2 == null) {\n                // All methods that should return the element\n                var thisMethods = ['open', 'close', 'destroy'];\n\n                $.fn.select2 = function (options) {\n                    options = options || {};\n\n                    if (typeof options === 'object') {\n                        this.each(function () {\n                            var instanceOptions = $.extend(true, {}, options);\n\n                            var instance = new Select2($(this), instanceOptions);\n                        });\n\n                        return this;\n                    } else if (typeof options === 'string') {\n                        var ret;\n                        var args = Array.prototype.slice.call(arguments, 1);\n\n                        this.each(function () {\n                            var instance = $(this).data('select2');\n\n                            if (instance == null && window.console && console.error) {\n                                console.error(\n                                    'The select2(\\'' + options + '\\') method was called on an ' +\n                                    'element that is not using Select2.'\n                                );\n                            }\n\n                            ret = instance[options].apply(instance, args);\n                        });\n\n                        // Check if we should be returning `this`\n                        if ($.inArray(options, thisMethods) > -1) {\n                            return this;\n                        }\n\n                        return ret;\n                    } else {\n                        throw new Error('Invalid arguments for Select2: ' + options);\n                    }\n                };\n            }\n\n            if ($.fn.select2.defaults == null) {\n                $.fn.select2.defaults = Defaults;\n            }\n\n            return Select2;\n        });\n\n        //SUI-SELECT2\n        /**\n         * Rebranding select2 to SUIselect2\n         * It does avoid conflicts with other(s) that include select2 manually\n         */\n        S2.define('sui.select2',[\n            'jquery',\n            'jquery-mousewheel',\n\n            './select2/core',\n            './select2/defaults'\n        ], function ($, _, Select2, Defaults) {\n            if ($.fn.SUIselect2 == null) {\n                // All methods that should return the element\n                var thisMethods = ['open', 'close', 'destroy'];\n\n                $.fn.SUIselect2 = function (options) {\n                    options = options || {};\n\n                    if (typeof options === 'object') {\n                        this.each(function () {\n                            var instanceOptions = $.extend(true, {}, options);\n\n                            var instance = new Select2($(this), instanceOptions);\n                        });\n\n                        return this;\n                    } else if (typeof options === 'string') {\n                        var ret;\n                        var args = Array.prototype.slice.call(arguments, 1);\n\n                        this.each(function () {\n                            var instance = $(this).data('select2');\n\n                            if (instance == null && window.console && console.error) {\n                                console.error(\n                                    'The SUISelect2(\\'' + options + '\\') method was called on an ' +\n                                    'element that is not using Select2.'\n                                );\n\n                            }\n                            ret = instance[options].apply(instance, args);\n                        });\n\n                        // Check if we should be returning `this`\n                        if ($.inArray(options, thisMethods) > -1) {\n                            return this;\n                        }\n\n                        return ret;\n                    } else {\n                        throw new Error('Invalid arguments for SUISelect2: ' + options);\n                    }\n                };\n            }\n\n            if ($.fn.SUIselect2.defaults == null) {\n                $.fn.SUIselect2.defaults = Defaults;\n            }\n\n            return Select2;\n        });\n\n        // Return the AMD loader configuration so it can be used outside of this file\n        return {\n            define: S2.define,\n            require: S2.require\n        };\n    }());\n\n    // // Autoload the jQuery bindings\n    // // We know that all of the modules exist above this, so we're safe\n    // var select2 = S2.require('jquery.select2');\n    //\n    // // Hold the AMD module references on the jQuery function that was just loaded\n    // // This allows Select2 to use the internal loader outside of this file, such\n    // // as in the language files.\n    // jQuery.fn.select2.amd = S2;\n    //\n    // // Return the Select2 instance for anyone who is importing it.\n    // return select2;\n\n    // SUI-SELECT2\n    var select2 = S2.require('sui.select2');\n    return select2;\n}));\n\n( function( $ ) {\n\n\t// Convert all select lists to fancy sui Select lists.\n\t$( '.sui-select' ).SUIselect2({\n\t\tdropdownCssClass: 'sui-select-dropdown'\n\t});\n\n}( jQuery ) );\n\n( function( $ ) {\n\n    // Enable strict mode.\n    'use strict';\n\n    // Define global SUI object if it doesn't exist.\n    if ( 'object' !== typeof window.SUI ) {\n        window.SUI = {};\n    }\n\n    SUI.suiTabs = function( el ) {\n\t\tvar jq = $( el ).closest( '.sui-tabs' );\n\n\t\tif ( ! jq.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Resize the tab-area after short delay.\n\t\tfunction resizeArea() {\n\t\t\twindow.setTimeout( resizeAreaHandler, 20 );\n\t\t}\n\n\t\t// Resize the tab area to match the current tab.\n\t\tfunction resizeAreaHandler() {\n\t\t\tvar current = jq.find( '.sui-tab > input:checked' ).parent(),\n\t\t\t\tcontent = current.find( '.sui-tab-content' );\n\n\t\t\tjq.height( content.outerHeight() + current.outerHeight() - 6 );\n\t\t}\n\n\t\t// Updates the URL hash to keep tab open during page refresh\n\t\tfunction updateHash() {\n\t\t\tvar current = jq.find( '.sui-tab > input:checked' );\n\n\t\t\tjq.find( '.sui-tab label.active' ).removeClass( 'active' );\n\t\t\tcurrent.parent().find( 'label' ).addClass( 'active' );\n\n\t\t\tresizeArea();\n\t\t}\n\n\t\t// Open the tab that is specified in window URL hash\n\t\tfunction switchTab() {\n\t\t\tvar curTab,\n\t\t\t\troute = window.location.hash.replace( /[^\\w-_]/g, '' );\n\n\t\t\tif ( route ) {\n\t\t\t\tcurTab = jq.find( 'input#' + route );\n\n\t\t\t\tif ( curTab.parent().find( 'label' ).length ) {\n\t\t\t\t\tjq.find( '.sui-tab label.active' ).removeClass( 'active' );\n\t\t\t\t\tcurTab.parent().find( 'label' ).addClass( 'active' );\n\n\t\t\t\t\tif ( curTab.length && ! curTab.prop( 'checked' ) ) {\n\t\t\t\t\t\tcurTab.prop( 'checked', true );\n\n\t\t\t\t\t\tscrollWindow();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Scroll the window to top of the tab list.\n\t\tfunction scrollWindow() {\n\t\t\tresizeArea();\n\n\t\t\t$( 'html, body' ).scrollTop(\n\t\t\t\tjq.offset().top -\n\t\t\t\tparseInt( $( 'html' ).css( 'paddingTop' ) ) -\n\t\t\t\t20\n\t\t\t);\n\t\t}\n\n\t\t// Constructor.\n\t\tfunction init() {\n\t\t\tvar current = jq.find( '.sui-tab > input:checked' );\n\n\t\t\tjq.on( 'click', '.sui-tab > input[type=radio]', updateHash );\n\t\t\t$( window ).on( 'hashchange', switchTab );\n\t\t\tcurrent.parent().find( 'label' ).addClass( 'active' );\n\n\t\t\tresizeArea();\n\t\t\tswitchTab();\n\t\t}\n\n\t\tinit();\n\n\t\t$( window ).resize( function() {\n\t\t\tresizeArea();\n\t\t});\n\n\t\treturn this;\n\t};\n\n\t// Initialize all tab-areas.\n\t$( '.sui-2-2-4 .sui-tabs' ).each( function() {\n\t\tSUI.suiTabs( this );\n\t});\n\n}( jQuery ) );\n\n( function( $ ) {\n\n\t// Enable strict mode.\n\t'use strict';\n\n\t// Define global SUI object if it doesn't exist.\n\tif ( 'object' !== typeof window.SUI ) {\n\t\twindow.SUI = {};\n\t}\n\n\tSUI.upload = function() {\n\n\t\t$( '.sui-2-2-4 .sui-upload-group input[type=\"file\"]' ).on( 'change', function( e ) {\n\t\t\tvar file = $( this )[0].files[0],\n\t\t\t\tmessage = $( this ).find( '~ .sui-upload-message' );\n\n\t\t\tif ( file ) {\n\t\t\t\tmessage.text( file.name );\n\t\t\t}\n\n\t\t});\n\n\t};\n\n\tSUI.upload();\n\n}( jQuery ) );\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! @wpmudev/shared-ui/js/clipboard.js */ \"./node_modules/@wpmudev/shared-ui/js/clipboard.js\"), __webpack_require__(/*! @wpmudev/shared-ui/js/a11y-dialog.js */ \"./node_modules/@wpmudev/shared-ui/js/a11y-dialog.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@wpmudev/shared-ui/dist/js/shared-ui.js\n");

/***/ }),

/***/ "./node_modules/@wpmudev/shared-ui/js/a11y-dialog.js":
/*!***********************************************************!*\
  !*** ./node_modules/@wpmudev/shared-ui/js/a11y-dialog.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global NodeList, Element, define */\n\n(function (global) {\n  'use strict';\n\n  var FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n  var TAB_KEY = 9;\n  var ESCAPE_KEY = 27;\n  var focusedBeforeDialog;\n\n  /**\n   * Define the constructor to instantiate a dialog\n   *\n   * @constructor\n   * @param {Element} node\n   * @param {(NodeList | Element | string)} targets\n   */\n  function A11yDialog (node, targets) {\n    // Prebind the functions that will be bound in addEventListener and\n    // removeEventListener to avoid losing references\n    this._show = this.show.bind(this);\n    this._hide = this.hide.bind(this);\n    this._maintainFocus = this._maintainFocus.bind(this);\n    this._bindKeypress = this._bindKeypress.bind(this);\n\n    // Keep a reference of the node on the instance\n    this.node = node;\n\n    // Keep an object of listener types mapped to callback functions\n    this._listeners = {};\n\n    // Initialise everything needed for the dialog to work properly\n    this.create(targets);\n  }\n\n  /**\n   * Set up everything necessary for the dialog to be functioning\n   *\n   * @param {(NodeList | Element | string)} targets\n   * @return {this}\n   */\n  A11yDialog.prototype.create = function (targets) {\n    // Keep a collection of nodes to disable/enable when toggling the dialog\n    this._targets = this._targets || collect(targets) || getSiblings(this.node);\n\n    // Make sure the dialog element is disabled on load, and that the `shown`\n    // property is synced with its value\n    this.node.setAttribute('aria-hidden', true);\n    this.shown = false;\n\n    // Keep a collection of dialog openers, each of which will be bound a click\n    // event listener to open the dialog\n    this._openers = $$('[data-a11y-dialog-show=\"' + this.node.id + '\"]');\n    this._openers.forEach(function (opener) {\n      opener.addEventListener('click', this._show);\n    }.bind(this));\n\n    // Keep a collection of dialog closers, each of which will be bound a click\n    // event listener to close the dialog\n    this._closers = $$('[data-a11y-dialog-hide]', this.node)\n      .concat($$('[data-a11y-dialog-hide=\"' + this.node.id + '\"]'));\n    this._closers.forEach(function (closer) {\n      closer.addEventListener('click', this._hide);\n    }.bind(this));\n\n    // Execute all callbacks registered for the `create` event\n    this._fire('create');\n\n    return this;\n  };\n\n  /**\n   * Show the dialog element, disable all the targets (siblings), trap the\n   * current focus within it, listen for some specific key presses and fire all\n   * registered callbacks for `show` event\n   *\n   * @param {Event} event\n   * @return {this}\n   */\n  A11yDialog.prototype.show = function (event) {\n    // If the dialog is already open, abort\n    if (this.shown) {\n      return this;\n    }\n\n    var overlay = this.node.getElementsByClassName('sui-dialog-overlay');\n    var content = this.node.getElementsByClassName('sui-dialog-content');\n    content[0].className = 'sui-dialog-content sui-bounce-in';\n    overlay[0].className = 'sui-dialog-overlay sui-fade-in';\n\n    this.shown = true;\n    this.node.removeAttribute('aria-hidden');\n\n    // Iterate over the targets to disable them by setting their `aria-hidden`\n    // attribute to `true`; in case they already have this attribute, keep a\n    // reference of their original value to be able to restore it later\n    this._targets.forEach(function (target) {\n      var original = target.getAttribute('aria-hidden');\n\n      if (original) {\n        target.setAttribute('data-a11y-dialog-original', original);\n      }\n\n      target.setAttribute('aria-hidden', 'true');\n    });\n\n    // Keep a reference to the currently focused element to be able to restore\n    // it later, then set the focus to the first focusable child of the dialog\n    // element\n    focusedBeforeDialog = document.activeElement;\n    setFocusToFirstItem(this.node);\n\n    // Bind a focus event listener to the body element to make sure the focus\n    // stays trapped inside the dialog while open, and start listening for some\n    // specific key presses (TAB and ESC)\n    document.body.addEventListener('focus', this._maintainFocus, true);\n    document.addEventListener('keydown', this._bindKeypress);\n\n    // Add overlay class to document body.\n    document.getElementsByTagName( 'html' )[0].classList.add( 'sui-has-overlay' );\n\n    // Execute all callbacks registered for the `show` event\n    this._fire('show', event);\n\n    return this;\n  };\n\n  /**\n   * Hide the dialog element, enable all the targets (siblings), restore the\n   * focus to the previously active element, stop listening for some specific\n   * key presses and fire all registered callbacks for `hide` event\n   *\n   * @param {Event} event\n   * @return {this}\n   */\n  A11yDialog.prototype.hide = function (event) {\n    // If the dialog is already closed, abort\n    if (!this.shown) {\n      return this;\n    }\n\n\n    var overlay = this.node.getElementsByClassName('sui-dialog-overlay');\n\n    var content = this.node.getElementsByClassName('sui-dialog-content');\n\n    content[0].className = 'sui-dialog-content sui-bounce-out';\n\n    overlay[0].className = 'sui-dialog-overlay sui-fade-out';\n\n    this.shown = false;\n    // This has been set so there is enough time for the animation to show\n    var timeout_node = this.node;\n    setTimeout(function () {\n\t\ttimeout_node.setAttribute('aria-hidden', 'true');\n\t}, 300);\n\n    // Iterate over the targets to enable them by remove their `aria-hidden`\n    // attribute or resetting them to their initial value\n    this._targets.forEach(function (target) {\n      var original = target.getAttribute('data-a11y-dialog-original');\n\n\n      if (original) {\n        target.setAttribute('aria-hidden', original);\n        target.removeAttribute('data-a11y-dialog-original');\n      } else {\n        target.removeAttribute('aria-hidden');\n      }\n    });\n\n    // If their was a focused element before the dialog was opened, restore the\n    // focus back to it\n    if (focusedBeforeDialog) {\n      focusedBeforeDialog.focus();\n    }\n\n    // Remove the focus event listener to the body element and stop listening\n    // for specific key presses\n    document.body.removeEventListener('focus', this._maintainFocus, true);\n    document.removeEventListener('keydown', this._bindKeypress);\n\n    // Remove overlay class to document body.\n    document.getElementsByTagName( 'html' )[0].classList.remove( 'sui-has-overlay' );\n\n    // Execute all callbacks registered for the `hide` event\n    this._fire('hide', event);\n\n    return this;\n  };\n\n  /**\n   * Destroy the current instance (after making sure the dialog has been hidden)\n   * and remove all associated listeners from dialog openers and closers\n   *\n   * @return {this}\n   */\n  A11yDialog.prototype.destroy = function () {\n    // Hide the dialog to avoid destroying an open instance\n    this.hide();\n\n    // Remove the click event listener from all dialog openers\n    this._openers.forEach(function (opener) {\n      opener.removeEventListener('click', this._show);\n    }.bind(this));\n\n    // Remove the click event listener from all dialog closers\n    this._closers.forEach(function (closer) {\n      closer.removeEventListener('click', this._hide);\n    }.bind(this));\n\n    // Execute all callbacks registered for the `destroy` event\n    this._fire('destroy');\n\n    // Keep an object of listener types mapped to callback functions\n    this._listeners = {};\n\n    return this;\n  };\n\n  /**\n   * Register a new callback for the given event type\n   *\n   * @param {string} type\n   * @param {Function} handler\n   */\n  A11yDialog.prototype.on = function (type, handler) {\n    if (typeof this._listeners[type] === 'undefined') {\n      this._listeners[type] = [];\n    }\n\n    this._listeners[type].push(handler);\n\n    return this;\n  };\n\n  /**\n   * Unregister an existing callback for the given event type\n   *\n   * @param {string} type\n   * @param {Function} handler\n   */\n  A11yDialog.prototype.off = function (type, handler) {\n    var index = this._listeners[type].indexOf(handler);\n\n    if (index > -1) {\n      this._listeners[type].splice(index, 1);\n    }\n\n    return this;\n  };\n\n  /**\n   * Iterate over all registered handlers for given type and call them all with\n   * the dialog element as first argument, event as second argument (if any).\n   *\n   * @access private\n   * @param {string} type\n   * @param {Event} event\n   */\n  A11yDialog.prototype._fire = function (type, event) {\n    var listeners = this._listeners[type] || [];\n\n    listeners.forEach(function (listener) {\n      listener(this.node, event);\n    }.bind(this));\n  };\n\n  /**\n   * Private event handler used when listening to some specific key presses\n   * (namely ESCAPE and TAB)\n   *\n   * @access private\n   * @param {Event} event\n   */\n  A11yDialog.prototype._bindKeypress = function (event) {\n    // If the dialog is shown and the ESCAPE key is being pressed, prevent any\n    // further effects from the ESCAPE key and hide the dialog\n    if (this.shown && event.which === ESCAPE_KEY) {\n      event.preventDefault();\n      this.hide();\n    }\n\n    // If the dialog is shown and the TAB key is being pressed, make sure the\n    // focus stays trapped within the dialog element\n    if (this.shown && event.which === TAB_KEY) {\n      trapTabKey(this.node, event);\n    }\n  };\n\n  /**\n   * Private event handler used when making sure the focus stays within the\n   * currently open dialog\n   *\n   * @access private\n   * @param {Event} event\n   */\n  A11yDialog.prototype._maintainFocus = function (event) {\n    // If the dialog is shown and the focus is not within the dialog element,\n    // move it back to its first focusable child\n    if (this.shown && !this.node.contains(event.target)) {\n      setFocusToFirstItem(this.node);\n    }\n  };\n\n  /**\n   * Convert a NodeList into an array\n   *\n   * @param {NodeList} collection\n   * @return {Array<Element>}\n   */\n  function toArray (collection) {\n    return Array.prototype.slice.call(collection);\n  }\n\n  /**\n   * Query the DOM for nodes matching the given selector, scoped to context (or\n   * the whole document)\n   *\n   * @param {String} selector\n   * @param {Element} [context = document]\n   * @return {Array<Element>}\n   */\n  function $$ (selector, context) {\n    return toArray((context || document).querySelectorAll(selector));\n  }\n\n  /**\n   * Return an array of Element based on given argument (NodeList, Element or\n   * string representing a selector)\n   *\n   * @param {(NodeList | Element | string)} target\n   * @return {Array<Element>}\n   */\n  function collect (target) {\n    if (NodeList.prototype.isPrototypeOf(target)) {\n      return toArray(target);\n    }\n\n    if (Element.prototype.isPrototypeOf(target)) {\n      return [target];\n    }\n\n    if (typeof target === 'string') {\n      return $$(target);\n    }\n  }\n\n  /**\n   * Set the focus to the first focusable child of the given element\n   *\n   * @param {Element} node\n   */\n  function setFocusToFirstItem (node) {\n    var focusableChildren = getFocusableChildren(node);\n\n    if (focusableChildren.length) {\n      focusableChildren[0].focus();\n    }\n  }\n\n  /**\n   * Get the focusable children of the given element\n   *\n   * @param {Element} node\n   * @return {Array<Element>}\n   */\n  function getFocusableChildren (node) {\n    return $$(FOCUSABLE_ELEMENTS.join(','), node).filter(function (child) {\n      return !!(child.offsetWidth || child.offsetHeight || child.getClientRects().length);\n    });\n  }\n\n  /**\n   * Trap the focus inside the given element\n   *\n   * @param {Element} node\n   * @param {Event} event\n   */\n  function trapTabKey (node, event) {\n    var focusableChildren = getFocusableChildren(node);\n    var focusedItemIndex = focusableChildren.indexOf(document.activeElement);\n\n    // If the SHIFT key is being pressed while tabbing (moving backwards) and\n    // the currently focused item is the first one, move the focus to the last\n    // focusable item from the dialog element\n    if (event.shiftKey && focusedItemIndex === 0) {\n      focusableChildren[focusableChildren.length - 1].focus();\n      event.preventDefault();\n    // If the SHIFT key is not being pressed (moving forwards) and the currently\n    // focused item is the last one, move the focus to the first focusable item\n    // from the dialog element\n    } else if (!event.shiftKey && focusedItemIndex === focusableChildren.length - 1) {\n      focusableChildren[0].focus();\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Retrieve siblings from given element\n   *\n   * @param {Element} node\n   * @return {Array<Element>}\n   */\n  function getSiblings (node) {\n    var nodes = toArray(node.parentNode.childNodes);\n    var siblings = nodes.filter(function (node) {\n      return node.nodeType === 1;\n    });\n\n    siblings.splice(siblings.indexOf(node), 1);\n\n    return siblings;\n  }\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = A11yDialog;\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return A11yDialog;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(typeof global !== 'undefined' ? global : window));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@wpmudev/shared-ui/js/a11y-dialog.js\n");

/***/ }),

/***/ "./node_modules/@wpmudev/shared-ui/js/clipboard.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wpmudev/shared-ui/js/clipboard.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var require;var require;/**\n * clipboard.js v1.7.1\n * https://zenorocha.github.io/clipboard.js\n *\n * Licensed MIT © Zeno Rocha\n */\n(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar DOCUMENT_NODE_TYPE = 9;\n\n/**\n * A polyfill for Element.matches()\n */\nif (typeof Element !== 'undefined' && !Element.prototype.matches) {\n\tvar proto = Element.prototype;\n\n\tproto.matches = proto.matchesSelector ||\n\t\t\t\t\tproto.mozMatchesSelector ||\n\t\t\t\t\tproto.msMatchesSelector ||\n\t\t\t\t\tproto.oMatchesSelector ||\n\t\t\t\t\tproto.webkitMatchesSelector;\n}\n\n/**\n * Finds the closest parent that matches a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @return {Function}\n */\nfunction closest(element, selector) {\n\twhile (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n\t\tif (typeof element.matches === 'function' &&\n\t\t\telement.matches(selector)) {\n\t\t\treturn element;\n\t\t}\n\t\telement = element.parentNode;\n\t}\n}\n\nmodule.exports = closest;\n\n},{}],2:[function(require,module,exports){\nvar closest = require('./closest');\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction delegate(element, selector, type, callback, useCapture) {\n\tvar listenerFn = listener.apply(this, arguments);\n\n\telement.addEventListener(type, listenerFn, useCapture);\n\n\treturn {\n\t\tdestroy: function() {\n\t\t\telement.removeEventListener(type, listenerFn, useCapture);\n\t\t}\n\t}\n}\n\n/**\n * Finds closest match and invokes callback.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Function}\n */\nfunction listener(element, selector, type, callback) {\n\treturn function(e) {\n\t\te.delegateTarget = closest(e.target, selector);\n\n\t\tif (e.delegateTarget) {\n\t\t\tcallback.call(element, e);\n\t\t}\n\t}\n}\n\nmodule.exports = delegate;\n\n},{\"./closest\":1}],3:[function(require,module,exports){\n/**\n * Check if argument is a HTML element.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.node = function(value) {\n\treturn value !== undefined\n\t\t&& value instanceof HTMLElement\n\t\t&& value.nodeType === 1;\n};\n\n/**\n * Check if argument is a list of HTML elements.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.nodeList = function(value) {\n\tvar type = Object.prototype.toString.call(value);\n\n\treturn value !== undefined\n\t\t&& (type === '[object NodeList]' || type === '[object HTMLCollection]')\n\t\t&& ('length' in value)\n\t\t&& (value.length === 0 || exports.node(value[0]));\n};\n\n/**\n * Check if argument is a string.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.string = function(value) {\n\treturn typeof value === 'string'\n\t\t|| value instanceof String;\n};\n\n/**\n * Check if argument is a function.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.fn = function(value) {\n\tvar type = Object.prototype.toString.call(value);\n\n\treturn type === '[object Function]';\n};\n\n},{}],4:[function(require,module,exports){\nvar is = require('./is');\nvar delegate = require('delegate');\n\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listen(target, type, callback) {\n\tif (!target && !type && !callback) {\n\t\tthrow new Error('Missing required arguments');\n\t}\n\n\tif (!is.string(type)) {\n\t\tthrow new TypeError('Second argument must be a String');\n\t}\n\n\tif (!is.fn(callback)) {\n\t\tthrow new TypeError('Third argument must be a Function');\n\t}\n\n\tif (is.node(target)) {\n\t\treturn listenNode(target, type, callback);\n\t}\n\telse if (is.nodeList(target)) {\n\t\treturn listenNodeList(target, type, callback);\n\t}\n\telse if (is.string(target)) {\n\t\treturn listenSelector(target, type, callback);\n\t}\n\telse {\n\t\tthrow new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n\t}\n}\n\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNode(node, type, callback) {\n\tnode.addEventListener(type, callback);\n\n\treturn {\n\t\tdestroy: function() {\n\t\t\tnode.removeEventListener(type, callback);\n\t\t}\n\t}\n}\n\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNodeList(nodeList, type, callback) {\n\tArray.prototype.forEach.call(nodeList, function(node) {\n\t\tnode.addEventListener(type, callback);\n\t});\n\n\treturn {\n\t\tdestroy: function() {\n\t\t\tArray.prototype.forEach.call(nodeList, function(node) {\n\t\t\t\tnode.removeEventListener(type, callback);\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenSelector(selector, type, callback) {\n\treturn delegate(document.body, selector, type, callback);\n}\n\nmodule.exports = listen;\n\n},{\"./is\":3,\"delegate\":2}],5:[function(require,module,exports){\nfunction select(element) {\n\tvar selectedText;\n\n\tif (element.nodeName === 'SELECT') {\n\t\telement.focus();\n\n\t\tselectedText = element.value;\n\t}\n\telse if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n\t\tvar isReadOnly = element.hasAttribute('readonly');\n\n\t\tif (!isReadOnly) {\n\t\t\telement.setAttribute('readonly', '');\n\t\t}\n\n\t\telement.select();\n\t\telement.setSelectionRange(0, element.value.length);\n\n\t\tif (!isReadOnly) {\n\t\t\telement.removeAttribute('readonly');\n\t\t}\n\n\t\tselectedText = element.value;\n\t}\n\telse {\n\t\tif (element.hasAttribute('contenteditable')) {\n\t\t\telement.focus();\n\t\t}\n\n\t\tvar selection = window.getSelection();\n\t\tvar range = document.createRange();\n\n\t\trange.selectNodeContents(element);\n\t\tselection.removeAllRanges();\n\t\tselection.addRange(range);\n\n\t\tselectedText = selection.toString();\n\t}\n\n\treturn selectedText;\n}\n\nmodule.exports = select;\n\n},{}],6:[function(require,module,exports){\nfunction E () {\n\t// Keep this empty so it's easier to inherit from\n\t// (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n\ton: function (name, callback, ctx) {\n\tvar e = this.e || (this.e = {});\n\n\t(e[name] || (e[name] = [])).push({\n\t\tfn: callback,\n\t\tctx: ctx\n\t});\n\n\treturn this;\n\t},\n\n\tonce: function (name, callback, ctx) {\n\tvar self = this;\n\tfunction listener () {\n\t\tself.off(name, listener);\n\t\tcallback.apply(ctx, arguments);\n\t};\n\n\tlistener._ = callback\n\treturn this.on(name, listener, ctx);\n\t},\n\n\temit: function (name) {\n\tvar data = [].slice.call(arguments, 1);\n\tvar evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n\tvar i = 0;\n\tvar len = evtArr.length;\n\n\tfor (i; i < len; i++) {\n\t\tevtArr[i].fn.apply(evtArr[i].ctx, data);\n\t}\n\n\treturn this;\n\t},\n\n\toff: function (name, callback) {\n\tvar e = this.e || (this.e = {});\n\tvar evts = e[name];\n\tvar liveEvents = [];\n\n\tif (evts && callback) {\n\t\tfor (var i = 0, len = evts.length; i < len; i++) {\n\t\tif (evts[i].fn !== callback && evts[i].fn._ !== callback)\n\t\t\tliveEvents.push(evts[i]);\n\t\t}\n\t}\n\n\t// Remove event from queue to prevent memory leak\n\t// Suggested by https://github.com/lazd\n\t// Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\t(liveEvents.length)\n\t\t? e[name] = liveEvents\n\t\t: delete e[name];\n\n\treturn this;\n\t}\n};\n\nmodule.exports = E;\n\n},{}],7:[function(require,module,exports){\n(function (global, factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(['module', 'select'], factory);\n\t} else if (typeof exports !== \"undefined\") {\n\t\tfactory(module, require('select'));\n\t} else {\n\t\tvar mod = {\n\t\t\texports: {}\n\t\t};\n\t\tfactory(mod, global.select);\n\t\tglobal.clipboardAction = mod.exports;\n\t}\n})(this, function (module, _select) {\n\t'use strict';\n\n\tvar _select2 = _interopRequireDefault(_select);\n\n\tfunction _interopRequireDefault(obj) {\n\t\treturn obj && obj.__esModule ? obj : {\n\t\t\tdefault: obj\n\t\t};\n\t}\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n\t\treturn typeof obj;\n\t} : function (obj) {\n\t\treturn obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n\t};\n\n\tfunction _classCallCheck(instance, Constructor) {\n\t\tif (!(instance instanceof Constructor)) {\n\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t}\n\t}\n\n\tvar _createClass = function () {\n\t\tfunction defineProperties(target, props) {\n\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\tvar descriptor = props[i];\n\t\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\t\tdescriptor.configurable = true;\n\t\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn function (Constructor, protoProps, staticProps) {\n\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t\t\tif (staticProps) defineProperties(Constructor, staticProps);\n\t\t\treturn Constructor;\n\t\t};\n\t}();\n\n\tvar ClipboardJSAction = function () {\n\t\t/**\n\t\t * @param {Object} options\n\t\t */\n\t\tfunction ClipboardJSAction(options) {\n\t\t\t_classCallCheck(this, ClipboardJSAction);\n\n\t\t\tthis.resolveOptions(options);\n\t\t\tthis.initSelection();\n\t\t}\n\n\t\t/**\n\t\t * Defines base properties passed from constructor.\n\t\t * @param {Object} options\n\t\t */\n\n\n\t\t_createClass(ClipboardJSAction, [{\n\t\t\tkey: 'resolveOptions',\n\t\t\tvalue: function resolveOptions() {\n\t\t\t\tvar options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t\t\t\tthis.action = options.action;\n\t\t\t\tthis.container = options.container;\n\t\t\t\tthis.emitter = options.emitter;\n\t\t\t\tthis.target = options.target;\n\t\t\t\tthis.text = options.text;\n\t\t\t\tthis.trigger = options.trigger;\n\n\t\t\t\tthis.selectedText = '';\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'initSelection',\n\t\t\tvalue: function initSelection() {\n\t\t\t\tif (this.text) {\n\t\t\t\t\tthis.selectFake();\n\t\t\t\t} else if (this.target) {\n\t\t\t\t\tthis.selectTarget();\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'selectFake',\n\t\t\tvalue: function selectFake() {\n\t\t\t\tvar _this = this;\n\n\t\t\t\tvar isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n\n\t\t\t\tthis.removeFake();\n\n\t\t\t\tthis.fakeHandlerCallback = function () {\n\t\t\t\t\treturn _this.removeFake();\n\t\t\t\t};\n\t\t\t\tthis.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n\n\t\t\t\tthis.fakeElem = document.createElement('textarea');\n\t\t\t\t// Prevent zooming on iOS\n\t\t\t\tthis.fakeElem.style.fontSize = '12pt';\n\t\t\t\t// Reset box model\n\t\t\t\tthis.fakeElem.style.border = '0';\n\t\t\t\tthis.fakeElem.style.padding = '0';\n\t\t\t\tthis.fakeElem.style.margin = '0';\n\t\t\t\t// Move element out of screen horizontally\n\t\t\t\tthis.fakeElem.style.position = 'absolute';\n\t\t\t\tthis.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\t\t\t\t// Move element to the same position vertically\n\t\t\t\tvar yPosition = window.pageYOffset || document.documentElement.scrollTop;\n\t\t\t\tthis.fakeElem.style.top = yPosition + 'px';\n\n\t\t\t\tthis.fakeElem.setAttribute('readonly', '');\n\t\t\t\tthis.fakeElem.value = this.text;\n\n\t\t\t\tthis.container.appendChild(this.fakeElem);\n\n\t\t\t\tthis.selectedText = (0, _select2.default)(this.fakeElem);\n\t\t\t\tthis.copyText();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'removeFake',\n\t\t\tvalue: function removeFake() {\n\t\t\t\tif (this.fakeHandler) {\n\t\t\t\t\tthis.container.removeEventListener('click', this.fakeHandlerCallback);\n\t\t\t\t\tthis.fakeHandler = null;\n\t\t\t\t\tthis.fakeHandlerCallback = null;\n\t\t\t\t}\n\n\t\t\t\tif (this.fakeElem) {\n\t\t\t\t\tthis.container.removeChild(this.fakeElem);\n\t\t\t\t\tthis.fakeElem = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'selectTarget',\n\t\t\tvalue: function selectTarget() {\n\t\t\t\tthis.selectedText = (0, _select2.default)(this.target);\n\t\t\t\tthis.copyText();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'copyText',\n\t\t\tvalue: function copyText() {\n\t\t\t\tvar succeeded = void 0;\n\n\t\t\t\ttry {\n\t\t\t\t\tsucceeded = document.execCommand(this.action);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tsucceeded = false;\n\t\t\t\t}\n\n\t\t\t\tthis.handleResult(succeeded);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'handleResult',\n\t\t\tvalue: function handleResult(succeeded) {\n\t\t\t\tthis.emitter.emit(succeeded ? 'success' : 'error', {\n\t\t\t\t\taction: this.action,\n\t\t\t\t\ttext: this.selectedText,\n\t\t\t\t\ttrigger: this.trigger,\n\t\t\t\t\tclearSelection: this.clearSelection.bind(this)\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'clearSelection',\n\t\t\tvalue: function clearSelection() {\n\t\t\t\tif (this.trigger) {\n\t\t\t\t\tthis.trigger.focus();\n\t\t\t\t}\n\n\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'destroy',\n\t\t\tvalue: function destroy() {\n\t\t\t\tthis.removeFake();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'action',\n\t\t\tset: function set() {\n\t\t\t\tvar action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';\n\n\t\t\t\tthis._action = action;\n\n\t\t\t\tif (this._action !== 'copy' && this._action !== 'cut') {\n\t\t\t\t\tthrow new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function get() {\n\t\t\t\treturn this._action;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'target',\n\t\t\tset: function set(target) {\n\t\t\t\tif (target !== undefined) {\n\t\t\t\t\tif (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {\n\t\t\t\t\t\tif (this.action === 'copy' && target.hasAttribute('disabled')) {\n\t\t\t\t\t\t\tthrow new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n\t\t\t\t\t\t\tthrow new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._target = target;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Invalid \"target\" value, use a valid Element');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function get() {\n\t\t\t\treturn this._target;\n\t\t\t}\n\t\t}]);\n\n\t\treturn ClipboardJSAction;\n\t}();\n\n\tmodule.exports = ClipboardJSAction;\n});\n\n},{\"select\":5}],8:[function(require,module,exports){\n(function (global, factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(['module', './clipboard-action', 'tiny-emitter', 'good-listener'], factory);\n\t} else if (typeof exports !== \"undefined\") {\n\t\tfactory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));\n\t} else {\n\t\tvar mod = {\n\t\t\texports: {}\n\t\t};\n\t\tfactory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);\n\t\tglobal.clipboard = mod.exports;\n\t}\n})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {\n\t'use strict';\n\n\tvar _clipboardAction2 = _interopRequireDefault(_clipboardAction);\n\n\tvar _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\n\tvar _goodListener2 = _interopRequireDefault(_goodListener);\n\n\tfunction _interopRequireDefault(obj) {\n\t\treturn obj && obj.__esModule ? obj : {\n\t\t\tdefault: obj\n\t\t};\n\t}\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n\t\treturn typeof obj;\n\t} : function (obj) {\n\t\treturn obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n\t};\n\n\tfunction _classCallCheck(instance, Constructor) {\n\t\tif (!(instance instanceof Constructor)) {\n\t\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t\t}\n\t}\n\n\tvar _createClass = function () {\n\t\tfunction defineProperties(target, props) {\n\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\tvar descriptor = props[i];\n\t\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\t\tdescriptor.configurable = true;\n\t\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn function (Constructor, protoProps, staticProps) {\n\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t\t\tif (staticProps) defineProperties(Constructor, staticProps);\n\t\t\treturn Constructor;\n\t\t};\n\t}();\n\n\tfunction _possibleConstructorReturn(self, call) {\n\t\tif (!self) {\n\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t}\n\n\t\treturn call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n\t}\n\n\tfunction _inherits(subClass, superClass) {\n\t\tif (typeof superClass !== \"function\" && superClass !== null) {\n\t\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n\t\t}\n\n\t\tsubClass.prototype = Object.create(superClass && superClass.prototype, {\n\t\t\tconstructor: {\n\t\t\t\tvalue: subClass,\n\t\t\t\tenumerable: false,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t}\n\t\t});\n\t\tif (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t}\n\n\tvar ClipboardJS = function (_Emitter) {\n\t\t_inherits(ClipboardJS, _Emitter);\n\n\t\t/**\n\t\t * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n\t\t * @param {Object} options\n\t\t */\n\t\tfunction ClipboardJS(trigger, options) {\n\t\t\t_classCallCheck(this, ClipboardJS);\n\n\t\t\tvar _this = _possibleConstructorReturn(this, (ClipboardJS.__proto__ || Object.getPrototypeOf(ClipboardJS)).call(this));\n\n\t\t\t_this.resolveOptions(options);\n\t\t\t_this.listenClick(trigger);\n\t\t\treturn _this;\n\t\t}\n\n\t\t/**\n\t\t * Defines if attributes would be resolved using internal setter functions\n\t\t * or custom functions that were passed in the constructor.\n\t\t * @param {Object} options\n\t\t */\n\n\n\t\t_createClass(ClipboardJS, [{\n\t\t\tkey: 'resolveOptions',\n\t\t\tvalue: function resolveOptions() {\n\t\t\t\tvar options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t\t\t\tthis.action = typeof options.action === 'function' ? options.action : this.defaultAction;\n\t\t\t\tthis.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\n\t\t\t\tthis.text = typeof options.text === 'function' ? options.text : this.defaultText;\n\t\t\t\tthis.container = _typeof(options.container) === 'object' ? options.container : document.body;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'listenClick',\n\t\t\tvalue: function listenClick(trigger) {\n\t\t\t\tvar _this2 = this;\n\n\t\t\t\tthis.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {\n\t\t\t\t\treturn _this2.onClick(e);\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'onClick',\n\t\t\tvalue: function onClick(e) {\n\t\t\t\tvar trigger = e.delegateTarget || e.currentTarget;\n\n\t\t\t\tif (this.clipboardAction) {\n\t\t\t\t\tthis.clipboardAction = null;\n\t\t\t\t}\n\n\t\t\t\tthis.clipboardAction = new _clipboardAction2.default({\n\t\t\t\t\taction: this.action(trigger),\n\t\t\t\t\ttarget: this.target(trigger),\n\t\t\t\t\ttext: this.text(trigger),\n\t\t\t\t\tcontainer: this.container,\n\t\t\t\t\ttrigger: trigger,\n\t\t\t\t\temitter: this\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'defaultAction',\n\t\t\tvalue: function defaultAction(trigger) {\n\t\t\t\treturn getAttributeValue('action', trigger);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'defaultTarget',\n\t\t\tvalue: function defaultTarget(trigger) {\n\t\t\t\tvar selector = getAttributeValue('target', trigger);\n\n\t\t\t\tif (selector) {\n\t\t\t\t\treturn document.querySelector(selector);\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'defaultText',\n\t\t\tvalue: function defaultText(trigger) {\n\t\t\t\treturn getAttributeValue('text', trigger);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'destroy',\n\t\t\tvalue: function destroy() {\n\t\t\t\tthis.listener.destroy();\n\n\t\t\t\tif (this.clipboardAction) {\n\t\t\t\t\tthis.clipboardAction.destroy();\n\t\t\t\t\tthis.clipboardAction = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'isSupported',\n\t\t\tvalue: function isSupported() {\n\t\t\t\tvar action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];\n\n\t\t\t\tvar actions = typeof action === 'string' ? [action] : action;\n\t\t\t\tvar support = !!document.queryCommandSupported;\n\n\t\t\t\tactions.forEach(function (action) {\n\t\t\t\t\tsupport = support && !!document.queryCommandSupported(action);\n\t\t\t\t});\n\n\t\t\t\treturn support;\n\t\t\t}\n\t\t}]);\n\n\t\treturn ClipboardJS;\n\t}(_tinyEmitter2.default);\n\n\t/**\n\t * Helper function to retrieve attribute value.\n\t * @param {String} suffix\n\t * @param {Element} element\n\t */\n\tfunction getAttributeValue(suffix, element) {\n\t\tvar attribute = 'data-clipboard-' + suffix;\n\n\t\tif (!element.hasAttribute(attribute)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn element.getAttribute(attribute);\n\t}\n\n\tmodule.exports = ClipboardJS;\n});\n\n},{\"./clipboard-action\":7,\"good-listener\":4,\"tiny-emitter\":6}]},{},[8])(8)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@wpmudev/shared-ui/js/clipboard.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ })

/******/ });